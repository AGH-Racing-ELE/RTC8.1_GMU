
GMU_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d8c  08004d8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d8c  08004d8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d8c  08004d8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000002a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000109d4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003459  00000000  00000000  00030a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010e8  00000000  00000000  00033eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ccb  00000000  00000000  00034f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fba4  00000000  00000000  00035c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001793f  00000000  00000000  00055807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bea66  00000000  00000000  0006d146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000447c  00000000  00000000  0012bbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00130028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d44 	.word	0x08004d44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d44 	.word	0x08004d44

080001c8 <ADC_Init>:
#include "ADC_Handler.h"

uint16_t adcValue;

void ADC_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_OPAMP_Start(&hopamp1);
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <ADC_Init+0x1c>)
 80001ce:	f002 febb 	bl	8002f48 <HAL_OPAMP_Start>
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80001d2:	2100      	movs	r1, #0
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <ADC_Init+0x20>)
 80001d6:	f001 fbff 	bl	80019d8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <ADC_Init+0x20>)
 80001dc:	f000 ffc8 	bl	8001170 <HAL_ADC_Start_IT>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000178 	.word	0x20000178
 80001e8:	20000100 	.word	0x20000100

080001ec <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80001fc:	d106      	bne.n	800020c <HAL_ADC_ConvCpltCallback+0x20>
	{
		adcValue = HAL_ADC_GetValue(hadc);
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f001 f8f6 	bl	80013f0 <HAL_ADC_GetValue>
 8000204:	4603      	mov	r3, r0
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b02      	ldr	r3, [pc, #8]	; (8000214 <HAL_ADC_ConvCpltCallback+0x28>)
 800020a:	801a      	strh	r2, [r3, #0]
	}
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000028 	.word	0x20000028

08000218 <AppInit>:


Gearbox_t gearbox;

void AppInit(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	gearboxInit(&gearbox);
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <AppInit+0x18>)
 800021e:	f000 f8f7 	bl	8000410 <gearboxInit>
	ADC_Init();
 8000222:	f7ff ffd1 	bl	80001c8 <ADC_Init>
	CAN_Handler_Init();
 8000226:	f000 f86d 	bl	8000304 <CAN_Handler_Init>

}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	2000002c 	.word	0x2000002c

08000234 <canRxProcess>:

void canRxProcess()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	uint8_t clutch_data;

	if(CAN_Handler_IsGearUpCommanded())
 800023a:	f000 f891 	bl	8000360 <CAN_Handler_IsGearUpCommanded>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d003      	beq.n	800024c <canRxProcess+0x18>
	{
		startUpshift(&gearbox);
 8000244:	4812      	ldr	r0, [pc, #72]	; (8000290 <canRxProcess+0x5c>)
 8000246:	f000 f921 	bl	800048c <startUpshift>
		return;
 800024a:	e01d      	b.n	8000288 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsGearDownCommanded())
 800024c:	f000 f8a4 	bl	8000398 <CAN_Handler_IsGearDownCommanded>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <canRxProcess+0x2a>
	{
		startDownshift(&gearbox);
 8000256:	480e      	ldr	r0, [pc, #56]	; (8000290 <canRxProcess+0x5c>)
 8000258:	f000 f929 	bl	80004ae <startDownshift>
		return;
 800025c:	e014      	b.n	8000288 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsClutchCommanded(&clutch_data))
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f8b5 	bl	80003d0 <CAN_Handler_IsClutchCommanded>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00d      	beq.n	8000288 <canRxProcess+0x54>
	{
		if(clutch_data == 255)
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	2bff      	cmp	r3, #255	; 0xff
 8000270:	d103      	bne.n	800027a <canRxProcess+0x46>
			{
				clutch(true);
 8000272:	2001      	movs	r0, #1
 8000274:	f000 f92c 	bl	80004d0 <clutch>
			}
			else if(clutch_data == 0)
			{
				clutch(false);
			}
				return;
 8000278:	e005      	b.n	8000286 <canRxProcess+0x52>
			else if(clutch_data == 0)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d102      	bne.n	8000286 <canRxProcess+0x52>
				clutch(false);
 8000280:	2000      	movs	r0, #0
 8000282:	f000 f925 	bl	80004d0 <clutch>
				return;
 8000286:	bf00      	nop
	}

}
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	2000002c 	.word	0x2000002c

08000294 <AppProcess>:
void statusLED(void)
{
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
}
void AppProcess(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	uint8_t CANRXtick = HAL_GetTick();
 800029a:	f000 fd69 	bl	8000d70 <HAL_GetTick>
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
	uint8_t CANSendFrameTick = HAL_GetTick();
 80002a2:	f000 fd65 	bl	8000d70 <HAL_GetTick>
 80002a6:	4603      	mov	r3, r0
 80002a8:	71bb      	strb	r3, [r7, #6]
	uint8_t StatusLEDTick = HAL_GetTick();
 80002aa:	f000 fd61 	bl	8000d70 <HAL_GetTick>
 80002ae:	4603      	mov	r3, r0
 80002b0:	717b      	strb	r3, [r7, #5]

	while(1)
	{
		if((HAL_GetTick() - CANRXtick) > 1)
 80002b2:	f000 fd5d 	bl	8000d70 <HAL_GetTick>
 80002b6:	4602      	mov	r2, r0
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	1ad3      	subs	r3, r2, r3
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d905      	bls.n	80002cc <AppProcess+0x38>
		{
			canRxProcess();
 80002c0:	f7ff ffb8 	bl	8000234 <canRxProcess>
			CANRXtick = HAL_GetTick();
 80002c4:	f000 fd54 	bl	8000d70 <HAL_GetTick>
 80002c8:	4603      	mov	r3, r0
 80002ca:	71fb      	strb	r3, [r7, #7]
		}
		if((HAL_GetTick() - CANSendFrameTick) > 2)
 80002cc:	f000 fd50 	bl	8000d70 <HAL_GetTick>
 80002d0:	4602      	mov	r2, r0
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	2b02      	cmp	r3, #2
 80002d8:	d905      	bls.n	80002e6 <AppProcess+0x52>
		{
			canRxProcess();
 80002da:	f7ff ffab 	bl	8000234 <canRxProcess>
			CANSendFrameTick = HAL_GetTick();
 80002de:	f000 fd47 	bl	8000d70 <HAL_GetTick>
 80002e2:	4603      	mov	r3, r0
 80002e4:	71bb      	strb	r3, [r7, #6]
		}
		if((HAL_GetTick() - StatusLEDTick) > 1000)
 80002e6:	f000 fd43 	bl	8000d70 <HAL_GetTick>
 80002ea:	4602      	mov	r2, r0
 80002ec:	797b      	ldrb	r3, [r7, #5]
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002f4:	d9dd      	bls.n	80002b2 <AppProcess+0x1e>
		{
			canRxProcess();
 80002f6:	f7ff ff9d 	bl	8000234 <canRxProcess>
			StatusLEDTick = HAL_GetTick();
 80002fa:	f000 fd39 	bl	8000d70 <HAL_GetTick>
 80002fe:	4603      	mov	r3, r0
 8000300:	717b      	strb	r3, [r7, #5]
		if((HAL_GetTick() - CANRXtick) > 1)
 8000302:	e7d6      	b.n	80002b2 <AppProcess+0x1e>

08000304 <CAN_Handler_Init>:

struct can_frame cf_gear_up, cf_gear_down, cf_clutch;
struct can_frame cf_gmu1, cf_gmu2;


void CAN_Handler_Init(){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0

	CAN_Init();
 8000308:	f000 fc5e 	bl	8000bc8 <CAN_Init>

	CAN_InitFrame(&cf_gear_up, 0x000, 0, 1);
 800030c:	2301      	movs	r3, #1
 800030e:	2200      	movs	r2, #0
 8000310:	2100      	movs	r1, #0
 8000312:	480e      	ldr	r0, [pc, #56]	; (800034c <CAN_Handler_Init+0x48>)
 8000314:	f000 fc64 	bl	8000be0 <CAN_InitFrame>
	CAN_InitFrame(&cf_gear_down, 0x001, 0, 1);
 8000318:	2301      	movs	r3, #1
 800031a:	2200      	movs	r2, #0
 800031c:	2101      	movs	r1, #1
 800031e:	480c      	ldr	r0, [pc, #48]	; (8000350 <CAN_Handler_Init+0x4c>)
 8000320:	f000 fc5e 	bl	8000be0 <CAN_InitFrame>
	CAN_InitFrame(&cf_clutch, 0x002, 0, 1);
 8000324:	2301      	movs	r3, #1
 8000326:	2200      	movs	r2, #0
 8000328:	2102      	movs	r1, #2
 800032a:	480a      	ldr	r0, [pc, #40]	; (8000354 <CAN_Handler_Init+0x50>)
 800032c:	f000 fc58 	bl	8000be0 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu1, 0x080, 10, 8);
 8000330:	2308      	movs	r3, #8
 8000332:	220a      	movs	r2, #10
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <CAN_Handler_Init+0x54>)
 8000338:	f000 fc52 	bl	8000be0 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu2, 0x081, 100, 8);
 800033c:	2308      	movs	r3, #8
 800033e:	2264      	movs	r2, #100	; 0x64
 8000340:	2181      	movs	r1, #129	; 0x81
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <CAN_Handler_Init+0x58>)
 8000344:	f000 fc4c 	bl	8000be0 <CAN_InitFrame>

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000054 	.word	0x20000054
 8000350:	20000074 	.word	0x20000074
 8000354:	20000094 	.word	0x20000094
 8000358:	200000b4 	.word	0x200000b4
 800035c:	200000d4 	.word	0x200000d4

08000360 <CAN_Handler_IsGearUpCommanded>:

uint8_t CAN_Handler_IsGearUpCommanded(){
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

	static uint32_t last_tick = 0;

	if(cf_gear_up.tick_ms != last_tick && cf_gear_up.core.data[0] == 255){
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <CAN_Handler_IsGearUpCommanded+0x30>)
 8000366:	699a      	ldr	r2, [r3, #24]
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <CAN_Handler_IsGearUpCommanded+0x34>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	429a      	cmp	r2, r3
 800036e:	d009      	beq.n	8000384 <CAN_Handler_IsGearUpCommanded+0x24>
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <CAN_Handler_IsGearUpCommanded+0x30>)
 8000372:	7b1b      	ldrb	r3, [r3, #12]
 8000374:	2bff      	cmp	r3, #255	; 0xff
 8000376:	d105      	bne.n	8000384 <CAN_Handler_IsGearUpCommanded+0x24>
		last_tick = cf_gear_up.tick_ms;
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <CAN_Handler_IsGearUpCommanded+0x30>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <CAN_Handler_IsGearUpCommanded+0x34>)
 800037e:	6013      	str	r3, [r2, #0]
		return 1;
 8000380:	2301      	movs	r3, #1
 8000382:	e000      	b.n	8000386 <CAN_Handler_IsGearUpCommanded+0x26>
	}
	else{
		return 0;
 8000384:	2300      	movs	r3, #0
	}


}
 8000386:	4618      	mov	r0, r3
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	20000054 	.word	0x20000054
 8000394:	200000f4 	.word	0x200000f4

08000398 <CAN_Handler_IsGearDownCommanded>:

uint8_t CAN_Handler_IsGearDownCommanded(){
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0

	static uint32_t last_tick = 0;

	if(cf_gear_down.tick_ms != last_tick && cf_gear_down.core.data[0] == 255){
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <CAN_Handler_IsGearDownCommanded+0x30>)
 800039e:	699a      	ldr	r2, [r3, #24]
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <CAN_Handler_IsGearDownCommanded+0x34>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d009      	beq.n	80003bc <CAN_Handler_IsGearDownCommanded+0x24>
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <CAN_Handler_IsGearDownCommanded+0x30>)
 80003aa:	7b1b      	ldrb	r3, [r3, #12]
 80003ac:	2bff      	cmp	r3, #255	; 0xff
 80003ae:	d105      	bne.n	80003bc <CAN_Handler_IsGearDownCommanded+0x24>
		last_tick = cf_gear_down.tick_ms;
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <CAN_Handler_IsGearDownCommanded+0x30>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a05      	ldr	r2, [pc, #20]	; (80003cc <CAN_Handler_IsGearDownCommanded+0x34>)
 80003b6:	6013      	str	r3, [r2, #0]
		return 1;
 80003b8:	2301      	movs	r3, #1
 80003ba:	e000      	b.n	80003be <CAN_Handler_IsGearDownCommanded+0x26>
	}
	else{
		return 0;
 80003bc:	2300      	movs	r3, #0
	}


}
 80003be:	4618      	mov	r0, r3
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	20000074 	.word	0x20000074
 80003cc:	200000f8 	.word	0x200000f8

080003d0 <CAN_Handler_IsClutchCommanded>:

uint8_t CAN_Handler_IsClutchCommanded(uint8_t* data){
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]

	static uint32_t last_tick = 0;

	if(cf_clutch.tick_ms != last_tick){
 80003d8:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <CAN_Handler_IsClutchCommanded+0x38>)
 80003da:	699a      	ldr	r2, [r3, #24]
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <CAN_Handler_IsClutchCommanded+0x3c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d009      	beq.n	80003f8 <CAN_Handler_IsClutchCommanded+0x28>
		last_tick = cf_clutch.tick_ms;
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <CAN_Handler_IsClutchCommanded+0x38>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a08      	ldr	r2, [pc, #32]	; (800040c <CAN_Handler_IsClutchCommanded+0x3c>)
 80003ea:	6013      	str	r3, [r2, #0]
		*data = cf_clutch.core.data[0];
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <CAN_Handler_IsClutchCommanded+0x38>)
 80003ee:	7b1a      	ldrb	r2, [r3, #12]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	701a      	strb	r2, [r3, #0]
		return 1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	e000      	b.n	80003fa <CAN_Handler_IsClutchCommanded+0x2a>
	}
	else{
		return 0;
 80003f8:	2300      	movs	r3, #0
	}


}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	20000094 	.word	0x20000094
 800040c:	200000fc 	.word	0x200000fc

08000410 <gearboxInit>:
#include "main.h"

static bool getTimeout(uint32_t dupa, uint32_t anus);

void gearboxInit(Gearbox_t* gearbox)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	gearbox->neutral_adc = 100;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2264      	movs	r2, #100	; 0x64
 800041c:	805a      	strh	r2, [r3, #2]
	gearbox->gear1_adc = 200;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	22c8      	movs	r2, #200	; 0xc8
 8000422:	809a      	strh	r2, [r3, #4]
	gearbox->gear2_adc = 300;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800042a:	80da      	strh	r2, [r3, #6]
	gearbox->gear3_adc = 400;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000432:	811a      	strh	r2, [r3, #8]
	gearbox->gear4_adc = 500;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800043a:	815a      	strh	r2, [r3, #10]

	gearbox->_US_ACTUATOR_DELAY = 20;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2214      	movs	r2, #20
 8000440:	819a      	strh	r2, [r3, #12]
	gearbox->_US_FINISH_TIMEOUT = 200;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	22c8      	movs	r2, #200	; 0xc8
 8000446:	81da      	strh	r2, [r3, #14]

	gearbox->_DS_ACTUATOR_DELAY = 40;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2228      	movs	r2, #40	; 0x28
 800044c:	821a      	strh	r2, [r3, #16]
	gearbox->_DS_FINISH_TIMEOUT = 250;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	22fa      	movs	r2, #250	; 0xfa
 8000452:	825a      	strh	r2, [r3, #18]

	gearbox->_OL_US_GEARCUT_DELAY = 100;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2264      	movs	r2, #100	; 0x64
 8000458:	829a      	strh	r2, [r3, #20]
	gearbox->_OL_DS_CLUTCH_DELAY = 100;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2264      	movs	r2, #100	; 0x64
 800045e:	82da      	strh	r2, [r3, #22]

	gearbox->_state = Idle;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2200      	movs	r2, #0
 8000464:	761a      	strb	r2, [r3, #24]

	gearbox->shift_start_tick = 0;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2200      	movs	r2, #0
 800046a:	61da      	str	r2, [r3, #28]
	gearbox->timestamp_tick = 0;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2200      	movs	r2, #0
 8000470:	621a      	str	r2, [r3, #32]
	gearbox->start_gear_sens = 0;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2200      	movs	r2, #0
 8000476:	849a      	strh	r2, [r3, #36]	; 0x24
	gearbox->start_gear = 0;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2200      	movs	r2, #0
 800047c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <startUpshift>:
		gearbox->_state = Idle;
	}
}

void startUpshift(Gearbox_t* gearbox)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	7e1b      	ldrb	r3, [r3, #24]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d102      	bne.n	80004a2 <startUpshift+0x16>
		gearbox->_state = StartUpshift;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2201      	movs	r2, #1
 80004a0:	761a      	strb	r2, [r3, #24]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <startDownshift>:
void startDownshift(Gearbox_t* gearbox)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	7e1b      	ldrb	r3, [r3, #24]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d102      	bne.n	80004c4 <startDownshift+0x16>
		gearbox->_state = StartDownshift;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2205      	movs	r2, #5
 80004c2:	761a      	strb	r2, [r3, #24]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <clutch>:

void clutch(bool ON)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	461a      	mov	r2, r3
 80004de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <clutch+0x20>)
 80004e4:	f002 fc74 	bl	8002dd0 <HAL_GPIO_WritePin>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	48000400 	.word	0x48000400

080004f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	; 0x28
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004fa:	f107 031c 	add.w	r3, r7, #28
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
 8000514:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000518:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_ADC1_Init+0xdc>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000532:	2200      	movs	r2, #0
 8000534:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000540:	2200      	movs	r2, #0
 8000542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000546:	2201      	movs	r2, #1
 8000548:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <MX_ADC1_Init+0xdc>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000560:	2204      	movs	r2, #4
 8000562:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000566:	2200      	movs	r2, #0
 8000568:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_ADC1_Init+0xdc>)
 800056c:	2200      	movs	r2, #0
 800056e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000570:	4817      	ldr	r0, [pc, #92]	; (80005d0 <MX_ADC1_Init+0xdc>)
 8000572:	f000 fc1d 	bl	8000db0 <HAL_ADC_Init>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800057c:	f000 f9b8 	bl	80008f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000584:	f107 031c 	add.w	r3, r7, #28
 8000588:	4619      	mov	r1, r3
 800058a:	4811      	ldr	r0, [pc, #68]	; (80005d0 <MX_ADC1_Init+0xdc>)
 800058c:	f001 fda8 	bl	80020e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000596:	f000 f9ab 	bl	80008f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800059a:	2303      	movs	r3, #3
 800059c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800059e:	2301      	movs	r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80005a6:	2305      	movs	r3, #5
 80005a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <MX_ADC1_Init+0xdc>)
 80005b8:	f001 faa8 	bl	8001b0c <HAL_ADC_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80005c2:	f000 f995 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000100 	.word	0x20000100

080005d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80005e4:	d113      	bne.n	800060e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_ADC_MspInit+0x44>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <HAL_ADC_MspInit+0x44>)
 80005ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_ADC_MspInit+0x44>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2012      	movs	r0, #18
 8000604:	f002 fa33 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000608:	2012      	movs	r0, #18
 800060a:	f002 fa4c 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_CAN_Init+0x64>)
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_CAN_Init+0x68>)
 8000624:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_CAN_Init+0x64>)
 8000628:	2204      	movs	r2, #4
 800062a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_CAN_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_CAN_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_CAN_Init+0x64>)
 800063a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800063e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_CAN_Init+0x64>)
 8000642:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000646:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_CAN_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_CAN_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_CAN_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_CAN_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_CAN_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_CAN_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_CAN_Init+0x64>)
 800066e:	f001 fef3 	bl	8002458 <HAL_CAN_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000678:	f000 f93a 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000150 	.word	0x20000150
 8000684:	40006400 	.word	0x40006400

08000688 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a18      	ldr	r2, [pc, #96]	; (8000708 <HAL_CAN_MspInit+0x80>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d129      	bne.n	80006fe <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <HAL_CAN_MspInit+0x84>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <HAL_CAN_MspInit+0x84>)
 80006b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <HAL_CAN_MspInit+0x84>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_CAN_MspInit+0x84>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <HAL_CAN_MspInit+0x84>)
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <HAL_CAN_MspInit+0x84>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80006ec:	2309      	movs	r3, #9
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f002 f9ef 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	; 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40006400 	.word	0x40006400
 800070c:	40021000 	.word	0x40021000

08000710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000726:	4b38      	ldr	r3, [pc, #224]	; (8000808 <MX_GPIO_Init+0xf8>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a37      	ldr	r2, [pc, #220]	; (8000808 <MX_GPIO_Init+0xf8>)
 800072c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b35      	ldr	r3, [pc, #212]	; (8000808 <MX_GPIO_Init+0xf8>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_GPIO_Init+0xf8>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a31      	ldr	r2, [pc, #196]	; (8000808 <MX_GPIO_Init+0xf8>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_GPIO_Init+0xf8>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <MX_GPIO_Init+0xf8>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a2b      	ldr	r2, [pc, #172]	; (8000808 <MX_GPIO_Init+0xf8>)
 800075c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000760:	6153      	str	r3, [r2, #20]
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_GPIO_Init+0xf8>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEAR_CUT_Pin|GEAR_UP_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f002 fb2a 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLUTCH_Pin|GEAR_DOWN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8000782:	4822      	ldr	r0, [pc, #136]	; (800080c <MX_GPIO_Init+0xfc>)
 8000784:	f002 fb24 	bl	8002dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_CUT_Pin;
 8000788:	2310      	movs	r3, #16
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_CUT_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	4619      	mov	r1, r3
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f002 f99b 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CLUTCH_Pin|GEAR_DOWN_Pin;
 80007a6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_GPIO_Init+0xfc>)
 80007c0:	f002 f98c 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_UP_Pin;
 80007c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_UP_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	4619      	mov	r1, r3
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f002 f97c 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0xfc>)
 80007fc:	f002 f96e 	bl	8002adc <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f000 fa52 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f80f 	bl	800083a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f7ff ff78 	bl	8000710 <MX_GPIO_Init>
  MX_CAN_Init();
 8000820:	f7ff fefc 	bl	800061c <MX_CAN_Init>
  MX_OPAMP1_Init();
 8000824:	f000 f86a 	bl	80008fc <MX_OPAMP1_Init>
  MX_ADC1_Init();
 8000828:	f7ff fe64 	bl	80004f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800082c:	f000 f922 	bl	8000a74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 8000830:	f7ff fcf2 	bl	8000218 <AppInit>
  AppProcess();
 8000834:	f7ff fd2e 	bl	8000294 <AppProcess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000838:	e7fe      	b.n	8000838 <main+0x28>

0800083a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b09e      	sub	sp, #120	; 0x78
 800083e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000840:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000844:	2228      	movs	r2, #40	; 0x28
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f004 fa4f 	bl	8004cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	223c      	movs	r2, #60	; 0x3c
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f004 fa41 	bl	8004cec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086a:	2301      	movs	r3, #1
 800086c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800086e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000872:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000874:	2301      	movs	r3, #1
 8000876:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087c:	2302      	movs	r3, #2
 800087e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000886:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800088a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fb8b 	bl	8002fac <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800089c:	f000 f828 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a0:	230f      	movs	r3, #15
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a4:	2302      	movs	r3, #2
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008ba:	2102      	movs	r1, #2
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 fbb3 	bl	8004028 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008c8:	f000 f812 	bl	80008f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80008d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fd8d 	bl	80043f8 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008e4:	f000 f804 	bl	80008f0 <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3778      	adds	r7, #120	; 0x78
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_OPAMP1_Init+0x38>)
 8000902:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <MX_OPAMP1_Init+0x3c>)
 8000904:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_OPAMP1_Init+0x38>)
 8000908:	2260      	movs	r2, #96	; 0x60
 800090a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_OPAMP1_Init+0x38>)
 800090e:	220c      	movs	r2, #12
 8000910:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_OPAMP1_Init+0x38>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_OPAMP1_Init+0x38>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_OPAMP1_Init+0x38>)
 8000920:	f002 fa6e 	bl	8002e00 <HAL_OPAMP_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 800092a:	f7ff ffe1 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000178 	.word	0x20000178
 8000938:	40010038 	.word	0x40010038

0800093c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_OPAMP_MspInit+0x5c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d118      	bne.n	8000990 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_OPAMP_MspInit+0x60>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_OPAMP_MspInit+0x60>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	6153      	str	r3, [r2, #20]
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_OPAMP_MspInit+0x60>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GEAR_POS_Pin|GPIO_PIN_2;
 8000976:	2306      	movs	r3, #6
 8000978:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097a:	2303      	movs	r3, #3
 800097c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f002 f8a6 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40010038 	.word	0x40010038
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x44>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_MspInit+0x44>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_MspInit+0x44>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x44>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x44>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x44>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f988 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <ADC1_2_IRQHandler+0x10>)
 8000a42:	f000 fce3 	bl	800140c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000100 	.word	0x20000100

08000a50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aba:	4814      	ldr	r0, [pc, #80]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000abc:	f003 fe4c 	bl	8004758 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ac6:	f7ff ff13 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000ad8:	f003 fe95 	bl	8004806 <HAL_TIM_ConfigClockSource>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ae2:	f7ff ff05 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <MX_TIM2_Init+0x98>)
 8000af4:	f004 f87a 	bl	8004bec <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000afe:	f7ff fef7 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001ac 	.word	0x200001ac

08000b10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b20:	d10b      	bne.n	8000b3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_TIM_Base_MspInit+0x38>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_TIM_Base_MspInit+0x38>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	61d3      	str	r3, [r2, #28]
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_TIM_Base_MspInit+0x38>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b84 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b50:	f7ff ff7e 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f004 f8bf 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7e:	f7ff fe47 	bl	8000810 <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b84:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b90:	08004d94 	.word	0x08004d94
  ldr r2, =_sbss
 8000b94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b98:	200002ac 	.word	0x200002ac

08000b9c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC3_IRQHandler>

08000b9e <CAN_FIFO_Flush>:
uint8_t CAN_FIFO_Empty(struct CAN_FIFO *fifo){

	return fifo->empty;
}

void CAN_FIFO_Flush(struct CAN_FIFO *fifo){
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]

	fifo->first_element=0;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
	fifo->last_element=0;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	705a      	strb	r2, [r3, #1]
	fifo->empty=1;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <CAN_Init>:
	struct can_frame* pFrames[CAN_MAX_FRAME_NUM];
	uint8_t values_num;
}_can_info;


void CAN_Init(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	CAN_HW_Init();
 8000bcc:	f000 f834 	bl	8000c38 <CAN_HW_Init>
	CAN_FIFO_Flush(&FIFO_CAN_TX);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <CAN_Init+0x14>)
 8000bd2:	f7ff ffe4 	bl	8000b9e <CAN_FIFO_Flush>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001f8 	.word	0x200001f8

08000be0 <CAN_InitFrame>:

void CAN_InitFrame(struct can_frame* pFrame, uint16_t id, uint16_t period, uint8_t dlc) {
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	4608      	mov	r0, r1
 8000bea:	4611      	mov	r1, r2
 8000bec:	461a      	mov	r2, r3
 8000bee:	4603      	mov	r3, r0
 8000bf0:	817b      	strh	r3, [r7, #10]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	813b      	strh	r3, [r7, #8]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	71fb      	strb	r3, [r7, #7]
	
	pFrame->core.id = id;
 8000bfa:	897a      	ldrh	r2, [r7, #10]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	605a      	str	r2, [r3, #4]
	pFrame->period = period;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	893a      	ldrh	r2, [r7, #8]
 8000c04:	829a      	strh	r2, [r3, #20]
	pFrame->core.dlc = dlc;
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	609a      	str	r2, [r3, #8]
	_can_info.pFrames[_can_info.frames_num] = pFrame;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <CAN_InitFrame+0x54>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <CAN_InitFrame+0x54>)
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	605a      	str	r2, [r3, #4]
	_can_info.frames_num++;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <CAN_InitFrame+0x54>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <CAN_InitFrame+0x54>)
 8000c24:	701a      	strb	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000228 	.word	0x20000228

08000c38 <CAN_HW_Init>:
#include "CAN_LIB_HW.h"

uint8_t retransmision_counter;

void CAN_HW_Init(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

	static CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c74:	220e      	movs	r2, #14
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&CAN_HANDLE, &sFilterConfig) != HAL_OK)
 8000c78:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <CAN_HW_Init+0x7c>)
 8000c7a:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <CAN_HW_Init+0x80>)
 8000c7c:	f001 fce7 	bl	800264e <HAL_CAN_ConfigFilter>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <CAN_HW_Init+0x52>
	{
		/* Filter configuration Error */
		Error_Handler();
 8000c86:	f7ff fe33 	bl	80008f0 <Error_Handler>
	}

	if (HAL_CAN_Start(&CAN_HANDLE) != HAL_OK)
 8000c8a:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <CAN_HW_Init+0x80>)
 8000c8c:	f001 fda9 	bl	80027e2 <HAL_CAN_Start>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <CAN_HW_Init+0x62>
	{
		/* Start Error */
		Error_Handler();
 8000c96:	f7ff fe2b 	bl	80008f0 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&CAN_HANDLE, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN
 8000c9a:	f248 010f 	movw	r1, #32783	; 0x800f
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <CAN_HW_Init+0x80>)
 8000ca0:	f001 fde3 	bl	800286a <HAL_CAN_ActivateNotification>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <CAN_HW_Init+0x76>
			| CAN_IT_RX_FIFO0_FULL | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 8000caa:	f7ff fe21 	bl	80008f0 <Error_Handler>
	}

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000280 	.word	0x20000280
 8000cb8:	20000150 	.word	0x20000150

08000cbc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x28>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x28>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f001 fec3 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fe62 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fedb 	bl	8002ac2 <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f001 fea3 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200002a8 	.word	0x200002a8

08000d70 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200002a8 	.word	0x200002a8

08000d88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b09a      	sub	sp, #104	; 0x68
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e1c9      	b.n	8001164 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d176      	bne.n	8000ed0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d152      	bne.n	8000e90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fbe5 	bl	80005d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d13b      	bne.n	8000e90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f001 fab7 	bl	800238c <ADC_Disable>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d12f      	bne.n	8000e90 <HAL_ADC_Init+0xe0>
 8000e30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d12b      	bne.n	8000e90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e40:	f023 0302 	bic.w	r3, r3, #2
 8000e44:	f043 0202 	orr.w	r2, r3, #2
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e6c:	4b86      	ldr	r3, [pc, #536]	; (8001088 <HAL_ADC_Init+0x2d8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a86      	ldr	r2, [pc, #536]	; (800108c <HAL_ADC_Init+0x2dc>)
 8000e72:	fba2 2303 	umull	r2, r3, r2, r3
 8000e76:	0c9a      	lsrs	r2, r3, #18
 8000e78:	4613      	mov	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e82:	e002      	b.n	8000e8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f9      	bne.n	8000e84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d007      	beq.n	8000eae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eac:	d110      	bne.n	8000ed0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f023 0312 	bic.w	r3, r3, #18
 8000eb6:	f043 0210 	orr.w	r2, r3, #16
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f043 0201 	orr.w	r2, r3, #1
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f040 8136 	bne.w	800114a <HAL_ADC_Init+0x39a>
 8000ede:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 8131 	bne.w	800114a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f040 8129 	bne.w	800114a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f00:	f043 0202 	orr.w	r2, r3, #2
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f10:	d004      	beq.n	8000f1c <HAL_ADC_Init+0x16c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a5e      	ldr	r2, [pc, #376]	; (8001090 <HAL_ADC_Init+0x2e0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d101      	bne.n	8000f20 <HAL_ADC_Init+0x170>
 8000f1c:	4b5d      	ldr	r3, [pc, #372]	; (8001094 <HAL_ADC_Init+0x2e4>)
 8000f1e:	e000      	b.n	8000f22 <HAL_ADC_Init+0x172>
 8000f20:	4b5d      	ldr	r3, [pc, #372]	; (8001098 <HAL_ADC_Init+0x2e8>)
 8000f22:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f2c:	d102      	bne.n	8000f34 <HAL_ADC_Init+0x184>
 8000f2e:	4b58      	ldr	r3, [pc, #352]	; (8001090 <HAL_ADC_Init+0x2e0>)
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	e01a      	b.n	8000f6a <HAL_ADC_Init+0x1ba>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a55      	ldr	r2, [pc, #340]	; (8001090 <HAL_ADC_Init+0x2e0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d103      	bne.n	8000f46 <HAL_ADC_Init+0x196>
 8000f3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	e011      	b.n	8000f6a <HAL_ADC_Init+0x1ba>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a54      	ldr	r2, [pc, #336]	; (800109c <HAL_ADC_Init+0x2ec>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d102      	bne.n	8000f56 <HAL_ADC_Init+0x1a6>
 8000f50:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_ADC_Init+0x2f0>)
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e009      	b.n	8000f6a <HAL_ADC_Init+0x1ba>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <HAL_ADC_Init+0x2f0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d102      	bne.n	8000f66 <HAL_ADC_Init+0x1b6>
 8000f60:	4b4e      	ldr	r3, [pc, #312]	; (800109c <HAL_ADC_Init+0x2ec>)
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e001      	b.n	8000f6a <HAL_ADC_Init+0x1ba>
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <HAL_ADC_Init+0x1da>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_ADC_Init+0x1da>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_ADC_Init+0x1dc>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d11c      	bne.n	8000fca <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f90:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d010      	beq.n	8000fb8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d107      	bne.n	8000fb2 <HAL_ADC_Init+0x202>
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d101      	bne.n	8000fb2 <HAL_ADC_Init+0x202>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_ADC_Init+0x204>
 8000fb2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d108      	bne.n	8000fca <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fc8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7e5b      	ldrb	r3, [r3, #25]
 8000fce:	035b      	lsls	r3, r3, #13
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fd4:	2a01      	cmp	r2, #1
 8000fd6:	d002      	beq.n	8000fde <HAL_ADC_Init+0x22e>
 8000fd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fdc:	e000      	b.n	8000fe0 <HAL_ADC_Init+0x230>
 8000fde:	2200      	movs	r2, #0
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d11b      	bne.n	8001036 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7e5b      	ldrb	r3, [r3, #25]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d109      	bne.n	800101a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	3b01      	subs	r3, #1
 800100c:	045a      	lsls	r2, r3, #17
 800100e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001010:	4313      	orrs	r3, r2
 8001012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001016:	663b      	str	r3, [r7, #96]	; 0x60
 8001018:	e00d      	b.n	8001036 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001022:	f043 0220 	orr.w	r2, r3, #32
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f043 0201 	orr.w	r2, r3, #1
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	2b01      	cmp	r3, #1
 800103c:	d03a      	beq.n	80010b4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <HAL_ADC_Init+0x2ec>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d004      	beq.n	8001052 <HAL_ADC_Init+0x2a2>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_ADC_Init+0x2f0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d128      	bne.n	80010a4 <HAL_ADC_Init+0x2f4>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001056:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800105a:	d012      	beq.n	8001082 <HAL_ADC_Init+0x2d2>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001064:	d00a      	beq.n	800107c <HAL_ADC_Init+0x2cc>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800106e:	d002      	beq.n	8001076 <HAL_ADC_Init+0x2c6>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	e018      	b.n	80010a8 <HAL_ADC_Init+0x2f8>
 8001076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107a:	e015      	b.n	80010a8 <HAL_ADC_Init+0x2f8>
 800107c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001080:	e012      	b.n	80010a8 <HAL_ADC_Init+0x2f8>
 8001082:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001086:	e00f      	b.n	80010a8 <HAL_ADC_Init+0x2f8>
 8001088:	20000000 	.word	0x20000000
 800108c:	431bde83 	.word	0x431bde83
 8001090:	50000100 	.word	0x50000100
 8001094:	50000300 	.word	0x50000300
 8001098:	50000700 	.word	0x50000700
 800109c:	50000400 	.word	0x50000400
 80010a0:	50000500 	.word	0x50000500
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80010ac:	4313      	orrs	r3, r2
 80010ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010b0:	4313      	orrs	r3, r2
 80010b2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d114      	bne.n	80010ec <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010d0:	f023 0302 	bic.w	r3, r3, #2
 80010d4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7e1b      	ldrb	r3, [r3, #24]
 80010da:	039a      	lsls	r2, r3, #14
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4313      	orrs	r3, r2
 80010e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010e8:	4313      	orrs	r3, r2
 80010ea:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_ADC_Init+0x3bc>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010fc:	430b      	orrs	r3, r1
 80010fe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d10c      	bne.n	8001122 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f023 010f 	bic.w	r1, r3, #15
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	1e5a      	subs	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
 8001120:	e007      	b.n	8001132 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 020f 	bic.w	r2, r2, #15
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f023 0303 	bic.w	r3, r3, #3
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
 8001148:	e00a      	b.n	8001160 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f023 0312 	bic.w	r3, r3, #18
 8001152:	f043 0210 	orr.w	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800115a:	2301      	movs	r3, #1
 800115c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001160:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001164:	4618      	mov	r0, r3
 8001166:	3768      	adds	r7, #104	; 0x68
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	fff0c007 	.word	0xfff0c007

08001170 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 8123 	bne.w	80013d2 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_ADC_Start_IT+0x2a>
 8001196:	2302      	movs	r3, #2
 8001198:	e11e      	b.n	80013d8 <HAL_ADC_Start_IT+0x268>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f001 f88e 	bl	80022c4 <ADC_Enable>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f040 810a 	bne.w	80013c8 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011bc:	f023 0301 	bic.w	r3, r3, #1
 80011c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011d0:	d004      	beq.n	80011dc <HAL_ADC_Start_IT+0x6c>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a82      	ldr	r2, [pc, #520]	; (80013e0 <HAL_ADC_Start_IT+0x270>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d106      	bne.n	80011ea <HAL_ADC_Start_IT+0x7a>
 80011dc:	4b81      	ldr	r3, [pc, #516]	; (80013e4 <HAL_ADC_Start_IT+0x274>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d010      	beq.n	800120a <HAL_ADC_Start_IT+0x9a>
 80011e8:	e005      	b.n	80011f6 <HAL_ADC_Start_IT+0x86>
 80011ea:	4b7f      	ldr	r3, [pc, #508]	; (80013e8 <HAL_ADC_Start_IT+0x278>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 031f 	and.w	r3, r3, #31
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d009      	beq.n	800120a <HAL_ADC_Start_IT+0x9a>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011fe:	d004      	beq.n	800120a <HAL_ADC_Start_IT+0x9a>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a79      	ldr	r2, [pc, #484]	; (80013ec <HAL_ADC_Start_IT+0x27c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d115      	bne.n	8001236 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d036      	beq.n	8001292 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800122c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001234:	e02d      	b.n	8001292 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800124a:	d004      	beq.n	8001256 <HAL_ADC_Start_IT+0xe6>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a63      	ldr	r2, [pc, #396]	; (80013e0 <HAL_ADC_Start_IT+0x270>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10a      	bne.n	800126c <HAL_ADC_Start_IT+0xfc>
 8001256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf14      	ite	ne
 8001264:	2301      	movne	r3, #1
 8001266:	2300      	moveq	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	e008      	b.n	800127e <HAL_ADC_Start_IT+0x10e>
 800126c:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_ADC_Start_IT+0x27c>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800128a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800129a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800129e:	d106      	bne.n	80012ae <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f023 0206 	bic.w	r2, r3, #6
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	645a      	str	r2, [r3, #68]	; 0x44
 80012ac:	e002      	b.n	80012b4 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	221c      	movs	r2, #28
 80012c2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d110      	bne.n	80012ee <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0204 	bic.w	r2, r2, #4
 80012da:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0208 	orr.w	r2, r2, #8
 80012ea:	605a      	str	r2, [r3, #4]
          break;
 80012ec:	e008      	b.n	8001300 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 020c 	orr.w	r2, r2, #12
 80012fc:	605a      	str	r2, [r3, #4]
          break;
 80012fe:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001304:	2b01      	cmp	r3, #1
 8001306:	d107      	bne.n	8001318 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0210 	bic.w	r2, r2, #16
 8001316:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001320:	d004      	beq.n	800132c <HAL_ADC_Start_IT+0x1bc>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a2e      	ldr	r2, [pc, #184]	; (80013e0 <HAL_ADC_Start_IT+0x270>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d106      	bne.n	800133a <HAL_ADC_Start_IT+0x1ca>
 800132c:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_ADC_Start_IT+0x274>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 031f 	and.w	r3, r3, #31
 8001334:	2b00      	cmp	r3, #0
 8001336:	d03e      	beq.n	80013b6 <HAL_ADC_Start_IT+0x246>
 8001338:	e005      	b.n	8001346 <HAL_ADC_Start_IT+0x1d6>
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_ADC_Start_IT+0x278>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d037      	beq.n	80013b6 <HAL_ADC_Start_IT+0x246>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134e:	d004      	beq.n	800135a <HAL_ADC_Start_IT+0x1ea>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_ADC_Start_IT+0x270>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d106      	bne.n	8001368 <HAL_ADC_Start_IT+0x1f8>
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_ADC_Start_IT+0x274>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	2b05      	cmp	r3, #5
 8001364:	d027      	beq.n	80013b6 <HAL_ADC_Start_IT+0x246>
 8001366:	e005      	b.n	8001374 <HAL_ADC_Start_IT+0x204>
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_ADC_Start_IT+0x278>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 031f 	and.w	r3, r3, #31
 8001370:	2b05      	cmp	r3, #5
 8001372:	d020      	beq.n	80013b6 <HAL_ADC_Start_IT+0x246>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800137c:	d004      	beq.n	8001388 <HAL_ADC_Start_IT+0x218>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_ADC_Start_IT+0x270>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d106      	bne.n	8001396 <HAL_ADC_Start_IT+0x226>
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_ADC_Start_IT+0x274>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	2b09      	cmp	r3, #9
 8001392:	d010      	beq.n	80013b6 <HAL_ADC_Start_IT+0x246>
 8001394:	e005      	b.n	80013a2 <HAL_ADC_Start_IT+0x232>
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_ADC_Start_IT+0x278>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	2b09      	cmp	r3, #9
 80013a0:	d009      	beq.n	80013b6 <HAL_ADC_Start_IT+0x246>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013aa:	d004      	beq.n	80013b6 <HAL_ADC_Start_IT+0x246>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_ADC_Start_IT+0x27c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10f      	bne.n	80013d6 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0204 	orr.w	r2, r2, #4
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	e006      	b.n	80013d6 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80013d0:	e001      	b.n	80013d6 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	50000100 	.word	0x50000100
 80013e4:	50000300 	.word	0x50000300
 80013e8:	50000700 	.word	0x50000700
 80013ec:	50000400 	.word	0x50000400

080013f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <HAL_ADC_IRQHandler+0x38>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80bc 	beq.w	80015c8 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 80b6 	beq.w	80015c8 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	d105      	bne.n	8001474 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800147c:	d004      	beq.n	8001488 <HAL_ADC_IRQHandler+0x7c>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a90      	ldr	r2, [pc, #576]	; (80016c4 <HAL_ADC_IRQHandler+0x2b8>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d106      	bne.n	8001496 <HAL_ADC_IRQHandler+0x8a>
 8001488:	4b8f      	ldr	r3, [pc, #572]	; (80016c8 <HAL_ADC_IRQHandler+0x2bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03e      	beq.n	8001512 <HAL_ADC_IRQHandler+0x106>
 8001494:	e005      	b.n	80014a2 <HAL_ADC_IRQHandler+0x96>
 8001496:	4b8d      	ldr	r3, [pc, #564]	; (80016cc <HAL_ADC_IRQHandler+0x2c0>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 031f 	and.w	r3, r3, #31
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d037      	beq.n	8001512 <HAL_ADC_IRQHandler+0x106>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014aa:	d004      	beq.n	80014b6 <HAL_ADC_IRQHandler+0xaa>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a84      	ldr	r2, [pc, #528]	; (80016c4 <HAL_ADC_IRQHandler+0x2b8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d106      	bne.n	80014c4 <HAL_ADC_IRQHandler+0xb8>
 80014b6:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <HAL_ADC_IRQHandler+0x2bc>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d027      	beq.n	8001512 <HAL_ADC_IRQHandler+0x106>
 80014c2:	e005      	b.n	80014d0 <HAL_ADC_IRQHandler+0xc4>
 80014c4:	4b81      	ldr	r3, [pc, #516]	; (80016cc <HAL_ADC_IRQHandler+0x2c0>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d020      	beq.n	8001512 <HAL_ADC_IRQHandler+0x106>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d8:	d004      	beq.n	80014e4 <HAL_ADC_IRQHandler+0xd8>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a79      	ldr	r2, [pc, #484]	; (80016c4 <HAL_ADC_IRQHandler+0x2b8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d106      	bne.n	80014f2 <HAL_ADC_IRQHandler+0xe6>
 80014e4:	4b78      	ldr	r3, [pc, #480]	; (80016c8 <HAL_ADC_IRQHandler+0x2bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	d010      	beq.n	8001512 <HAL_ADC_IRQHandler+0x106>
 80014f0:	e005      	b.n	80014fe <HAL_ADC_IRQHandler+0xf2>
 80014f2:	4b76      	ldr	r3, [pc, #472]	; (80016cc <HAL_ADC_IRQHandler+0x2c0>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	2b09      	cmp	r3, #9
 80014fc:	d009      	beq.n	8001512 <HAL_ADC_IRQHandler+0x106>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001506:	d004      	beq.n	8001512 <HAL_ADC_IRQHandler+0x106>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a70      	ldr	r2, [pc, #448]	; (80016d0 <HAL_ADC_IRQHandler+0x2c4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d104      	bne.n	800151c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	e00f      	b.n	800153c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001524:	d004      	beq.n	8001530 <HAL_ADC_IRQHandler+0x124>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a66      	ldr	r2, [pc, #408]	; (80016c4 <HAL_ADC_IRQHandler+0x2b8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d102      	bne.n	8001536 <HAL_ADC_IRQHandler+0x12a>
 8001530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001534:	e000      	b.n	8001538 <HAL_ADC_IRQHandler+0x12c>
 8001536:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <HAL_ADC_IRQHandler+0x2c4>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001546:	2b00      	cmp	r3, #0
 8001548:	d137      	bne.n	80015ba <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001550:	2b00      	cmp	r3, #0
 8001552:	d132      	bne.n	80015ba <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d02d      	beq.n	80015ba <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d11a      	bne.n	80015a2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 020c 	bic.w	r2, r2, #12
 800157a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d112      	bne.n	80015ba <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	641a      	str	r2, [r3, #64]	; 0x40
 80015a0:	e00b      	b.n	80015ba <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f043 0210 	orr.w	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7fe fe16 	bl	80001ec <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	220c      	movs	r2, #12
 80015c6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f003 0320 	and.w	r3, r3, #32
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <HAL_ADC_IRQHandler+0x1d0>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10b      	bne.n	80015f4 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8138 	beq.w	8001858 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8132 	beq.w	8001858 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001608:	d004      	beq.n	8001614 <HAL_ADC_IRQHandler+0x208>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2d      	ldr	r2, [pc, #180]	; (80016c4 <HAL_ADC_IRQHandler+0x2b8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d106      	bne.n	8001622 <HAL_ADC_IRQHandler+0x216>
 8001614:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <HAL_ADC_IRQHandler+0x2bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03e      	beq.n	800169e <HAL_ADC_IRQHandler+0x292>
 8001620:	e005      	b.n	800162e <HAL_ADC_IRQHandler+0x222>
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_ADC_IRQHandler+0x2c0>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	2b00      	cmp	r3, #0
 800162c:	d037      	beq.n	800169e <HAL_ADC_IRQHandler+0x292>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001636:	d004      	beq.n	8001642 <HAL_ADC_IRQHandler+0x236>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a21      	ldr	r2, [pc, #132]	; (80016c4 <HAL_ADC_IRQHandler+0x2b8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d106      	bne.n	8001650 <HAL_ADC_IRQHandler+0x244>
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_ADC_IRQHandler+0x2bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2b05      	cmp	r3, #5
 800164c:	d027      	beq.n	800169e <HAL_ADC_IRQHandler+0x292>
 800164e:	e005      	b.n	800165c <HAL_ADC_IRQHandler+0x250>
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_ADC_IRQHandler+0x2c0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2b05      	cmp	r3, #5
 800165a:	d020      	beq.n	800169e <HAL_ADC_IRQHandler+0x292>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001664:	d004      	beq.n	8001670 <HAL_ADC_IRQHandler+0x264>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <HAL_ADC_IRQHandler+0x2b8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d106      	bne.n	800167e <HAL_ADC_IRQHandler+0x272>
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_ADC_IRQHandler+0x2bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 031f 	and.w	r3, r3, #31
 8001678:	2b09      	cmp	r3, #9
 800167a:	d010      	beq.n	800169e <HAL_ADC_IRQHandler+0x292>
 800167c:	e005      	b.n	800168a <HAL_ADC_IRQHandler+0x27e>
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_ADC_IRQHandler+0x2c0>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	2b09      	cmp	r3, #9
 8001688:	d009      	beq.n	800169e <HAL_ADC_IRQHandler+0x292>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001692:	d004      	beq.n	800169e <HAL_ADC_IRQHandler+0x292>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_ADC_IRQHandler+0x2c4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d104      	bne.n	80016a8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	e018      	b.n	80016da <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b0:	d004      	beq.n	80016bc <HAL_ADC_IRQHandler+0x2b0>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <HAL_ADC_IRQHandler+0x2b8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d10b      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x2c8>
 80016bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016c0:	e009      	b.n	80016d6 <HAL_ADC_IRQHandler+0x2ca>
 80016c2:	bf00      	nop
 80016c4:	50000100 	.word	0x50000100
 80016c8:	50000300 	.word	0x50000300
 80016cc:	50000700 	.word	0x50000700
 80016d0:	50000400 	.word	0x50000400
 80016d4:	4b92      	ldr	r3, [pc, #584]	; (8001920 <HAL_ADC_IRQHandler+0x514>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f040 80b0 	bne.w	800184a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00d      	beq.n	8001710 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 80a3 	bne.w	800184a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800170a:	2b00      	cmp	r3, #0
 800170c:	f040 809d 	bne.w	800184a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8097 	beq.w	800184a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001724:	d004      	beq.n	8001730 <HAL_ADC_IRQHandler+0x324>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a7e      	ldr	r2, [pc, #504]	; (8001924 <HAL_ADC_IRQHandler+0x518>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d106      	bne.n	800173e <HAL_ADC_IRQHandler+0x332>
 8001730:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <HAL_ADC_IRQHandler+0x51c>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	2b00      	cmp	r3, #0
 800173a:	d03e      	beq.n	80017ba <HAL_ADC_IRQHandler+0x3ae>
 800173c:	e005      	b.n	800174a <HAL_ADC_IRQHandler+0x33e>
 800173e:	4b7b      	ldr	r3, [pc, #492]	; (800192c <HAL_ADC_IRQHandler+0x520>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	2b00      	cmp	r3, #0
 8001748:	d037      	beq.n	80017ba <HAL_ADC_IRQHandler+0x3ae>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001752:	d004      	beq.n	800175e <HAL_ADC_IRQHandler+0x352>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a72      	ldr	r2, [pc, #456]	; (8001924 <HAL_ADC_IRQHandler+0x518>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d106      	bne.n	800176c <HAL_ADC_IRQHandler+0x360>
 800175e:	4b72      	ldr	r3, [pc, #456]	; (8001928 <HAL_ADC_IRQHandler+0x51c>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	2b06      	cmp	r3, #6
 8001768:	d027      	beq.n	80017ba <HAL_ADC_IRQHandler+0x3ae>
 800176a:	e005      	b.n	8001778 <HAL_ADC_IRQHandler+0x36c>
 800176c:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_ADC_IRQHandler+0x520>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	2b06      	cmp	r3, #6
 8001776:	d020      	beq.n	80017ba <HAL_ADC_IRQHandler+0x3ae>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001780:	d004      	beq.n	800178c <HAL_ADC_IRQHandler+0x380>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a67      	ldr	r2, [pc, #412]	; (8001924 <HAL_ADC_IRQHandler+0x518>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d106      	bne.n	800179a <HAL_ADC_IRQHandler+0x38e>
 800178c:	4b66      	ldr	r3, [pc, #408]	; (8001928 <HAL_ADC_IRQHandler+0x51c>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2b07      	cmp	r3, #7
 8001796:	d010      	beq.n	80017ba <HAL_ADC_IRQHandler+0x3ae>
 8001798:	e005      	b.n	80017a6 <HAL_ADC_IRQHandler+0x39a>
 800179a:	4b64      	ldr	r3, [pc, #400]	; (800192c <HAL_ADC_IRQHandler+0x520>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	d009      	beq.n	80017ba <HAL_ADC_IRQHandler+0x3ae>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ae:	d004      	beq.n	80017ba <HAL_ADC_IRQHandler+0x3ae>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a5a      	ldr	r2, [pc, #360]	; (8001920 <HAL_ADC_IRQHandler+0x514>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d104      	bne.n	80017c4 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	e00f      	b.n	80017e4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017cc:	d004      	beq.n	80017d8 <HAL_ADC_IRQHandler+0x3cc>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_ADC_IRQHandler+0x518>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d102      	bne.n	80017de <HAL_ADC_IRQHandler+0x3d2>
 80017d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017dc:	e000      	b.n	80017e0 <HAL_ADC_IRQHandler+0x3d4>
 80017de:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_ADC_IRQHandler+0x514>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d12d      	bne.n	800184a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d11a      	bne.n	8001832 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800180a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d112      	bne.n	800184a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
 8001830:	e00b      	b.n	800184a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f043 0210 	orr.w	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f936 	bl	8001abc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2260      	movs	r2, #96	; 0x60
 8001856:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	2b00      	cmp	r3, #0
 8001860:	d011      	beq.n	8001886 <HAL_ADC_IRQHandler+0x47a>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00c      	beq.n	8001886 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fa85 	bl	8000d88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d012      	beq.n	80018b6 <HAL_ADC_IRQHandler+0x4aa>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00d      	beq.n	80018b6 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f91c 	bl	8001ae4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d012      	beq.n	80018e6 <HAL_ADC_IRQHandler+0x4da>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00d      	beq.n	80018e6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f90e 	bl	8001af8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d04f      	beq.n	8001990 <HAL_ADC_IRQHandler+0x584>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d04a      	beq.n	8001990 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001902:	2301      	movs	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e02d      	b.n	8001964 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001910:	d004      	beq.n	800191c <HAL_ADC_IRQHandler+0x510>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_ADC_IRQHandler+0x518>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d109      	bne.n	8001930 <HAL_ADC_IRQHandler+0x524>
 800191c:	4b02      	ldr	r3, [pc, #8]	; (8001928 <HAL_ADC_IRQHandler+0x51c>)
 800191e:	e008      	b.n	8001932 <HAL_ADC_IRQHandler+0x526>
 8001920:	50000400 	.word	0x50000400
 8001924:	50000100 	.word	0x50000100
 8001928:	50000300 	.word	0x50000300
 800192c:	50000700 	.word	0x50000700
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <HAL_ADC_IRQHandler+0x5c8>)
 8001932:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b01      	cmp	r3, #1
 800194c:	d10a      	bne.n	8001964 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800194e:	2301      	movs	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e007      	b.n	8001964 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001960:	2301      	movs	r3, #1
 8001962:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d10e      	bne.n	8001988 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fa0a 	bl	8000d9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2210      	movs	r2, #16
 800198e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001996:	2b00      	cmp	r3, #0
 8001998:	d018      	beq.n	80019cc <HAL_ADC_IRQHandler+0x5c0>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f043 0208 	orr.w	r2, r3, #8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f882 	bl	8001ad0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80019cc:	bf00      	nop
 80019ce:	3720      	adds	r7, #32
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	50000700 	.word	0x50000700

080019d8 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADCEx_Calibration_Start+0x1c>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e05f      	b.n	8001ab4 <HAL_ADCEx_Calibration_Start+0xdc>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fcc5 	bl	800238c <ADC_Disable>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d14e      	bne.n	8001aaa <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001a20:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d107      	bne.n	8001a38 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a36:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a46:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001a48:	f7ff f992 	bl	8000d70 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a4e:	e01c      	b.n	8001a8a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a50:	f7ff f98e 	bl	8000d70 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d915      	bls.n	8001a8a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a6c:	d10d      	bne.n	8001a8a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f023 0312 	bic.w	r3, r3, #18
 8001a76:	f043 0210 	orr.w	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e014      	b.n	8001ab4 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a98:	d0da      	beq.n	8001a50 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f023 0303 	bic.w	r3, r3, #3
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b09b      	sub	sp, #108	; 0x6c
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x22>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e2c8      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x5b4>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f040 82ac 	bne.w	800209e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d81c      	bhi.n	8001b88 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	461a      	mov	r2, r3
 8001b62:	231f      	movs	r3, #31
 8001b64:	4093      	lsls	r3, r2
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4019      	ands	r1, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
 8001b86:	e063      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	d81e      	bhi.n	8001bce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	3b1e      	subs	r3, #30
 8001ba4:	221f      	movs	r2, #31
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	4019      	ands	r1, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	3b1e      	subs	r3, #30
 8001bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34
 8001bcc:	e040      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b0e      	cmp	r3, #14
 8001bd4:	d81e      	bhi.n	8001c14 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	3b3c      	subs	r3, #60	; 0x3c
 8001bea:	221f      	movs	r2, #31
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4019      	ands	r1, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	3b3c      	subs	r3, #60	; 0x3c
 8001c06:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38
 8001c12:	e01d      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	3b5a      	subs	r3, #90	; 0x5a
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	4019      	ands	r1, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	3b5a      	subs	r3, #90	; 0x5a
 8001c44:	fa00 f203 	lsl.w	r2, r0, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80e5 	bne.w	8001e2a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	d91c      	bls.n	8001ca2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6999      	ldr	r1, [r3, #24]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	3b1e      	subs	r3, #30
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4019      	ands	r1, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6898      	ldr	r0, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	3b1e      	subs	r3, #30
 8001c94:	fa00 f203 	lsl.w	r2, r0, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	619a      	str	r2, [r3, #24]
 8001ca0:	e019      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6959      	ldr	r1, [r3, #20]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4019      	ands	r1, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6898      	ldr	r0, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d84f      	bhi.n	8001d98 <HAL_ADC_ConfigChannel+0x28c>
 8001cf8:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <HAL_ADC_ConfigChannel+0x1f4>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d33 	.word	0x08001d33
 8001d08:	08001d55 	.word	0x08001d55
 8001d0c:	08001d77 	.word	0x08001d77
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d16:	4b99      	ldr	r3, [pc, #612]	; (8001f7c <HAL_ADC_ConfigChannel+0x470>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	0691      	lsls	r1, r2, #26
 8001d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d22:	430a      	orrs	r2, r1
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d2e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d30:	e07b      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d38:	4b90      	ldr	r3, [pc, #576]	; (8001f7c <HAL_ADC_ConfigChannel+0x470>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	0691      	lsls	r1, r2, #26
 8001d42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d44:	430a      	orrs	r2, r1
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d50:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d52:	e06a      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d5a:	4b88      	ldr	r3, [pc, #544]	; (8001f7c <HAL_ADC_ConfigChannel+0x470>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	0691      	lsls	r1, r2, #26
 8001d64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d66:	430a      	orrs	r2, r1
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d72:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d74:	e059      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d7c:	4b7f      	ldr	r3, [pc, #508]	; (8001f7c <HAL_ADC_ConfigChannel+0x470>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	0691      	lsls	r1, r2, #26
 8001d86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d94:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d96:	e048      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	069b      	lsls	r3, r3, #26
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d107      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	069b      	lsls	r3, r3, #26
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d107      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dde:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001de6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	069b      	lsls	r3, r3, #26
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d107      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e02:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	069b      	lsls	r3, r3, #26
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d107      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e26:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e28:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x33e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x33e>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x340>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 8131 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d00f      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2201      	movs	r2, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	400a      	ands	r2, r1
 8001e74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e78:	e049      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b09      	cmp	r3, #9
 8001e9a:	d91c      	bls.n	8001ed6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6999      	ldr	r1, [r3, #24]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b1b      	subs	r3, #27
 8001eae:	2207      	movs	r2, #7
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4019      	ands	r1, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6898      	ldr	r0, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b1b      	subs	r3, #27
 8001ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	619a      	str	r2, [r3, #24]
 8001ed4:	e01b      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6959      	ldr	r1, [r3, #20]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	2207      	movs	r2, #7
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	4019      	ands	r1, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6898      	ldr	r0, [r3, #8]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f16:	d004      	beq.n	8001f22 <HAL_ADC_ConfigChannel+0x416>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a18      	ldr	r2, [pc, #96]	; (8001f80 <HAL_ADC_ConfigChannel+0x474>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x41a>
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_ADC_ConfigChannel+0x478>)
 8001f24:	e000      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x41c>
 8001f26:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <HAL_ADC_ConfigChannel+0x47c>)
 8001f28:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d105      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d015      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f42:	2b11      	cmp	r3, #17
 8001f44:	d105      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f56:	2b12      	cmp	r3, #18
 8001f58:	f040 80ac 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f040 80a5 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f72:	d10b      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x480>
 8001f74:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <HAL_ADC_ConfigChannel+0x474>)
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	e023      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x4b6>
 8001f7a:	bf00      	nop
 8001f7c:	83fff000 	.word	0x83fff000
 8001f80:	50000100 	.word	0x50000100
 8001f84:	50000300 	.word	0x50000300
 8001f88:	50000700 	.word	0x50000700
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <HAL_ADC_ConfigChannel+0x5c0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d103      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x492>
 8001f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e011      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x4b6>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a4b      	ldr	r2, [pc, #300]	; (80020d0 <HAL_ADC_ConfigChannel+0x5c4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d102      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x4a2>
 8001fa8:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	e009      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x4b6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a48      	ldr	r2, [pc, #288]	; (80020d4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d102      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x4b2>
 8001fb8:	4b45      	ldr	r3, [pc, #276]	; (80020d0 <HAL_ADC_ConfigChannel+0x5c4>)
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e001      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x4b6>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d108      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x4d6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x4d6>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x4d8>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d150      	bne.n	800208a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <HAL_ADC_ConfigChannel+0x4fe>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x4fe>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_ADC_ConfigChannel+0x500>
 800200a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800200c:	2b00      	cmp	r3, #0
 800200e:	d13c      	bne.n	800208a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b10      	cmp	r3, #16
 8002016:	d11d      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x548>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002020:	d118      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800202a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800202c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800202e:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2a      	ldr	r2, [pc, #168]	; (80020dc <HAL_ADC_ConfigChannel+0x5d0>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	0c9a      	lsrs	r2, r3, #18
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002044:	e002      	b.n	800204c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3b01      	subs	r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f9      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002052:	e02e      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b11      	cmp	r3, #17
 800205a:	d10b      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x568>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002064:	d106      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800206e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002070:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002072:	e01e      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b12      	cmp	r3, #18
 800207a:	d11a      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800207c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002086:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002088:	e013      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f043 0220 	orr.w	r2, r3, #32
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800209c:	e00a      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f043 0220 	orr.w	r2, r3, #32
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020b0:	e000      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80020b2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	376c      	adds	r7, #108	; 0x6c
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	50000100 	.word	0x50000100
 80020d0:	50000400 	.word	0x50000400
 80020d4:	50000500 	.word	0x50000500
 80020d8:	20000000 	.word	0x20000000
 80020dc:	431bde83 	.word	0x431bde83

080020e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b099      	sub	sp, #100	; 0x64
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f8:	d102      	bne.n	8002100 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80020fa:	4b6d      	ldr	r3, [pc, #436]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	e01a      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6a      	ldr	r2, [pc, #424]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d103      	bne.n	8002112 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800210a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	e011      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a67      	ldr	r2, [pc, #412]	; (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d102      	bne.n	8002122 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800211c:	4b66      	ldr	r3, [pc, #408]	; (80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	e009      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a64      	ldr	r2, [pc, #400]	; (80022b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d102      	bne.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800212c:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	e001      	b.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0b0      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800214a:	2302      	movs	r3, #2
 800214c:	e0a9      	b.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 808d 	bne.w	8002280 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	f040 8086 	bne.w	8002280 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217c:	d004      	beq.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a4b      	ldr	r2, [pc, #300]	; (80022b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800218a:	e000      	b.n	800218e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800218e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d040      	beq.n	800221a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021aa:	035b      	lsls	r3, r3, #13
 80021ac:	430b      	orrs	r3, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d108      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80021d4:	2300      	movs	r3, #0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d15c      	bne.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80021f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d14b      	bne.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80021fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002204:	f023 030f 	bic.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	6811      	ldr	r1, [r2, #0]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	6892      	ldr	r2, [r2, #8]
 8002210:	430a      	orrs	r2, r1
 8002212:	431a      	orrs	r2, r3
 8002214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002216:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002218:	e03c      	b.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800221a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002224:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d108      	bne.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002246:	2300      	movs	r3, #0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d123      	bne.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d107      	bne.n	8002268 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002268:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d112      	bne.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800226e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002276:	f023 030f 	bic.w	r3, r3, #15
 800227a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800227c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800227e:	e009      	b.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f043 0220 	orr.w	r2, r3, #32
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002292:	e000      	b.n	8002296 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002294:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800229e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80022a2:	4618      	mov	r0, r3
 80022a4:	3764      	adds	r7, #100	; 0x64
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	50000100 	.word	0x50000100
 80022b4:	50000400 	.word	0x50000400
 80022b8:	50000500 	.word	0x50000500
 80022bc:	50000300 	.word	0x50000300
 80022c0:	50000700 	.word	0x50000700

080022c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <ADC_Enable+0x2c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <ADC_Enable+0x2c>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <ADC_Enable+0x2e>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d143      	bne.n	800237e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <ADC_Enable+0xc4>)
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e02f      	b.n	8002380 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002330:	f7fe fd1e 	bl	8000d70 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002336:	e01b      	b.n	8002370 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002338:	f7fe fd1a 	bl	8000d70 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d914      	bls.n	8002370 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d00d      	beq.n	8002370 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0210 	orr.w	r2, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e007      	b.n	8002380 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d1dc      	bne.n	8002338 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	8000003f 	.word	0x8000003f

0800238c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <ADC_Disable+0x2c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <ADC_Disable+0x2c>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <ADC_Disable+0x2e>
 80023b8:	2300      	movs	r3, #0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d047      	beq.n	800244e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030d 	and.w	r3, r3, #13
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10f      	bne.n	80023ec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0202 	orr.w	r2, r2, #2
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2203      	movs	r2, #3
 80023e2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80023e4:	f7fe fcc4 	bl	8000d70 <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023ea:	e029      	b.n	8002440 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0210 	orr.w	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e023      	b.n	8002450 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002408:	f7fe fcb2 	bl	8000d70 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d914      	bls.n	8002440 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10d      	bne.n	8002440 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e007      	b.n	8002450 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d0dc      	beq.n	8002408 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0ed      	b.n	8002646 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fe f906 	bl	8000688 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800248c:	f7fe fc70 	bl	8000d70 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002492:	e012      	b.n	80024ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002494:	f7fe fc6c 	bl	8000d70 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b0a      	cmp	r3, #10
 80024a0:	d90b      	bls.n	80024ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2205      	movs	r2, #5
 80024b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0c5      	b.n	8002646 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0e5      	beq.n	8002494 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0202 	bic.w	r2, r2, #2
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d8:	f7fe fc4a 	bl	8000d70 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024de:	e012      	b.n	8002506 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024e0:	f7fe fc46 	bl	8000d70 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b0a      	cmp	r3, #10
 80024ec:	d90b      	bls.n	8002506 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2205      	movs	r2, #5
 80024fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e09f      	b.n	8002646 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e5      	bne.n	80024e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7e1b      	ldrb	r3, [r3, #24]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d108      	bne.n	800252e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e007      	b.n	800253e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7e5b      	ldrb	r3, [r3, #25]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	e007      	b.n	8002568 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002566:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7e9b      	ldrb	r3, [r3, #26]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d108      	bne.n	8002582 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0220 	orr.w	r2, r2, #32
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e007      	b.n	8002592 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0220 	bic.w	r2, r2, #32
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	7edb      	ldrb	r3, [r3, #27]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d108      	bne.n	80025ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0210 	bic.w	r2, r2, #16
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e007      	b.n	80025bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0210 	orr.w	r2, r2, #16
 80025ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7f1b      	ldrb	r3, [r3, #28]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d108      	bne.n	80025d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	e007      	b.n	80025e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0208 	bic.w	r2, r2, #8
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7f5b      	ldrb	r3, [r3, #29]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d108      	bne.n	8002600 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0204 	orr.w	r2, r2, #4
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e007      	b.n	8002610 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0204 	bic.w	r2, r2, #4
 800260e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	ea42 0103 	orr.w	r1, r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800264e:	b480      	push	{r7}
 8002650:	b087      	sub	sp, #28
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002664:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d003      	beq.n	8002674 <HAL_CAN_ConfigFilter+0x26>
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b02      	cmp	r3, #2
 8002670:	f040 80aa 	bne.w	80027c8 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2201      	movs	r2, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d123      	bne.n	80026f6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	401a      	ands	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3248      	adds	r2, #72	; 0x48
 80026d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ec:	6979      	ldr	r1, [r7, #20]
 80026ee:	3348      	adds	r3, #72	; 0x48
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d122      	bne.n	8002744 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	431a      	orrs	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800271e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3248      	adds	r2, #72	; 0x48
 8002724:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002738:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800273a:	6979      	ldr	r1, [r7, #20]
 800273c:	3348      	adds	r3, #72	; 0x48
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800275e:	e007      	b.n	8002770 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	431a      	orrs	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	43db      	mvns	r3, r3
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800278a:	e007      	b.n	800279c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	431a      	orrs	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027ba:	f023 0201 	bic.w	r2, r3, #1
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e006      	b.n	80027d6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d12e      	bne.n	8002854 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800280e:	f7fe faaf 	bl	8000d70 <HAL_GetTick>
 8002812:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002814:	e012      	b.n	800283c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002816:	f7fe faab 	bl	8000d70 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b0a      	cmp	r3, #10
 8002822:	d90b      	bls.n	800283c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2205      	movs	r2, #5
 8002834:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e012      	b.n	8002862 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e5      	bne.n	8002816 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	e006      	b.n	8002862 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d002      	beq.n	8002888 <HAL_CAN_ActivateNotification+0x1e>
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d109      	bne.n	800289c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6959      	ldr	r1, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e006      	b.n	80028aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	; (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff29 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff3e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff31 	bl	800291c <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aea:	e154      	b.n	8002d96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8146 	beq.w	8002d90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d005      	beq.n	8002b1c <HAL_GPIO_Init+0x40>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d130      	bne.n	8002b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b52:	2201      	movs	r2, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 0201 	and.w	r2, r3, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d017      	beq.n	8002bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d123      	bne.n	8002c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	6939      	ldr	r1, [r7, #16]
 8002c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0203 	and.w	r2, r3, #3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 80a0 	beq.w	8002d90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c50:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <HAL_GPIO_Init+0x2d8>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_GPIO_Init+0x2d8>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6193      	str	r3, [r2, #24]
 8002c5c:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <HAL_GPIO_Init+0x2d8>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c68:	4a53      	ldr	r2, [pc, #332]	; (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c92:	d019      	beq.n	8002cc8 <HAL_GPIO_Init+0x1ec>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a49      	ldr	r2, [pc, #292]	; (8002dbc <HAL_GPIO_Init+0x2e0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d013      	beq.n	8002cc4 <HAL_GPIO_Init+0x1e8>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a48      	ldr	r2, [pc, #288]	; (8002dc0 <HAL_GPIO_Init+0x2e4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_GPIO_Init+0x1e4>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a47      	ldr	r2, [pc, #284]	; (8002dc4 <HAL_GPIO_Init+0x2e8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <HAL_GPIO_Init+0x1e0>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a46      	ldr	r2, [pc, #280]	; (8002dc8 <HAL_GPIO_Init+0x2ec>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_GPIO_Init+0x1dc>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	e008      	b.n	8002cca <HAL_GPIO_Init+0x1ee>
 8002cb8:	2305      	movs	r3, #5
 8002cba:	e006      	b.n	8002cca <HAL_GPIO_Init+0x1ee>
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e004      	b.n	8002cca <HAL_GPIO_Init+0x1ee>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e002      	b.n	8002cca <HAL_GPIO_Init+0x1ee>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_GPIO_Init+0x1ee>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	f002 0203 	and.w	r2, r2, #3
 8002cd0:	0092      	lsls	r2, r2, #2
 8002cd2:	4093      	lsls	r3, r2
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cda:	4937      	ldr	r1, [pc, #220]	; (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce8:	4b38      	ldr	r3, [pc, #224]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d0c:	4a2f      	ldr	r2, [pc, #188]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d12:	4b2e      	ldr	r3, [pc, #184]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d36:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d60:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_GPIO_Init+0x2f0>)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3301      	adds	r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f47f aea3 	bne.w	8002aec <HAL_GPIO_Init+0x10>
  }
}
 8002da6:	bf00      	nop
 8002da8:	bf00      	nop
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	48000400 	.word	0x48000400
 8002dc0:	48000800 	.word	0x48000800
 8002dc4:	48000c00 	.word	0x48000c00
 8002dc8:	48001000 	.word	0x48001000
 8002dcc:	40010400 	.word	0x40010400

08002dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de0:	787b      	ldrb	r3, [r7, #1]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e08f      	b.n	8002f36 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d101      	bne.n	8002e26 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e087      	b.n	8002f36 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d101      	bne.n	8002e36 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3c:	4b40      	ldr	r3, [pc, #256]	; (8002f40 <HAL_OPAMP_Init+0x140>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4a3f      	ldr	r2, [pc, #252]	; (8002f40 <HAL_OPAMP_Init+0x140>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6193      	str	r3, [r2, #24]
 8002e48:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <HAL_OPAMP_Init+0x140>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fd67 	bl	800093c <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b40      	cmp	r3, #64	; 0x40
 8002e74:	d003      	beq.n	8002e7e <HAL_OPAMP_Init+0x7e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b60      	cmp	r3, #96	; 0x60
 8002e7c:	d125      	bne.n	8002eca <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <HAL_OPAMP_Init+0x144>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6851      	ldr	r1, [r2, #4]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	68d2      	ldr	r2, [r2, #12]
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6912      	ldr	r2, [r2, #16]
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6992      	ldr	r2, [r2, #24]
 8002e9c:	4311      	orrs	r1, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	69d2      	ldr	r2, [r2, #28]
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6a12      	ldr	r2, [r2, #32]
 8002ea8:	4311      	orrs	r1, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002eb4:	04d2      	lsls	r2, r2, #19
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ebc:	0612      	lsls	r2, r2, #24
 8002ebe:	4311      	orrs	r1, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	e02a      	b.n	8002f20 <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <HAL_OPAMP_Init+0x144>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6851      	ldr	r1, [r2, #4]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	4311      	orrs	r1, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	4311      	orrs	r1, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6912      	ldr	r2, [r2, #16]
 8002ee8:	4311      	orrs	r1, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6952      	ldr	r2, [r2, #20]
 8002eee:	4311      	orrs	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6992      	ldr	r2, [r2, #24]
 8002ef4:	4311      	orrs	r1, r2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	69d2      	ldr	r2, [r2, #28]
 8002efa:	4311      	orrs	r1, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6a12      	ldr	r2, [r2, #32]
 8002f00:	4311      	orrs	r1, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f06:	4311      	orrs	r1, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f0c:	04d2      	lsls	r2, r2, #19
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f14:	0612      	lsls	r2, r2, #24
 8002f16:	4311      	orrs	r1, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	e0003811 	.word	0xe0003811

08002f48 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	e01d      	b.n	8002f9c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d102      	bne.n	8002f72 <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
 8002f70:	e014      	b.n	8002f9c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d10c      	bne.n	8002f98 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2204      	movs	r2, #4
 8002f92:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8002f96:	e001      	b.n	8002f9c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fbc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f001 b823 	b.w	8004018 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 817d 	beq.w	80032e2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fe8:	4bbc      	ldr	r3, [pc, #752]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d00c      	beq.n	800300e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff4:	4bb9      	ldr	r3, [pc, #740]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d15c      	bne.n	80030ba <HAL_RCC_OscConfig+0x10e>
 8003000:	4bb6      	ldr	r3, [pc, #728]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300c:	d155      	bne.n	80030ba <HAL_RCC_OscConfig+0x10e>
 800300e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003012:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003022:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_RCC_OscConfig+0x94>
 800303a:	4ba8      	ldr	r3, [pc, #672]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	e015      	b.n	800306c <HAL_RCC_OscConfig+0xc0>
 8003040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003044:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003058:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800305c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003068:	4b9c      	ldr	r3, [pc, #624]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003070:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003074:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003078:	fa92 f2a2 	rbit	r2, r2
 800307c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003080:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003084:	fab2 f282 	clz	r2, r2
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f042 0220 	orr.w	r2, r2, #32
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	f002 021f 	and.w	r2, r2, #31
 8003094:	2101      	movs	r1, #1
 8003096:	fa01 f202 	lsl.w	r2, r1, r2
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 811f 	beq.w	80032e0 <HAL_RCC_OscConfig+0x334>
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 8116 	bne.w	80032e0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f000 bfaf 	b.w	8004018 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x12e>
 80030cc:	4b83      	ldr	r3, [pc, #524]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a82      	ldr	r2, [pc, #520]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	e036      	b.n	8003148 <HAL_RCC_OscConfig+0x19c>
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x158>
 80030ea:	4b7c      	ldr	r3, [pc, #496]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a7b      	ldr	r2, [pc, #492]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b79      	ldr	r3, [pc, #484]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a78      	ldr	r2, [pc, #480]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 80030fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e021      	b.n	8003148 <HAL_RCC_OscConfig+0x19c>
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x184>
 8003116:	4b71      	ldr	r3, [pc, #452]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a70      	ldr	r2, [pc, #448]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6e      	ldr	r3, [pc, #440]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6d      	ldr	r2, [pc, #436]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x19c>
 8003130:	4b6a      	ldr	r3, [pc, #424]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a69      	ldr	r2, [pc, #420]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a66      	ldr	r2, [pc, #408]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003148:	4b64      	ldr	r3, [pc, #400]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f023 020f 	bic.w	r2, r3, #15
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	495f      	ldr	r1, [pc, #380]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 800315e:	4313      	orrs	r3, r2
 8003160:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d059      	beq.n	8003226 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003172:	f7fd fdfd 	bl	8000d70 <HAL_GetTick>
 8003176:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800317c:	f7fd fdf8 	bl	8000d70 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b64      	cmp	r3, #100	; 0x64
 800318a:	d902      	bls.n	8003192 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	f000 bf43 	b.w	8004018 <HAL_RCC_OscConfig+0x106c>
 8003192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003196:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80031a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d102      	bne.n	80031c4 <HAL_RCC_OscConfig+0x218>
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	e015      	b.n	80031f0 <HAL_RCC_OscConfig+0x244>
 80031c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80031d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80031e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80031ec:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031f4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80031f8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80031fc:	fa92 f2a2 	rbit	r2, r2
 8003200:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003204:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003208:	fab2 f282 	clz	r2, r2
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	f042 0220 	orr.w	r2, r2, #32
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	f002 021f 	and.w	r2, r2, #31
 8003218:	2101      	movs	r1, #1
 800321a:	fa01 f202 	lsl.w	r2, r1, r2
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ab      	beq.n	800317c <HAL_RCC_OscConfig+0x1d0>
 8003224:	e05d      	b.n	80032e2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fd fda3 	bl	8000d70 <HAL_GetTick>
 800322a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7fd fd9e 	bl	8000d70 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d902      	bls.n	8003246 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	f000 bee9 	b.w	8004018 <HAL_RCC_OscConfig+0x106c>
 8003246:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800324a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800325a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HAL_RCC_OscConfig+0x2cc>
 8003272:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	e015      	b.n	80032a4 <HAL_RCC_OscConfig+0x2f8>
 8003278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800327c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800328c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003290:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003294:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_RCC_OscConfig+0x330>)
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032a8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80032ac:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80032b0:	fa92 f2a2 	rbit	r2, r2
 80032b4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80032b8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80032bc:	fab2 f282 	clz	r2, r2
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	f042 0220 	orr.w	r2, r2, #32
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	f002 021f 	and.w	r2, r2, #31
 80032cc:	2101      	movs	r1, #1
 80032ce:	fa01 f202 	lsl.w	r2, r1, r2
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ab      	bne.n	8003230 <HAL_RCC_OscConfig+0x284>
 80032d8:	e003      	b.n	80032e2 <HAL_RCC_OscConfig+0x336>
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 817d 	beq.w	80035f2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032f8:	4ba6      	ldr	r3, [pc, #664]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003304:	4ba3      	ldr	r3, [pc, #652]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d172      	bne.n	80033f6 <HAL_RCC_OscConfig+0x44a>
 8003310:	4ba0      	ldr	r3, [pc, #640]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d16c      	bne.n	80033f6 <HAL_RCC_OscConfig+0x44a>
 800331c:	2302      	movs	r3, #2
 800331e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003322:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003326:	fa93 f3a3 	rbit	r3, r3
 800332a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800332e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d102      	bne.n	800334c <HAL_RCC_OscConfig+0x3a0>
 8003346:	4b93      	ldr	r3, [pc, #588]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	e013      	b.n	8003374 <HAL_RCC_OscConfig+0x3c8>
 800334c:	2302      	movs	r3, #2
 800334e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800335e:	2302      	movs	r3, #2
 8003360:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003364:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003370:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2202      	movs	r2, #2
 8003376:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800337a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800337e:	fa92 f2a2 	rbit	r2, r2
 8003382:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003386:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800338a:	fab2 f282 	clz	r2, r2
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	f042 0220 	orr.w	r2, r2, #32
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	f002 021f 	and.w	r2, r2, #31
 800339a:	2101      	movs	r1, #1
 800339c:	fa01 f202 	lsl.w	r2, r1, r2
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCC_OscConfig+0x410>
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d002      	beq.n	80033bc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f000 be2e 	b.w	8004018 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033bc:	4b75      	ldr	r3, [pc, #468]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	21f8      	movs	r1, #248	; 0xf8
 80033d2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80033da:	fa91 f1a1 	rbit	r1, r1
 80033de:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80033e2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80033e6:	fab1 f181 	clz	r1, r1
 80033ea:	b2c9      	uxtb	r1, r1
 80033ec:	408b      	lsls	r3, r1
 80033ee:	4969      	ldr	r1, [pc, #420]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f4:	e0fd      	b.n	80035f2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8088 	beq.w	8003518 <HAL_RCC_OscConfig+0x56c>
 8003408:	2301      	movs	r3, #1
 800340a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800341a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341e:	fab3 f383 	clz	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003428:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	461a      	mov	r2, r3
 8003430:	2301      	movs	r3, #1
 8003432:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fd fc9c 	bl	8000d70 <HAL_GetTick>
 8003438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343e:	f7fd fc97 	bl	8000d70 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d902      	bls.n	8003454 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	f000 bde2 	b.w	8004018 <HAL_RCC_OscConfig+0x106c>
 8003454:	2302      	movs	r3, #2
 8003456:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003466:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_RCC_OscConfig+0x4d8>
 800347e:	4b45      	ldr	r3, [pc, #276]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	e013      	b.n	80034ac <HAL_RCC_OscConfig+0x500>
 8003484:	2302      	movs	r3, #2
 8003486:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003496:	2302      	movs	r3, #2
 8003498:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800349c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	2202      	movs	r2, #2
 80034ae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80034b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80034b6:	fa92 f2a2 	rbit	r2, r2
 80034ba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80034be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80034c2:	fab2 f282 	clz	r2, r2
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	f042 0220 	orr.w	r2, r2, #32
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	f002 021f 	and.w	r2, r2, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0af      	beq.n	800343e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	21f8      	movs	r1, #248	; 0xf8
 80034f4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80034fc:	fa91 f1a1 	rbit	r1, r1
 8003500:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003504:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003508:	fab1 f181 	clz	r1, r1
 800350c:	b2c9      	uxtb	r1, r1
 800350e:	408b      	lsls	r3, r1
 8003510:	4920      	ldr	r1, [pc, #128]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
 8003516:	e06c      	b.n	80035f2 <HAL_RCC_OscConfig+0x646>
 8003518:	2301      	movs	r3, #1
 800351a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800352a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003538:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fd fc14 	bl	8000d70 <HAL_GetTick>
 8003548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354c:	e00a      	b.n	8003564 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354e:	f7fd fc0f 	bl	8000d70 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d902      	bls.n	8003564 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	f000 bd5a 	b.w	8004018 <HAL_RCC_OscConfig+0x106c>
 8003564:	2302      	movs	r3, #2
 8003566:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d104      	bne.n	8003598 <HAL_RCC_OscConfig+0x5ec>
 800358e:	4b01      	ldr	r3, [pc, #4]	; (8003594 <HAL_RCC_OscConfig+0x5e8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	e015      	b.n	80035c0 <HAL_RCC_OscConfig+0x614>
 8003594:	40021000 	.word	0x40021000
 8003598:	2302      	movs	r3, #2
 800359a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80035aa:	2302      	movs	r3, #2
 80035ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80035b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80035bc:	4bc8      	ldr	r3, [pc, #800]	; (80038e0 <HAL_RCC_OscConfig+0x934>)
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2202      	movs	r2, #2
 80035c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80035c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035ca:	fa92 f2a2 	rbit	r2, r2
 80035ce:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80035d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80035d6:	fab2 f282 	clz	r2, r2
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	f042 0220 	orr.w	r2, r2, #32
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	f002 021f 	and.w	r2, r2, #31
 80035e6:	2101      	movs	r1, #1
 80035e8:	fa01 f202 	lsl.w	r2, r1, r2
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1ad      	bne.n	800354e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8110 	beq.w	8003828 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d079      	beq.n	800370c <HAL_RCC_OscConfig+0x760>
 8003618:	2301      	movs	r3, #1
 800361a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800362a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	4bab      	ldr	r3, [pc, #684]	; (80038e4 <HAL_RCC_OscConfig+0x938>)
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	461a      	mov	r2, r3
 800363e:	2301      	movs	r3, #1
 8003640:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fd fb95 	bl	8000d70 <HAL_GetTick>
 8003646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800364c:	f7fd fb90 	bl	8000d70 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d902      	bls.n	8003662 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	f000 bcdb 	b.w	8004018 <HAL_RCC_OscConfig+0x106c>
 8003662:	2302      	movs	r3, #2
 8003664:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003678:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800367c:	2202      	movs	r2, #2
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	fa93 f2a3 	rbit	r2, r3
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036a0:	2202      	movs	r2, #2
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	fa93 f2a3 	rbit	r2, r3
 80036b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036bc:	4b88      	ldr	r3, [pc, #544]	; (80038e0 <HAL_RCC_OscConfig+0x934>)
 80036be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036c8:	2102      	movs	r1, #2
 80036ca:	6019      	str	r1, [r3, #0]
 80036cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	fa93 f1a3 	rbit	r1, r3
 80036da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80036e2:	6019      	str	r1, [r3, #0]
  return result;
 80036e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	fab3 f383 	clz	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0a0      	beq.n	800364c <HAL_RCC_OscConfig+0x6a0>
 800370a:	e08d      	b.n	8003828 <HAL_RCC_OscConfig+0x87c>
 800370c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003710:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fa93 f2a3 	rbit	r2, r3
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800372e:	601a      	str	r2, [r3, #0]
  return result;
 8003730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003734:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003738:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <HAL_RCC_OscConfig+0x938>)
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	461a      	mov	r2, r3
 800374a:	2300      	movs	r3, #0
 800374c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fd fb0f 	bl	8000d70 <HAL_GetTick>
 8003752:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003758:	f7fd fb0a 	bl	8000d70 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d902      	bls.n	800376e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	f000 bc55 	b.w	8004018 <HAL_RCC_OscConfig+0x106c>
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003776:	2202      	movs	r2, #2
 8003778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	fa93 f2a3 	rbit	r2, r3
 8003788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800379a:	2202      	movs	r2, #2
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	fa93 f2a3 	rbit	r2, r3
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037be:	2202      	movs	r2, #2
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	fa93 f2a3 	rbit	r2, r3
 80037d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <HAL_RCC_OscConfig+0x934>)
 80037dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80037e6:	2102      	movs	r1, #2
 80037e8:	6019      	str	r1, [r3, #0]
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	fa93 f1a3 	rbit	r1, r3
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003800:	6019      	str	r1, [r3, #0]
  return result;
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	2101      	movs	r1, #1
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d197      	bne.n	8003758 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 81a1 	beq.w	8003b80 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003844:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <HAL_RCC_OscConfig+0x934>)
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d116      	bne.n	800387e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <HAL_RCC_OscConfig+0x934>)
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <HAL_RCC_OscConfig+0x934>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	61d3      	str	r3, [r2, #28]
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCC_OscConfig+0x934>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003868:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003872:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003876:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003878:	2301      	movs	r3, #1
 800387a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <HAL_RCC_OscConfig+0x93c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d11a      	bne.n	80038c0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388a:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <HAL_RCC_OscConfig+0x93c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <HAL_RCC_OscConfig+0x93c>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003896:	f7fd fa6b 	bl	8000d70 <HAL_GetTick>
 800389a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	e009      	b.n	80038b4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fd fa66 	bl	8000d70 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b64      	cmp	r3, #100	; 0x64
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e3b1      	b.n	8004018 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <HAL_RCC_OscConfig+0x93c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10d      	bne.n	80038ec <HAL_RCC_OscConfig+0x940>
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <HAL_RCC_OscConfig+0x934>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a02      	ldr	r2, [pc, #8]	; (80038e0 <HAL_RCC_OscConfig+0x934>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6213      	str	r3, [r2, #32]
 80038dc:	e03c      	b.n	8003958 <HAL_RCC_OscConfig+0x9ac>
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	10908120 	.word	0x10908120
 80038e8:	40007000 	.word	0x40007000
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10c      	bne.n	8003916 <HAL_RCC_OscConfig+0x96a>
 80038fc:	4bc1      	ldr	r3, [pc, #772]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	4ac0      	ldr	r2, [pc, #768]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	6213      	str	r3, [r2, #32]
 8003908:	4bbe      	ldr	r3, [pc, #760]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4abd      	ldr	r2, [pc, #756]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 800390e:	f023 0304 	bic.w	r3, r3, #4
 8003912:	6213      	str	r3, [r2, #32]
 8003914:	e020      	b.n	8003958 <HAL_RCC_OscConfig+0x9ac>
 8003916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b05      	cmp	r3, #5
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x994>
 8003926:	4bb7      	ldr	r3, [pc, #732]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4ab6      	ldr	r2, [pc, #728]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 800392c:	f043 0304 	orr.w	r3, r3, #4
 8003930:	6213      	str	r3, [r2, #32]
 8003932:	4bb4      	ldr	r3, [pc, #720]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4ab3      	ldr	r2, [pc, #716]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	6213      	str	r3, [r2, #32]
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0x9ac>
 8003940:	4bb0      	ldr	r3, [pc, #704]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	4aaf      	ldr	r2, [pc, #700]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	6213      	str	r3, [r2, #32]
 800394c:	4bad      	ldr	r3, [pc, #692]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	4aac      	ldr	r2, [pc, #688]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003952:	f023 0304 	bic.w	r3, r3, #4
 8003956:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8081 	beq.w	8003a6c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396a:	f7fd fa01 	bl	8000d70 <HAL_GetTick>
 800396e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fd f9fc 	bl	8000d70 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e345      	b.n	8004018 <HAL_RCC_OscConfig+0x106c>
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003994:	2202      	movs	r2, #2
 8003996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fa93 f2a3 	rbit	r2, r3
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039b8:	2202      	movs	r2, #2
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	fa93 f2a3 	rbit	r2, r3
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039d2:	601a      	str	r2, [r3, #0]
  return result;
 80039d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80039dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d102      	bne.n	80039f8 <HAL_RCC_OscConfig+0xa4c>
 80039f2:	4b84      	ldr	r3, [pc, #528]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	e013      	b.n	8003a20 <HAL_RCC_OscConfig+0xa74>
 80039f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a00:	2202      	movs	r2, #2
 8003a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	fa93 f2a3 	rbit	r2, r3
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a24:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a28:	2102      	movs	r1, #2
 8003a2a:	6011      	str	r1, [r2, #0]
 8003a2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a30:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	fa92 f1a2 	rbit	r1, r2
 8003a3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a3e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a42:	6011      	str	r1, [r2, #0]
  return result;
 8003a44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a48:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	fab2 f282 	clz	r2, r2
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	f002 021f 	and.w	r2, r2, #31
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f202 	lsl.w	r2, r1, r2
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d084      	beq.n	8003974 <HAL_RCC_OscConfig+0x9c8>
 8003a6a:	e07f      	b.n	8003b6c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fd f980 	bl	8000d70 <HAL_GetTick>
 8003a70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	e00b      	b.n	8003a8e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fd f97b 	bl	8000d70 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e2c4      	b.n	8004018 <HAL_RCC_OscConfig+0x106c>
 8003a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003a96:	2202      	movs	r2, #2
 8003a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f2a3 	rbit	r2, r3
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003aba:	2202      	movs	r2, #2
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fa93 f2a3 	rbit	r2, r3
 8003acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ad4:	601a      	str	r2, [r3, #0]
  return result;
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ade:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae0:	fab3 f383 	clz	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f043 0302 	orr.w	r3, r3, #2
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d102      	bne.n	8003afa <HAL_RCC_OscConfig+0xb4e>
 8003af4:	4b43      	ldr	r3, [pc, #268]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	e013      	b.n	8003b22 <HAL_RCC_OscConfig+0xb76>
 8003afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b02:	2202      	movs	r2, #2
 8003b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	fa93 f2a3 	rbit	r2, r3
 8003b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b18:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b26:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	6011      	str	r1, [r2, #0]
 8003b2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	fa92 f1a2 	rbit	r1, r2
 8003b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b40:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b44:	6011      	str	r1, [r2, #0]
  return result;
 8003b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b4a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	fab2 f282 	clz	r2, r2
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f002 021f 	and.w	r2, r2, #31
 8003b60:	2101      	movs	r1, #1
 8003b62:	fa01 f202 	lsl.w	r2, r1, r2
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d184      	bne.n	8003a76 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b6c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b74:	4b23      	ldr	r3, [pc, #140]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4a22      	ldr	r2, [pc, #136]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8242 	beq.w	8004016 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b92:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <HAL_RCC_OscConfig+0xc58>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	f000 8213 	beq.w	8003fc6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	f040 8162 	bne.w	8003e76 <HAL_RCC_OscConfig+0xeca>
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003bba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	fa93 f2a3 	rbit	r2, r3
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003bd6:	601a      	str	r2, [r3, #0]
  return result;
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003be0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf8:	f7fd f8ba 	bl	8000d70 <HAL_GetTick>
 8003bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c00:	e00c      	b.n	8003c1c <HAL_RCC_OscConfig+0xc70>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fd f8b2 	bl	8000d70 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e1fd      	b.n	8004018 <HAL_RCC_OscConfig+0x106c>
 8003c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c20:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fa93 f2a3 	rbit	r2, r3
 8003c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c40:	601a      	str	r2, [r3, #0]
  return result;
 8003c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d102      	bne.n	8003c66 <HAL_RCC_OscConfig+0xcba>
 8003c60:	4bb0      	ldr	r3, [pc, #704]	; (8003f24 <HAL_RCC_OscConfig+0xf78>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	e027      	b.n	8003cb6 <HAL_RCC_OscConfig+0xd0a>
 8003c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c78:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f2a3 	rbit	r2, r3
 8003c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c86:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	fa93 f2a3 	rbit	r2, r3
 8003ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	4b9c      	ldr	r3, [pc, #624]	; (8003f24 <HAL_RCC_OscConfig+0xf78>)
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cba:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003cbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cc2:	6011      	str	r1, [r2, #0]
 8003cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cc8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	fa92 f1a2 	rbit	r1, r2
 8003cd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cd6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003cda:	6011      	str	r1, [r2, #0]
  return result;
 8003cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ce0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	fab2 f282 	clz	r2, r2
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	f042 0220 	orr.w	r2, r2, #32
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	f002 021f 	and.w	r2, r2, #31
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d182      	bne.n	8003c08 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d02:	4b88      	ldr	r3, [pc, #544]	; (8003f24 <HAL_RCC_OscConfig+0xf78>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	430b      	orrs	r3, r1
 8003d24:	497f      	ldr	r1, [pc, #508]	; (8003f24 <HAL_RCC_OscConfig+0xf78>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
 8003d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	fa93 f2a3 	rbit	r2, r3
 8003d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d4e:	601a      	str	r2, [r3, #0]
  return result;
 8003d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d54:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d58:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d70:	f7fc fffe 	bl	8000d70 <HAL_GetTick>
 8003d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d78:	e009      	b.n	8003d8e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7fc fff9 	bl	8000d70 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e144      	b.n	8004018 <HAL_RCC_OscConfig+0x106c>
 8003d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d92:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	fa93 f2a3 	rbit	r2, r3
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003db2:	601a      	str	r2, [r3, #0]
  return result;
 8003db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003dbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dbe:	fab3 f383 	clz	r3, r3
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d102      	bne.n	8003dd8 <HAL_RCC_OscConfig+0xe2c>
 8003dd2:	4b54      	ldr	r3, [pc, #336]	; (8003f24 <HAL_RCC_OscConfig+0xf78>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	e027      	b.n	8003e28 <HAL_RCC_OscConfig+0xe7c>
 8003dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ddc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003de0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	fa93 f2a3 	rbit	r2, r3
 8003df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e02:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	fa93 f2a3 	rbit	r2, r3
 8003e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <HAL_RCC_OscConfig+0xf78>)
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e2c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e34:	6011      	str	r1, [r2, #0]
 8003e36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e3a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	fa92 f1a2 	rbit	r1, r2
 8003e44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e4c:	6011      	str	r1, [r2, #0]
  return result;
 8003e4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e52:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	fab2 f282 	clz	r2, r2
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	f042 0220 	orr.w	r2, r2, #32
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	f002 021f 	and.w	r2, r2, #31
 8003e68:	2101      	movs	r1, #1
 8003e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d082      	beq.n	8003d7a <HAL_RCC_OscConfig+0xdce>
 8003e74:	e0cf      	b.n	8004016 <HAL_RCC_OscConfig+0x106a>
 8003e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e88:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	fa93 f2a3 	rbit	r2, r3
 8003e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e96:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003e9a:	601a      	str	r2, [r3, #0]
  return result;
 8003e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ea4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2300      	movs	r3, #0
 8003eba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fc ff58 	bl	8000d70 <HAL_GetTick>
 8003ec0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec4:	e009      	b.n	8003eda <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec6:	f7fc ff53 	bl	8000d70 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e09e      	b.n	8004018 <HAL_RCC_OscConfig+0x106c>
 8003eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ede:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	fa93 f2a3 	rbit	r2, r3
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003efe:	601a      	str	r2, [r3, #0]
  return result;
 8003f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f04:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d104      	bne.n	8003f28 <HAL_RCC_OscConfig+0xf7c>
 8003f1e:	4b01      	ldr	r3, [pc, #4]	; (8003f24 <HAL_RCC_OscConfig+0xf78>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	e029      	b.n	8003f78 <HAL_RCC_OscConfig+0xfcc>
 8003f24:	40021000 	.word	0x40021000
 8003f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	fa93 f2a3 	rbit	r2, r3
 8003f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f48:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	fa93 f2a3 	rbit	r2, r3
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_OscConfig+0x1078>)
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f7c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f8a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	fa92 f1a2 	rbit	r1, r2
 8003f94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f98:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003f9c:	6011      	str	r1, [r2, #0]
  return result;
 8003f9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fa2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	f042 0220 	orr.w	r2, r2, #32
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	f002 021f 	and.w	r2, r2, #31
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d180      	bne.n	8003ec6 <HAL_RCC_OscConfig+0xf1a>
 8003fc4:	e027      	b.n	8004016 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e01e      	b.n	8004018 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_OscConfig+0x1078>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fe2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003fe6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d10b      	bne.n	8004012 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ffa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ffe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800400e:	429a      	cmp	r2, r3
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b09e      	sub	sp, #120	; 0x78
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e162      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b90      	ldr	r3, [pc, #576]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d910      	bls.n	8004070 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 0207 	bic.w	r2, r3, #7
 8004056:	498b      	ldr	r1, [pc, #556]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b89      	ldr	r3, [pc, #548]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e14a      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b82      	ldr	r3, [pc, #520]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	497f      	ldr	r1, [pc, #508]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80dc 	beq.w	8004254 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d13c      	bne.n	800411e <HAL_RCC_ClockConfig+0xf6>
 80040a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_RCC_ClockConfig+0xa6>
 80040c8:	4b6f      	ldr	r3, [pc, #444]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	e00f      	b.n	80040ee <HAL_RCC_ClockConfig+0xc6>
 80040ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	667b      	str	r3, [r7, #100]	; 0x64
 80040dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040e0:	663b      	str	r3, [r7, #96]	; 0x60
 80040e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ea:	4b67      	ldr	r3, [pc, #412]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80040f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040f6:	fa92 f2a2 	rbit	r2, r2
 80040fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80040fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040fe:	fab2 f282 	clz	r2, r2
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	f042 0220 	orr.w	r2, r2, #32
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	f002 021f 	and.w	r2, r2, #31
 800410e:	2101      	movs	r1, #1
 8004110:	fa01 f202 	lsl.w	r2, r1, r2
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d17b      	bne.n	8004212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e0f3      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d13c      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x178>
 8004126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800412a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_RCC_ClockConfig+0x128>
 800414a:	4b4f      	ldr	r3, [pc, #316]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	e00f      	b.n	8004170 <HAL_RCC_ClockConfig+0x148>
 8004150:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004154:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004158:	fa93 f3a3 	rbit	r3, r3
 800415c:	647b      	str	r3, [r7, #68]	; 0x44
 800415e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004162:	643b      	str	r3, [r7, #64]	; 0x40
 8004164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004166:	fa93 f3a3 	rbit	r3, r3
 800416a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800416c:	4b46      	ldr	r3, [pc, #280]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004174:	63ba      	str	r2, [r7, #56]	; 0x38
 8004176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004178:	fa92 f2a2 	rbit	r2, r2
 800417c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800417e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004180:	fab2 f282 	clz	r2, r2
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	f042 0220 	orr.w	r2, r2, #32
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	f002 021f 	and.w	r2, r2, #31
 8004190:	2101      	movs	r1, #1
 8004192:	fa01 f202 	lsl.w	r2, r1, r2
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d13a      	bne.n	8004212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0b2      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
 80041a0:	2302      	movs	r3, #2
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x1a0>
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	e00d      	b.n	80041e4 <HAL_RCC_ClockConfig+0x1bc>
 80041c8:	2302      	movs	r3, #2
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
 80041d4:	2302      	movs	r3, #2
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2202      	movs	r2, #2
 80041e6:	61ba      	str	r2, [r7, #24]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	fa92 f2a2 	rbit	r2, r2
 80041ee:	617a      	str	r2, [r7, #20]
  return result;
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	fab2 f282 	clz	r2, r2
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	f042 0220 	orr.w	r2, r2, #32
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	f002 021f 	and.w	r2, r2, #31
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f202 	lsl.w	r2, r1, r2
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e079      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	491a      	ldr	r1, [pc, #104]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fc fda4 	bl	8000d70 <HAL_GetTick>
 8004228:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fc fda0 	bl	8000d70 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e061      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b11      	ldr	r3, [pc, #68]	; (8004288 <HAL_RCC_ClockConfig+0x260>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d214      	bcs.n	800428c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b08      	ldr	r3, [pc, #32]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	4906      	ldr	r1, [pc, #24]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_RCC_ClockConfig+0x25c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e040      	b.n	8004306 <HAL_RCC_ClockConfig+0x2de>
 8004284:	40022000 	.word	0x40022000
 8004288:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	491a      	ldr	r1, [pc, #104]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d009      	beq.n	80042ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b6:	4b16      	ldr	r3, [pc, #88]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4912      	ldr	r1, [pc, #72]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042ca:	f000 f829 	bl	8004320 <HAL_RCC_GetSysClockFreq>
 80042ce:	4601      	mov	r1, r0
 80042d0:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_RCC_ClockConfig+0x2e8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d8:	22f0      	movs	r2, #240	; 0xf0
 80042da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	fa92 f2a2 	rbit	r2, r2
 80042e2:	60fa      	str	r2, [r7, #12]
  return result;
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	fab2 f282 	clz	r2, r2
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	40d3      	lsrs	r3, r2
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x2ec>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
 80042f2:	fa21 f303 	lsr.w	r3, r1, r3
 80042f6:	4a08      	ldr	r2, [pc, #32]	; (8004318 <HAL_RCC_ClockConfig+0x2f0>)
 80042f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042fa:	4b08      	ldr	r3, [pc, #32]	; (800431c <HAL_RCC_ClockConfig+0x2f4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fc fcf2 	bl	8000ce8 <HAL_InitTick>
  
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3778      	adds	r7, #120	; 0x78
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	08004d5c 	.word	0x08004d5c
 8004318:	20000000 	.word	0x20000000
 800431c:	20000004 	.word	0x20000004

08004320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004320:	b480      	push	{r7}
 8004322:	b08b      	sub	sp, #44	; 0x2c
 8004324:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800433a:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b04      	cmp	r3, #4
 8004348:	d002      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x30>
 800434a:	2b08      	cmp	r3, #8
 800434c:	d003      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x36>
 800434e:	e03c      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004350:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004352:	623b      	str	r3, [r7, #32]
      break;
 8004354:	e03c      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800435c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004360:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	fa92 f2a2 	rbit	r2, r2
 8004368:	607a      	str	r2, [r7, #4]
  return result;
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	fab2 f282 	clz	r2, r2
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	40d3      	lsrs	r3, r2
 8004374:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	220f      	movs	r2, #15
 8004384:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	fa92 f2a2 	rbit	r2, r2
 800438c:	60fa      	str	r2, [r7, #12]
  return result;
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	fab2 f282 	clz	r2, r2
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	40d3      	lsrs	r3, r2
 8004398:	4a14      	ldr	r2, [pc, #80]	; (80043ec <HAL_RCC_GetSysClockFreq+0xcc>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043a8:	4a0e      	ldr	r2, [pc, #56]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	e004      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	4a0c      	ldr	r2, [pc, #48]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	623b      	str	r3, [r7, #32]
      break;
 80043c8:	e002      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043ca:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043cc:	623b      	str	r3, [r7, #32]
      break;
 80043ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043d0:	6a3b      	ldr	r3, [r7, #32]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	372c      	adds	r7, #44	; 0x2c
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	08004d6c 	.word	0x08004d6c
 80043ec:	08004d7c 	.word	0x08004d7c
 80043f0:	003d0900 	.word	0x003d0900
 80043f4:	007a1200 	.word	0x007a1200

080043f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b092      	sub	sp, #72	; 0x48
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004408:	2300      	movs	r3, #0
 800440a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80d4 	beq.w	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441c:	4b4e      	ldr	r3, [pc, #312]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10e      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004428:	4b4b      	ldr	r3, [pc, #300]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	4a4a      	ldr	r2, [pc, #296]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004432:	61d3      	str	r3, [r2, #28]
 8004434:	4b48      	ldr	r3, [pc, #288]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	4b45      	ldr	r3, [pc, #276]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d118      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004452:	4b42      	ldr	r3, [pc, #264]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a41      	ldr	r2, [pc, #260]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445e:	f7fc fc87 	bl	8000d70 <HAL_GetTick>
 8004462:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004464:	e008      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004466:	f7fc fc83 	bl	8000d70 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b64      	cmp	r3, #100	; 0x64
 8004472:	d901      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e169      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	4b38      	ldr	r3, [pc, #224]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004484:	4b34      	ldr	r3, [pc, #208]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8084 	beq.w	800459e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d07c      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a4:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	fa93 f3a3 	rbit	r3, r3
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b26      	ldr	r3, [pc, #152]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	461a      	mov	r2, r3
 80044ce:	2301      	movs	r3, #1
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044da:	fa93 f3a3 	rbit	r3, r3
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044e2:	fab3 f383 	clz	r3, r3
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	461a      	mov	r2, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044f6:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d04b      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fc fc33 	bl	8000d70 <HAL_GetTick>
 800450a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fc fc2f 	bl	8000d70 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e113      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004524:	2302      	movs	r3, #2
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
 8004530:	2302      	movs	r3, #2
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	fa93 f3a3 	rbit	r3, r3
 800453a:	61fb      	str	r3, [r7, #28]
  return result;
 800453c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d108      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004552:	4b01      	ldr	r3, [pc, #4]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	e00d      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004558:	40021000 	.word	0x40021000
 800455c:	40007000 	.word	0x40007000
 8004560:	10908100 	.word	0x10908100
 8004564:	2302      	movs	r3, #2
 8004566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	4b78      	ldr	r3, [pc, #480]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	2202      	movs	r2, #2
 8004576:	613a      	str	r2, [r7, #16]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	fa92 f2a2 	rbit	r2, r2
 800457e:	60fa      	str	r2, [r7, #12]
  return result;
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	fab2 f282 	clz	r2, r2
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	f002 021f 	and.w	r2, r2, #31
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f202 	lsl.w	r2, r1, r2
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0b7      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	496a      	ldr	r1, [pc, #424]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d0:	4b60      	ldr	r3, [pc, #384]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f023 0203 	bic.w	r2, r3, #3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	495d      	ldr	r1, [pc, #372]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045ee:	4b59      	ldr	r3, [pc, #356]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4956      	ldr	r1, [pc, #344]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800460c:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	494e      	ldr	r1, [pc, #312]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	f023 0210 	bic.w	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4947      	ldr	r1, [pc, #284]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004638:	4313      	orrs	r3, r2
 800463a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004648:	4b42      	ldr	r3, [pc, #264]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	493f      	ldr	r1, [pc, #252]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f023 0220 	bic.w	r2, r3, #32
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	4938      	ldr	r1, [pc, #224]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004684:	4b33      	ldr	r3, [pc, #204]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	4930      	ldr	r1, [pc, #192]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046a2:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	4929      	ldr	r1, [pc, #164]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046c0:	4b24      	ldr	r3, [pc, #144]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4921      	ldr	r1, [pc, #132]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	491a      	ldr	r1, [pc, #104]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80046fc:	4b15      	ldr	r3, [pc, #84]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	4912      	ldr	r1, [pc, #72]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800470a:	4313      	orrs	r3, r2
 800470c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800471a:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	490b      	ldr	r1, [pc, #44]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004744:	4903      	ldr	r1, [pc, #12]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004746:	4313      	orrs	r3, r2
 8004748:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3748      	adds	r7, #72	; 0x48
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40021000 	.word	0x40021000

08004758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e049      	b.n	80047fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc f9c6 	bl	8000b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4610      	mov	r0, r2
 8004798:	f000 f8fe 	bl	8004998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_TIM_ConfigClockSource+0x1c>
 800481e:	2302      	movs	r3, #2
 8004820:	e0b6      	b.n	8004990 <HAL_TIM_ConfigClockSource+0x18a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004840:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004844:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800485e:	d03e      	beq.n	80048de <HAL_TIM_ConfigClockSource+0xd8>
 8004860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004864:	f200 8087 	bhi.w	8004976 <HAL_TIM_ConfigClockSource+0x170>
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	f000 8086 	beq.w	800497c <HAL_TIM_ConfigClockSource+0x176>
 8004870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004874:	d87f      	bhi.n	8004976 <HAL_TIM_ConfigClockSource+0x170>
 8004876:	2b70      	cmp	r3, #112	; 0x70
 8004878:	d01a      	beq.n	80048b0 <HAL_TIM_ConfigClockSource+0xaa>
 800487a:	2b70      	cmp	r3, #112	; 0x70
 800487c:	d87b      	bhi.n	8004976 <HAL_TIM_ConfigClockSource+0x170>
 800487e:	2b60      	cmp	r3, #96	; 0x60
 8004880:	d050      	beq.n	8004924 <HAL_TIM_ConfigClockSource+0x11e>
 8004882:	2b60      	cmp	r3, #96	; 0x60
 8004884:	d877      	bhi.n	8004976 <HAL_TIM_ConfigClockSource+0x170>
 8004886:	2b50      	cmp	r3, #80	; 0x50
 8004888:	d03c      	beq.n	8004904 <HAL_TIM_ConfigClockSource+0xfe>
 800488a:	2b50      	cmp	r3, #80	; 0x50
 800488c:	d873      	bhi.n	8004976 <HAL_TIM_ConfigClockSource+0x170>
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d058      	beq.n	8004944 <HAL_TIM_ConfigClockSource+0x13e>
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d86f      	bhi.n	8004976 <HAL_TIM_ConfigClockSource+0x170>
 8004896:	2b30      	cmp	r3, #48	; 0x30
 8004898:	d064      	beq.n	8004964 <HAL_TIM_ConfigClockSource+0x15e>
 800489a:	2b30      	cmp	r3, #48	; 0x30
 800489c:	d86b      	bhi.n	8004976 <HAL_TIM_ConfigClockSource+0x170>
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d060      	beq.n	8004964 <HAL_TIM_ConfigClockSource+0x15e>
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d867      	bhi.n	8004976 <HAL_TIM_ConfigClockSource+0x170>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d05c      	beq.n	8004964 <HAL_TIM_ConfigClockSource+0x15e>
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d05a      	beq.n	8004964 <HAL_TIM_ConfigClockSource+0x15e>
 80048ae:	e062      	b.n	8004976 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048c0:	f000 f974 	bl	8004bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	609a      	str	r2, [r3, #8]
      break;
 80048dc:	e04f      	b.n	800497e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048ee:	f000 f95d 	bl	8004bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004900:	609a      	str	r2, [r3, #8]
      break;
 8004902:	e03c      	b.n	800497e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004910:	461a      	mov	r2, r3
 8004912:	f000 f8d1 	bl	8004ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2150      	movs	r1, #80	; 0x50
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f92a 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 8004922:	e02c      	b.n	800497e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004930:	461a      	mov	r2, r3
 8004932:	f000 f8f0 	bl	8004b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2160      	movs	r1, #96	; 0x60
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f91a 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 8004942:	e01c      	b.n	800497e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004950:	461a      	mov	r2, r3
 8004952:	f000 f8b1 	bl	8004ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2140      	movs	r1, #64	; 0x40
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f90a 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 8004962:	e00c      	b.n	800497e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f000 f901 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 8004974:	e003      	b.n	800497e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
      break;
 800497a:	e000      	b.n	800497e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800497c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3c      	ldr	r2, [pc, #240]	; (8004a9c <TIM_Base_SetConfig+0x104>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00f      	beq.n	80049d0 <TIM_Base_SetConfig+0x38>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b6:	d00b      	beq.n	80049d0 <TIM_Base_SetConfig+0x38>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a39      	ldr	r2, [pc, #228]	; (8004aa0 <TIM_Base_SetConfig+0x108>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <TIM_Base_SetConfig+0x38>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a38      	ldr	r2, [pc, #224]	; (8004aa4 <TIM_Base_SetConfig+0x10c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_Base_SetConfig+0x38>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <TIM_Base_SetConfig+0x110>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d108      	bne.n	80049e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2d      	ldr	r2, [pc, #180]	; (8004a9c <TIM_Base_SetConfig+0x104>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01b      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f0:	d017      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2a      	ldr	r2, [pc, #168]	; (8004aa0 <TIM_Base_SetConfig+0x108>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <TIM_Base_SetConfig+0x10c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a28      	ldr	r2, [pc, #160]	; (8004aa8 <TIM_Base_SetConfig+0x110>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a27      	ldr	r2, [pc, #156]	; (8004aac <TIM_Base_SetConfig+0x114>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a26      	ldr	r2, [pc, #152]	; (8004ab0 <TIM_Base_SetConfig+0x118>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_Base_SetConfig+0x8a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a25      	ldr	r2, [pc, #148]	; (8004ab4 <TIM_Base_SetConfig+0x11c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <TIM_Base_SetConfig+0x104>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00f      	beq.n	8004a80 <TIM_Base_SetConfig+0xe8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <TIM_Base_SetConfig+0x110>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <TIM_Base_SetConfig+0xe8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <TIM_Base_SetConfig+0x114>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_Base_SetConfig+0xe8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0f      	ldr	r2, [pc, #60]	; (8004ab0 <TIM_Base_SetConfig+0x118>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xe8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0e      	ldr	r2, [pc, #56]	; (8004ab4 <TIM_Base_SetConfig+0x11c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012c00 	.word	0x40012c00
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40013400 	.word	0x40013400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800

08004ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f023 030a 	bic.w	r3, r3, #10
 8004af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b087      	sub	sp, #28
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	f023 0210 	bic.w	r2, r3, #16
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f043 0307 	orr.w	r3, r3, #7
 8004b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	021a      	lsls	r2, r3, #8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	609a      	str	r2, [r3, #8]
}
 8004be0:	bf00      	nop
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e063      	b.n	8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2b      	ldr	r2, [pc, #172]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d108      	bne.n	8004c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d018      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c76:	d013      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00e      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a17      	ldr	r2, [pc, #92]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d009      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d004      	beq.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10c      	bne.n	8004cba <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40013400 	.word	0x40013400
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40014000 	.word	0x40014000

08004cec <memset>:
 8004cec:	4402      	add	r2, r0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d100      	bne.n	8004cf6 <memset+0xa>
 8004cf4:	4770      	bx	lr
 8004cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfa:	e7f9      	b.n	8004cf0 <memset+0x4>

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	; (8004d34 <__libc_init_array+0x38>)
 8004d00:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <__libc_init_array+0x3c>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	2600      	movs	r6, #0
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	4d0b      	ldr	r5, [pc, #44]	; (8004d3c <__libc_init_array+0x40>)
 8004d0e:	4c0c      	ldr	r4, [pc, #48]	; (8004d40 <__libc_init_array+0x44>)
 8004d10:	f000 f818 	bl	8004d44 <_init>
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	2600      	movs	r6, #0
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	08004d8c 	.word	0x08004d8c
 8004d38:	08004d8c 	.word	0x08004d8c
 8004d3c:	08004d8c 	.word	0x08004d8c
 8004d40:	08004d90 	.word	0x08004d90

08004d44 <_init>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr

08004d50 <_fini>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr
