
GMU_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c00  08003c00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c00  08003c00  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c00  08003c00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009eea  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000226e  00000000  00000000  00029f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008c8  00000000  00000000  0002c1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000670  00000000  00000000  0002caa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001dbab  00000000  00000000  0002d110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000daa0  00000000  00000000  0004acbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b0ebd  00000000  00000000  0005875b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002148  00000000  00000000  00109618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0010b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bb8 	.word	0x08003bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003bb8 	.word	0x08003bb8

080001c8 <HAL_ADC_ConvCpltCallback>:
	HAL_OPAMP_Start(&hopamp1);
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
	HAL_ADC_Start_IT(&hadc1);
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80001d8:	d106      	bne.n	80001e8 <HAL_ADC_ConvCpltCallback+0x20>
	{
		adcValue = HAL_ADC_GetValue(hadc);
 80001da:	6878      	ldr	r0, [r7, #4]
 80001dc:	f000 fd48 	bl	8000c70 <HAL_ADC_GetValue>
 80001e0:	4603      	mov	r3, r0
 80001e2:	b29a      	uxth	r2, r3
 80001e4:	4b02      	ldr	r3, [pc, #8]	; (80001f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80001e6:	801a      	strh	r2, [r3, #0]
	}
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000028 	.word	0x20000028

080001f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08a      	sub	sp, #40	; 0x28
 80001f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001fa:	f107 031c 	add.w	r3, r7, #28
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
 8000214:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000216:	4b2e      	ldr	r3, [pc, #184]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000218:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800021c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800021e:	4b2c      	ldr	r3, [pc, #176]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000220:	2200      	movs	r2, #0
 8000222:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000224:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800022c:	2200      	movs	r2, #0
 800022e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000230:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000232:	2200      	movs	r2, #0
 8000234:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000238:	2200      	movs	r2, #0
 800023a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800023e:	4b24      	ldr	r3, [pc, #144]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000240:	2200      	movs	r2, #0
 8000242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000246:	2201      	movs	r2, #1
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024a:	4b21      	ldr	r3, [pc, #132]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000252:	2201      	movs	r2, #1
 8000254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000256:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000258:	2200      	movs	r2, #0
 800025a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000260:	2204      	movs	r2, #4
 8000262:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000266:	2200      	movs	r2, #0
 8000268:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800026c:	2200      	movs	r2, #0
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <MX_ADC1_Init+0xdc>)
 8000272:	f000 fb1d 	bl	80008b0 <HAL_ADC_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800027c:	f000 f9b2 	bl	80005e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000280:	2300      	movs	r3, #0
 8000282:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000284:	f107 031c 	add.w	r3, r7, #28
 8000288:	4619      	mov	r1, r3
 800028a:	4811      	ldr	r0, [pc, #68]	; (80002d0 <MX_ADC1_Init+0xdc>)
 800028c:	f001 faf6 	bl	800187c <HAL_ADCEx_MultiModeConfigChannel>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000296:	f000 f9a5 	bl	80005e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800029a:	2303      	movs	r3, #3
 800029c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800029e:	2301      	movs	r3, #1
 80002a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80002a6:	2305      	movs	r3, #5
 80002a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	4806      	ldr	r0, [pc, #24]	; (80002d0 <MX_ADC1_Init+0xdc>)
 80002b8:	f000 fff6 	bl	80012a8 <HAL_ADC_ConfigChannel>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80002c2:	f000 f98f 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c6:	bf00      	nop
 80002c8:	3728      	adds	r7, #40	; 0x28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	2000002c 	.word	0x2000002c

080002d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80002e4:	d113      	bne.n	800030e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <HAL_ADC_MspInit+0x44>)
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	4a0b      	ldr	r2, [pc, #44]	; (8000318 <HAL_ADC_MspInit+0x44>)
 80002ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002f0:	6153      	str	r3, [r2, #20]
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <HAL_ADC_MspInit+0x44>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80002fe:	2200      	movs	r2, #0
 8000300:	2100      	movs	r1, #0
 8000302:	2012      	movs	r0, #18
 8000304:	f001 fde9 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000308:	2012      	movs	r0, #18
 800030a:	f001 fe02 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800030e:	bf00      	nop
 8000310:	3710      	adds	r7, #16
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000

0800031c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <MX_CAN_Init+0x64>)
 8000322:	4a18      	ldr	r2, [pc, #96]	; (8000384 <MX_CAN_Init+0x68>)
 8000324:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <MX_CAN_Init+0x64>)
 8000328:	2204      	movs	r2, #4
 800032a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_CAN_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_CAN_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_CAN_Init+0x64>)
 800033a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800033e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_CAN_Init+0x64>)
 8000342:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000346:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_CAN_Init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_CAN_Init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_CAN_Init+0x64>)
 8000356:	2200      	movs	r2, #0
 8000358:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_CAN_Init+0x64>)
 800035c:	2200      	movs	r2, #0
 800035e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <MX_CAN_Init+0x64>)
 8000362:	2200      	movs	r2, #0
 8000364:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_CAN_Init+0x64>)
 8000368:	2200      	movs	r2, #0
 800036a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <MX_CAN_Init+0x64>)
 800036e:	f001 fbdd 	bl	8001b2c <HAL_CAN_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000378:	f000 f934 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000007c 	.word	0x2000007c
 8000384:	40006400 	.word	0x40006400

08000388 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000390:	f107 0314 	add.w	r3, r7, #20
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a18      	ldr	r2, [pc, #96]	; (8000408 <HAL_CAN_MspInit+0x80>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d129      	bne.n	80003fe <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <HAL_CAN_MspInit+0x84>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a17      	ldr	r2, [pc, #92]	; (800040c <HAL_CAN_MspInit+0x84>)
 80003b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <HAL_CAN_MspInit+0x84>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003be:	613b      	str	r3, [r7, #16]
 80003c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_CAN_MspInit+0x84>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a11      	ldr	r2, [pc, #68]	; (800040c <HAL_CAN_MspInit+0x84>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <HAL_CAN_MspInit+0x84>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80003da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e0:	2302      	movs	r3, #2
 80003e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e8:	2303      	movs	r3, #3
 80003ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80003ec:	2309      	movs	r3, #9
 80003ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	4619      	mov	r1, r3
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fa:	f001 fda5 	bl	8001f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80003fe:	bf00      	nop
 8000400:	3728      	adds	r7, #40	; 0x28
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40006400 	.word	0x40006400
 800040c:	40021000 	.word	0x40021000

08000410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 030c 	add.w	r3, r7, #12
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000426:	4b38      	ldr	r3, [pc, #224]	; (8000508 <MX_GPIO_Init+0xf8>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a37      	ldr	r2, [pc, #220]	; (8000508 <MX_GPIO_Init+0xf8>)
 800042c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b35      	ldr	r3, [pc, #212]	; (8000508 <MX_GPIO_Init+0xf8>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b32      	ldr	r3, [pc, #200]	; (8000508 <MX_GPIO_Init+0xf8>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a31      	ldr	r2, [pc, #196]	; (8000508 <MX_GPIO_Init+0xf8>)
 8000444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000448:	6153      	str	r3, [r2, #20]
 800044a:	4b2f      	ldr	r3, [pc, #188]	; (8000508 <MX_GPIO_Init+0xf8>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	4b2c      	ldr	r3, [pc, #176]	; (8000508 <MX_GPIO_Init+0xf8>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a2b      	ldr	r2, [pc, #172]	; (8000508 <MX_GPIO_Init+0xf8>)
 800045c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b29      	ldr	r3, [pc, #164]	; (8000508 <MX_GPIO_Init+0xf8>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEAR_CUT_Pin|GEAR_UP_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f001 fee0 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLUTCH_Pin|GEAR_DOWN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8000482:	4822      	ldr	r0, [pc, #136]	; (800050c <MX_GPIO_Init+0xfc>)
 8000484:	f001 feda 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_CUT_Pin;
 8000488:	2310      	movs	r3, #16
 800048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_CUT_GPIO_Port, &GPIO_InitStruct);
 8000498:	f107 030c 	add.w	r3, r7, #12
 800049c:	4619      	mov	r1, r3
 800049e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a2:	f001 fd51 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CLUTCH_Pin|GEAR_DOWN_Pin;
 80004a6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80004aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b4:	2303      	movs	r3, #3
 80004b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b8:	f107 030c 	add.w	r3, r7, #12
 80004bc:	4619      	mov	r1, r3
 80004be:	4813      	ldr	r0, [pc, #76]	; (800050c <MX_GPIO_Init+0xfc>)
 80004c0:	f001 fd42 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_UP_Pin;
 80004c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d2:	2303      	movs	r3, #3
 80004d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_UP_GPIO_Port, &GPIO_InitStruct);
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	4619      	mov	r1, r3
 80004dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e0:	f001 fd32 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	4619      	mov	r1, r3
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <MX_GPIO_Init+0xfc>)
 80004fc:	f001 fd24 	bl	8001f48 <HAL_GPIO_Init>

}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000
 800050c:	48000400 	.word	0x48000400

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 f952 	bl	80007bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f809 	bl	800052e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f7ff ff78 	bl	8000410 <MX_GPIO_Init>
  MX_CAN_Init();
 8000520:	f7ff fefc 	bl	800031c <MX_CAN_Init>
  MX_OPAMP1_Init();
 8000524:	f000 f864 	bl	80005f0 <MX_OPAMP1_Init>
  MX_ADC1_Init();
 8000528:	f7ff fe64 	bl	80001f4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x1c>

0800052e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b09e      	sub	sp, #120	; 0x78
 8000532:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000534:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000538:	2228      	movs	r2, #40	; 0x28
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fb0f 	bl	8003b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000552:	463b      	mov	r3, r7
 8000554:	223c      	movs	r2, #60	; 0x3c
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f003 fb01 	bl	8003b60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055e:	2301      	movs	r3, #1
 8000560:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000562:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000566:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000568:	2301      	movs	r3, #1
 800056a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800057a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800057e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000584:	4618      	mov	r0, r3
 8000586:	f001 ff15 	bl	80023b4 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000590:	f000 f828 	bl	80005e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005ae:	2102      	movs	r1, #2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 ff3d 	bl	8003430 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005bc:	f000 f812 	bl	80005e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80005c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f917 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005d8:	f000 f804 	bl	80005e4 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3778      	adds	r7, #120	; 0x78
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e8:	b672      	cpsid	i
}
 80005ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ec:	e7fe      	b.n	80005ec <Error_Handler+0x8>
	...

080005f0 <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_OPAMP1_Init+0x38>)
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <MX_OPAMP1_Init+0x3c>)
 80005f8:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_OPAMP1_Init+0x38>)
 80005fc:	2260      	movs	r2, #96	; 0x60
 80005fe:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_OPAMP1_Init+0x38>)
 8000602:	220c      	movs	r2, #12
 8000604:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_OPAMP1_Init+0x38>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_OPAMP1_Init+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_OPAMP1_Init+0x38>)
 8000614:	f001 fe2a 	bl	800226c <HAL_OPAMP_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 800061e:	f7ff ffe1 	bl	80005e4 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000a4 	.word	0x200000a4
 800062c:	40010038 	.word	0x40010038

08000630 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <HAL_OPAMP_MspInit+0x5c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d118      	bne.n	8000684 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_OPAMP_MspInit+0x60>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_OPAMP_MspInit+0x60>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_OPAMP_MspInit+0x60>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GEAR_POS_Pin|GPIO_PIN_2;
 800066a:	2306      	movs	r3, #6
 800066c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066e:	2303      	movs	r3, #3
 8000670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f001 fc62 	bl	8001f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40010038 	.word	0x40010038
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x44>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_MspInit+0x44>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x44>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x44>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_MspInit+0x44>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x44>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000728:	f000 f88e 	bl	8000848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000734:	4802      	ldr	r0, [pc, #8]	; (8000740 <ADC1_2_IRQHandler+0x10>)
 8000736:	f000 faa9 	bl	8000c8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000002c 	.word	0x2000002c

08000744 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <SystemInit+0x20>)
 800074a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <SystemInit+0x20>)
 8000750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800076c:	f7ff ffea 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	; (80007a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <LoopForever+0xe>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <LoopForever+0x16>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000796:	f003 f9eb 	bl	8003b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800079a:	f7ff feb9 	bl	8000510 <main>

0800079e <LoopForever>:

LoopForever:
    b LoopForever
 800079e:	e7fe      	b.n	800079e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007ac:	08003c08 	.word	0x08003c08
  ldr r2, =_sbss
 80007b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007b4:	200000dc 	.word	0x200000dc

080007b8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC3_IRQHandler>
	...

080007bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_Init+0x28>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <HAL_Init+0x28>)
 80007c6:	f043 0310 	orr.w	r3, r3, #16
 80007ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f001 fb79 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 f808 	bl	80007e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d8:	f7ff ff5c 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40022000 	.word	0x40022000

080007e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_InitTick+0x54>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x58>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fb91 	bl	8001f2e <HAL_SYSTICK_Config>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e00e      	b.n	8000834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d80a      	bhi.n	8000832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f001 fb59 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <HAL_InitTick+0x5c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e000      	b.n	8000834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000000 	.word	0x20000000
 8000840:	20000008 	.word	0x20000008
 8000844:	20000004 	.word	0x20000004

08000848 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x20>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x24>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_IncTick+0x24>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008
 800086c:	200000d8 	.word	0x200000d8

08000870 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;  
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_GetTick+0x14>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	200000d8 	.word	0x200000d8

08000888 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09a      	sub	sp, #104	; 0x68
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80008be:	2300      	movs	r3, #0
 80008c0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e1c9      	b.n	8000c64 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d176      	bne.n	80009d0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d152      	bne.n	8000990 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff fce5 	bl	80002d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d13b      	bne.n	8000990 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f001 f8a1 	bl	8001a60 <ADC_Disable>
 800091e:	4603      	mov	r3, r0
 8000920:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f003 0310 	and.w	r3, r3, #16
 800092c:	2b00      	cmp	r3, #0
 800092e:	d12f      	bne.n	8000990 <HAL_ADC_Init+0xe0>
 8000930:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000934:	2b00      	cmp	r3, #0
 8000936:	d12b      	bne.n	8000990 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000940:	f023 0302 	bic.w	r3, r3, #2
 8000944:	f043 0202 	orr.w	r2, r3, #2
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800095a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800096a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800096c:	4b86      	ldr	r3, [pc, #536]	; (8000b88 <HAL_ADC_Init+0x2d8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a86      	ldr	r2, [pc, #536]	; (8000b8c <HAL_ADC_Init+0x2dc>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9a      	lsrs	r2, r3, #18
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000982:	e002      	b.n	800098a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	3b01      	subs	r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1f9      	bne.n	8000984 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d007      	beq.n	80009ae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80009a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009ac:	d110      	bne.n	80009d0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f023 0312 	bic.w	r3, r3, #18
 80009b6:	f043 0210 	orr.w	r2, r3, #16
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f043 0201 	orr.w	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	f003 0310 	and.w	r3, r3, #16
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f040 8136 	bne.w	8000c4a <HAL_ADC_Init+0x39a>
 80009de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f040 8131 	bne.w	8000c4a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f040 8129 	bne.w	8000c4a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000a00:	f043 0202 	orr.w	r2, r3, #2
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a10:	d004      	beq.n	8000a1c <HAL_ADC_Init+0x16c>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a5e      	ldr	r2, [pc, #376]	; (8000b90 <HAL_ADC_Init+0x2e0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d101      	bne.n	8000a20 <HAL_ADC_Init+0x170>
 8000a1c:	4b5d      	ldr	r3, [pc, #372]	; (8000b94 <HAL_ADC_Init+0x2e4>)
 8000a1e:	e000      	b.n	8000a22 <HAL_ADC_Init+0x172>
 8000a20:	4b5d      	ldr	r3, [pc, #372]	; (8000b98 <HAL_ADC_Init+0x2e8>)
 8000a22:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a2c:	d102      	bne.n	8000a34 <HAL_ADC_Init+0x184>
 8000a2e:	4b58      	ldr	r3, [pc, #352]	; (8000b90 <HAL_ADC_Init+0x2e0>)
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	e01a      	b.n	8000a6a <HAL_ADC_Init+0x1ba>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a55      	ldr	r2, [pc, #340]	; (8000b90 <HAL_ADC_Init+0x2e0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d103      	bne.n	8000a46 <HAL_ADC_Init+0x196>
 8000a3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	e011      	b.n	8000a6a <HAL_ADC_Init+0x1ba>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a54      	ldr	r2, [pc, #336]	; (8000b9c <HAL_ADC_Init+0x2ec>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d102      	bne.n	8000a56 <HAL_ADC_Init+0x1a6>
 8000a50:	4b53      	ldr	r3, [pc, #332]	; (8000ba0 <HAL_ADC_Init+0x2f0>)
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	e009      	b.n	8000a6a <HAL_ADC_Init+0x1ba>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a51      	ldr	r2, [pc, #324]	; (8000ba0 <HAL_ADC_Init+0x2f0>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d102      	bne.n	8000a66 <HAL_ADC_Init+0x1b6>
 8000a60:	4b4e      	ldr	r3, [pc, #312]	; (8000b9c <HAL_ADC_Init+0x2ec>)
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	e001      	b.n	8000a6a <HAL_ADC_Init+0x1ba>
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f003 0303 	and.w	r3, r3, #3
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d108      	bne.n	8000a8a <HAL_ADC_Init+0x1da>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d101      	bne.n	8000a8a <HAL_ADC_Init+0x1da>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <HAL_ADC_Init+0x1dc>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11c      	bne.n	8000aca <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a90:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d010      	beq.n	8000ab8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d107      	bne.n	8000ab2 <HAL_ADC_Init+0x202>
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d101      	bne.n	8000ab2 <HAL_ADC_Init+0x202>
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <HAL_ADC_Init+0x204>
 8000ab2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d108      	bne.n	8000aca <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ac8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7e5b      	ldrb	r3, [r3, #25]
 8000ace:	035b      	lsls	r3, r3, #13
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ad4:	2a01      	cmp	r2, #1
 8000ad6:	d002      	beq.n	8000ade <HAL_ADC_Init+0x22e>
 8000ad8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000adc:	e000      	b.n	8000ae0 <HAL_ADC_Init+0x230>
 8000ade:	2200      	movs	r2, #0
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000af0:	4313      	orrs	r3, r2
 8000af2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d11b      	bne.n	8000b36 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7e5b      	ldrb	r3, [r3, #25]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d109      	bne.n	8000b1a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	045a      	lsls	r2, r3, #17
 8000b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b10:	4313      	orrs	r3, r2
 8000b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b16:	663b      	str	r3, [r7, #96]	; 0x60
 8000b18:	e00d      	b.n	8000b36 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000b22:	f043 0220 	orr.w	r2, r3, #32
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f043 0201 	orr.w	r2, r3, #1
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d03a      	beq.n	8000bb4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <HAL_ADC_Init+0x2ec>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d004      	beq.n	8000b52 <HAL_ADC_Init+0x2a2>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <HAL_ADC_Init+0x2f0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d128      	bne.n	8000ba4 <HAL_ADC_Init+0x2f4>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b56:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000b5a:	d012      	beq.n	8000b82 <HAL_ADC_Init+0x2d2>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b64:	d00a      	beq.n	8000b7c <HAL_ADC_Init+0x2cc>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000b6e:	d002      	beq.n	8000b76 <HAL_ADC_Init+0x2c6>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	e018      	b.n	8000ba8 <HAL_ADC_Init+0x2f8>
 8000b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7a:	e015      	b.n	8000ba8 <HAL_ADC_Init+0x2f8>
 8000b7c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000b80:	e012      	b.n	8000ba8 <HAL_ADC_Init+0x2f8>
 8000b82:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000b86:	e00f      	b.n	8000ba8 <HAL_ADC_Init+0x2f8>
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	431bde83 	.word	0x431bde83
 8000b90:	50000100 	.word	0x50000100
 8000b94:	50000300 	.word	0x50000300
 8000b98:	50000700 	.word	0x50000700
 8000b9c:	50000400 	.word	0x50000400
 8000ba0:	50000500 	.word	0x50000500
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000bac:	4313      	orrs	r3, r2
 8000bae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d114      	bne.n	8000bec <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bd0:	f023 0302 	bic.w	r3, r3, #2
 8000bd4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7e1b      	ldrb	r3, [r3, #24]
 8000bda:	039a      	lsls	r2, r3, #14
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4313      	orrs	r3, r2
 8000be6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000be8:	4313      	orrs	r3, r2
 8000bea:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_ADC_Init+0x3bc>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d10c      	bne.n	8000c22 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f023 010f 	bic.w	r1, r3, #15
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	1e5a      	subs	r2, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c20:	e007      	b.n	8000c32 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 020f 	bic.w	r2, r2, #15
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f023 0303 	bic.w	r3, r3, #3
 8000c40:	f043 0201 	orr.w	r2, r3, #1
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	641a      	str	r2, [r3, #64]	; 0x40
 8000c48:	e00a      	b.n	8000c60 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f023 0312 	bic.w	r3, r3, #18
 8000c52:	f043 0210 	orr.w	r2, r3, #16
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3768      	adds	r7, #104	; 0x68
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	fff0c007 	.word	0xfff0c007

08000c70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <HAL_ADC_IRQHandler+0x38>
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10b      	bne.n	8000cdc <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 80bc 	beq.w	8000e48 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0308 	and.w	r3, r3, #8
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 80b6 	beq.w	8000e48 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d105      	bne.n	8000cf4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cfc:	d004      	beq.n	8000d08 <HAL_ADC_IRQHandler+0x7c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a90      	ldr	r2, [pc, #576]	; (8000f44 <HAL_ADC_IRQHandler+0x2b8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d106      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x8a>
 8000d08:	4b8f      	ldr	r3, [pc, #572]	; (8000f48 <HAL_ADC_IRQHandler+0x2bc>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d03e      	beq.n	8000d92 <HAL_ADC_IRQHandler+0x106>
 8000d14:	e005      	b.n	8000d22 <HAL_ADC_IRQHandler+0x96>
 8000d16:	4b8d      	ldr	r3, [pc, #564]	; (8000f4c <HAL_ADC_IRQHandler+0x2c0>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d037      	beq.n	8000d92 <HAL_ADC_IRQHandler+0x106>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d2a:	d004      	beq.n	8000d36 <HAL_ADC_IRQHandler+0xaa>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a84      	ldr	r2, [pc, #528]	; (8000f44 <HAL_ADC_IRQHandler+0x2b8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d106      	bne.n	8000d44 <HAL_ADC_IRQHandler+0xb8>
 8000d36:	4b84      	ldr	r3, [pc, #528]	; (8000f48 <HAL_ADC_IRQHandler+0x2bc>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	2b05      	cmp	r3, #5
 8000d40:	d027      	beq.n	8000d92 <HAL_ADC_IRQHandler+0x106>
 8000d42:	e005      	b.n	8000d50 <HAL_ADC_IRQHandler+0xc4>
 8000d44:	4b81      	ldr	r3, [pc, #516]	; (8000f4c <HAL_ADC_IRQHandler+0x2c0>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 031f 	and.w	r3, r3, #31
 8000d4c:	2b05      	cmp	r3, #5
 8000d4e:	d020      	beq.n	8000d92 <HAL_ADC_IRQHandler+0x106>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d58:	d004      	beq.n	8000d64 <HAL_ADC_IRQHandler+0xd8>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a79      	ldr	r2, [pc, #484]	; (8000f44 <HAL_ADC_IRQHandler+0x2b8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d106      	bne.n	8000d72 <HAL_ADC_IRQHandler+0xe6>
 8000d64:	4b78      	ldr	r3, [pc, #480]	; (8000f48 <HAL_ADC_IRQHandler+0x2bc>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 031f 	and.w	r3, r3, #31
 8000d6c:	2b09      	cmp	r3, #9
 8000d6e:	d010      	beq.n	8000d92 <HAL_ADC_IRQHandler+0x106>
 8000d70:	e005      	b.n	8000d7e <HAL_ADC_IRQHandler+0xf2>
 8000d72:	4b76      	ldr	r3, [pc, #472]	; (8000f4c <HAL_ADC_IRQHandler+0x2c0>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 031f 	and.w	r3, r3, #31
 8000d7a:	2b09      	cmp	r3, #9
 8000d7c:	d009      	beq.n	8000d92 <HAL_ADC_IRQHandler+0x106>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d86:	d004      	beq.n	8000d92 <HAL_ADC_IRQHandler+0x106>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a70      	ldr	r2, [pc, #448]	; (8000f50 <HAL_ADC_IRQHandler+0x2c4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d104      	bne.n	8000d9c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	e00f      	b.n	8000dbc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da4:	d004      	beq.n	8000db0 <HAL_ADC_IRQHandler+0x124>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a66      	ldr	r2, [pc, #408]	; (8000f44 <HAL_ADC_IRQHandler+0x2b8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d102      	bne.n	8000db6 <HAL_ADC_IRQHandler+0x12a>
 8000db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db4:	e000      	b.n	8000db8 <HAL_ADC_IRQHandler+0x12c>
 8000db6:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <HAL_ADC_IRQHandler+0x2c4>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d137      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d132      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d02d      	beq.n	8000e3a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d11a      	bne.n	8000e22 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 020c 	bic.w	r2, r2, #12
 8000dfa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d112      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f043 0201 	orr.w	r2, r3, #1
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e20:	e00b      	b.n	8000e3a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f043 0210 	orr.w	r2, r3, #16
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f043 0201 	orr.w	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff f9c4 	bl	80001c8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	220c      	movs	r2, #12
 8000e46:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d004      	beq.n	8000e5c <HAL_ADC_IRQHandler+0x1d0>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f003 0320 	and.w	r3, r3, #32
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10b      	bne.n	8000e74 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8138 	beq.w	80010d8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8132 	beq.w	80010d8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e88:	d004      	beq.n	8000e94 <HAL_ADC_IRQHandler+0x208>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a2d      	ldr	r2, [pc, #180]	; (8000f44 <HAL_ADC_IRQHandler+0x2b8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d106      	bne.n	8000ea2 <HAL_ADC_IRQHandler+0x216>
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <HAL_ADC_IRQHandler+0x2bc>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 031f 	and.w	r3, r3, #31
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d03e      	beq.n	8000f1e <HAL_ADC_IRQHandler+0x292>
 8000ea0:	e005      	b.n	8000eae <HAL_ADC_IRQHandler+0x222>
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <HAL_ADC_IRQHandler+0x2c0>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 031f 	and.w	r3, r3, #31
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d037      	beq.n	8000f1e <HAL_ADC_IRQHandler+0x292>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eb6:	d004      	beq.n	8000ec2 <HAL_ADC_IRQHandler+0x236>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <HAL_ADC_IRQHandler+0x2b8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d106      	bne.n	8000ed0 <HAL_ADC_IRQHandler+0x244>
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <HAL_ADC_IRQHandler+0x2bc>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	d027      	beq.n	8000f1e <HAL_ADC_IRQHandler+0x292>
 8000ece:	e005      	b.n	8000edc <HAL_ADC_IRQHandler+0x250>
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <HAL_ADC_IRQHandler+0x2c0>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	d020      	beq.n	8000f1e <HAL_ADC_IRQHandler+0x292>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee4:	d004      	beq.n	8000ef0 <HAL_ADC_IRQHandler+0x264>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_ADC_IRQHandler+0x2b8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d106      	bne.n	8000efe <HAL_ADC_IRQHandler+0x272>
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_ADC_IRQHandler+0x2bc>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	2b09      	cmp	r3, #9
 8000efa:	d010      	beq.n	8000f1e <HAL_ADC_IRQHandler+0x292>
 8000efc:	e005      	b.n	8000f0a <HAL_ADC_IRQHandler+0x27e>
 8000efe:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_ADC_IRQHandler+0x2c0>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	2b09      	cmp	r3, #9
 8000f08:	d009      	beq.n	8000f1e <HAL_ADC_IRQHandler+0x292>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f12:	d004      	beq.n	8000f1e <HAL_ADC_IRQHandler+0x292>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_ADC_IRQHandler+0x2c4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d104      	bne.n	8000f28 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	e018      	b.n	8000f5a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f30:	d004      	beq.n	8000f3c <HAL_ADC_IRQHandler+0x2b0>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <HAL_ADC_IRQHandler+0x2b8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d10b      	bne.n	8000f54 <HAL_ADC_IRQHandler+0x2c8>
 8000f3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f40:	e009      	b.n	8000f56 <HAL_ADC_IRQHandler+0x2ca>
 8000f42:	bf00      	nop
 8000f44:	50000100 	.word	0x50000100
 8000f48:	50000300 	.word	0x50000300
 8000f4c:	50000700 	.word	0x50000700
 8000f50:	50000400 	.word	0x50000400
 8000f54:	4b92      	ldr	r3, [pc, #584]	; (80011a0 <HAL_ADC_IRQHandler+0x514>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f040 80b0 	bne.w	80010ca <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00d      	beq.n	8000f90 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 80a3 	bne.w	80010ca <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f040 809d 	bne.w	80010ca <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8097 	beq.w	80010ca <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fa4:	d004      	beq.n	8000fb0 <HAL_ADC_IRQHandler+0x324>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a7e      	ldr	r2, [pc, #504]	; (80011a4 <HAL_ADC_IRQHandler+0x518>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d106      	bne.n	8000fbe <HAL_ADC_IRQHandler+0x332>
 8000fb0:	4b7d      	ldr	r3, [pc, #500]	; (80011a8 <HAL_ADC_IRQHandler+0x51c>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d03e      	beq.n	800103a <HAL_ADC_IRQHandler+0x3ae>
 8000fbc:	e005      	b.n	8000fca <HAL_ADC_IRQHandler+0x33e>
 8000fbe:	4b7b      	ldr	r3, [pc, #492]	; (80011ac <HAL_ADC_IRQHandler+0x520>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d037      	beq.n	800103a <HAL_ADC_IRQHandler+0x3ae>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fd2:	d004      	beq.n	8000fde <HAL_ADC_IRQHandler+0x352>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a72      	ldr	r2, [pc, #456]	; (80011a4 <HAL_ADC_IRQHandler+0x518>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d106      	bne.n	8000fec <HAL_ADC_IRQHandler+0x360>
 8000fde:	4b72      	ldr	r3, [pc, #456]	; (80011a8 <HAL_ADC_IRQHandler+0x51c>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 031f 	and.w	r3, r3, #31
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d027      	beq.n	800103a <HAL_ADC_IRQHandler+0x3ae>
 8000fea:	e005      	b.n	8000ff8 <HAL_ADC_IRQHandler+0x36c>
 8000fec:	4b6f      	ldr	r3, [pc, #444]	; (80011ac <HAL_ADC_IRQHandler+0x520>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	2b06      	cmp	r3, #6
 8000ff6:	d020      	beq.n	800103a <HAL_ADC_IRQHandler+0x3ae>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001000:	d004      	beq.n	800100c <HAL_ADC_IRQHandler+0x380>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a67      	ldr	r2, [pc, #412]	; (80011a4 <HAL_ADC_IRQHandler+0x518>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d106      	bne.n	800101a <HAL_ADC_IRQHandler+0x38e>
 800100c:	4b66      	ldr	r3, [pc, #408]	; (80011a8 <HAL_ADC_IRQHandler+0x51c>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 031f 	and.w	r3, r3, #31
 8001014:	2b07      	cmp	r3, #7
 8001016:	d010      	beq.n	800103a <HAL_ADC_IRQHandler+0x3ae>
 8001018:	e005      	b.n	8001026 <HAL_ADC_IRQHandler+0x39a>
 800101a:	4b64      	ldr	r3, [pc, #400]	; (80011ac <HAL_ADC_IRQHandler+0x520>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	2b07      	cmp	r3, #7
 8001024:	d009      	beq.n	800103a <HAL_ADC_IRQHandler+0x3ae>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800102e:	d004      	beq.n	800103a <HAL_ADC_IRQHandler+0x3ae>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a5a      	ldr	r2, [pc, #360]	; (80011a0 <HAL_ADC_IRQHandler+0x514>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d104      	bne.n	8001044 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e00f      	b.n	8001064 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800104c:	d004      	beq.n	8001058 <HAL_ADC_IRQHandler+0x3cc>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a54      	ldr	r2, [pc, #336]	; (80011a4 <HAL_ADC_IRQHandler+0x518>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d102      	bne.n	800105e <HAL_ADC_IRQHandler+0x3d2>
 8001058:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800105c:	e000      	b.n	8001060 <HAL_ADC_IRQHandler+0x3d4>
 800105e:	4b50      	ldr	r3, [pc, #320]	; (80011a0 <HAL_ADC_IRQHandler+0x514>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d12d      	bne.n	80010ca <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d11a      	bne.n	80010b2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800108a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d112      	bne.n	80010ca <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f043 0201 	orr.w	r2, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	641a      	str	r2, [r3, #64]	; 0x40
 80010b0:	e00b      	b.n	80010ca <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f043 0210 	orr.w	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f043 0201 	orr.w	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f8c4 	bl	8001258 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2260      	movs	r2, #96	; 0x60
 80010d6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d011      	beq.n	8001106 <HAL_ADC_IRQHandler+0x47a>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00c      	beq.n	8001106 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff fbc5 	bl	8000888 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d012      	beq.n	8001136 <HAL_ADC_IRQHandler+0x4aa>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00d      	beq.n	8001136 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f8aa 	bl	8001280 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001134:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800113c:	2b00      	cmp	r3, #0
 800113e:	d012      	beq.n	8001166 <HAL_ADC_IRQHandler+0x4da>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00d      	beq.n	8001166 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f89c 	bl	8001294 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	2b00      	cmp	r3, #0
 800116e:	d04f      	beq.n	8001210 <HAL_ADC_IRQHandler+0x584>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b00      	cmp	r3, #0
 8001178:	d04a      	beq.n	8001210 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	2b01      	cmp	r3, #1
 8001180:	d102      	bne.n	8001188 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001182:	2301      	movs	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e02d      	b.n	80011e4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001190:	d004      	beq.n	800119c <HAL_ADC_IRQHandler+0x510>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_ADC_IRQHandler+0x518>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d109      	bne.n	80011b0 <HAL_ADC_IRQHandler+0x524>
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <HAL_ADC_IRQHandler+0x51c>)
 800119e:	e008      	b.n	80011b2 <HAL_ADC_IRQHandler+0x526>
 80011a0:	50000400 	.word	0x50000400
 80011a4:	50000100 	.word	0x50000100
 80011a8:	50000300 	.word	0x50000300
 80011ac:	50000700 	.word	0x50000700
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <HAL_ADC_IRQHandler+0x5c8>)
 80011b2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d10a      	bne.n	80011e4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80011ce:	2301      	movs	r3, #1
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	e007      	b.n	80011e4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80011e0:	2301      	movs	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10e      	bne.n	8001208 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f043 0202 	orr.w	r2, r3, #2
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fb4a 	bl	800089c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2210      	movs	r2, #16
 800120e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001216:	2b00      	cmp	r3, #0
 8001218:	d018      	beq.n	800124c <HAL_ADC_IRQHandler+0x5c0>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	f043 0208 	orr.w	r2, r3, #8
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001244:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f810 	bl	800126c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	50000700 	.word	0x50000700

08001258 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b09b      	sub	sp, #108	; 0x6c
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_ConfigChannel+0x22>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e2c8      	b.n	800185c <HAL_ADC_ConfigChannel+0x5b4>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f040 82ac 	bne.w	800183a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d81c      	bhi.n	8001324 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	461a      	mov	r2, r3
 80012fe:	231f      	movs	r3, #31
 8001300:	4093      	lsls	r3, r2
 8001302:	43db      	mvns	r3, r3
 8001304:	4019      	ands	r1, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
 8001322:	e063      	b.n	80013ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b09      	cmp	r3, #9
 800132a:	d81e      	bhi.n	800136a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	3b1e      	subs	r3, #30
 8001340:	221f      	movs	r2, #31
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	4019      	ands	r1, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	3b1e      	subs	r3, #30
 800135c:	fa00 f203 	lsl.w	r2, r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	635a      	str	r2, [r3, #52]	; 0x34
 8001368:	e040      	b.n	80013ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b0e      	cmp	r3, #14
 8001370:	d81e      	bhi.n	80013b0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	3b3c      	subs	r3, #60	; 0x3c
 8001386:	221f      	movs	r2, #31
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	4019      	ands	r1, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	3b3c      	subs	r3, #60	; 0x3c
 80013a2:	fa00 f203 	lsl.w	r2, r0, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	639a      	str	r2, [r3, #56]	; 0x38
 80013ae:	e01d      	b.n	80013ec <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	3b5a      	subs	r3, #90	; 0x5a
 80013c4:	221f      	movs	r2, #31
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	4019      	ands	r1, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	3b5a      	subs	r3, #90	; 0x5a
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 80e5 	bne.w	80015c6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b09      	cmp	r3, #9
 8001402:	d91c      	bls.n	800143e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6999      	ldr	r1, [r3, #24]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4613      	mov	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	3b1e      	subs	r3, #30
 8001416:	2207      	movs	r2, #7
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	4019      	ands	r1, r3
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6898      	ldr	r0, [r3, #8]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	3b1e      	subs	r3, #30
 8001430:	fa00 f203 	lsl.w	r2, r0, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	619a      	str	r2, [r3, #24]
 800143c:	e019      	b.n	8001472 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6959      	ldr	r1, [r3, #20]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	2207      	movs	r2, #7
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	4019      	ands	r1, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6898      	ldr	r0, [r3, #8]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	fa00 f203 	lsl.w	r2, r0, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	08db      	lsrs	r3, r3, #3
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	3b01      	subs	r3, #1
 8001490:	2b03      	cmp	r3, #3
 8001492:	d84f      	bhi.n	8001534 <HAL_ADC_ConfigChannel+0x28c>
 8001494:	a201      	add	r2, pc, #4	; (adr r2, 800149c <HAL_ADC_ConfigChannel+0x1f4>)
 8001496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149a:	bf00      	nop
 800149c:	080014ad 	.word	0x080014ad
 80014a0:	080014cf 	.word	0x080014cf
 80014a4:	080014f1 	.word	0x080014f1
 80014a8:	08001513 	.word	0x08001513
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014b2:	4b99      	ldr	r3, [pc, #612]	; (8001718 <HAL_ADC_ConfigChannel+0x470>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	0691      	lsls	r1, r2, #26
 80014bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014be:	430a      	orrs	r2, r1
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014ca:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014cc:	e07b      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014d4:	4b90      	ldr	r3, [pc, #576]	; (8001718 <HAL_ADC_ConfigChannel+0x470>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	0691      	lsls	r1, r2, #26
 80014de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014e0:	430a      	orrs	r2, r1
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80014ec:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014ee:	e06a      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014f6:	4b88      	ldr	r3, [pc, #544]	; (8001718 <HAL_ADC_ConfigChannel+0x470>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	0691      	lsls	r1, r2, #26
 8001500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001502:	430a      	orrs	r2, r1
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800150e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001510:	e059      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001518:	4b7f      	ldr	r3, [pc, #508]	; (8001718 <HAL_ADC_ConfigChannel+0x470>)
 800151a:	4013      	ands	r3, r2
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	0691      	lsls	r1, r2, #26
 8001522:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001524:	430a      	orrs	r2, r1
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001530:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001532:	e048      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	069b      	lsls	r3, r3, #26
 8001544:	429a      	cmp	r2, r3
 8001546:	d107      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001556:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800155e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	069b      	lsls	r3, r3, #26
 8001568:	429a      	cmp	r2, r3
 800156a:	d107      	bne.n	800157c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800157a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001582:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	069b      	lsls	r3, r3, #26
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800159e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	069b      	lsls	r3, r3, #26
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d107      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80015c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80015c4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d108      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x33e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x33e>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x340>
 80015e6:	2300      	movs	r3, #0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f040 8131 	bne.w	8001850 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d00f      	beq.n	8001616 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2201      	movs	r2, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43da      	mvns	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	400a      	ands	r2, r1
 8001610:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001614:	e049      	b.n	80016aa <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	409a      	lsls	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b09      	cmp	r3, #9
 8001636:	d91c      	bls.n	8001672 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6999      	ldr	r1, [r3, #24]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	3b1b      	subs	r3, #27
 800164a:	2207      	movs	r2, #7
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	4019      	ands	r1, r3
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	6898      	ldr	r0, [r3, #8]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	3b1b      	subs	r3, #27
 8001664:	fa00 f203 	lsl.w	r2, r0, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	619a      	str	r2, [r3, #24]
 8001670:	e01b      	b.n	80016aa <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6959      	ldr	r1, [r3, #20]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	2207      	movs	r2, #7
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	4019      	ands	r1, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6898      	ldr	r0, [r3, #8]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	fa00 f203 	lsl.w	r2, r0, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b2:	d004      	beq.n	80016be <HAL_ADC_ConfigChannel+0x416>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_ADC_ConfigChannel+0x474>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x41a>
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_ADC_ConfigChannel+0x478>)
 80016c0:	e000      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x41c>
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_ADC_ConfigChannel+0x47c>)
 80016c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d105      	bne.n	80016da <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d015      	beq.n	8001706 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016de:	2b11      	cmp	r3, #17
 80016e0:	d105      	bne.n	80016ee <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	f040 80ac 	bne.w	8001850 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80016f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 80a5 	bne.w	8001850 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170e:	d10b      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x480>
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_ADC_ConfigChannel+0x474>)
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e023      	b.n	800175e <HAL_ADC_ConfigChannel+0x4b6>
 8001716:	bf00      	nop
 8001718:	83fff000 	.word	0x83fff000
 800171c:	50000100 	.word	0x50000100
 8001720:	50000300 	.word	0x50000300
 8001724:	50000700 	.word	0x50000700
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_ADC_ConfigChannel+0x5c0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d103      	bne.n	800173a <HAL_ADC_ConfigChannel+0x492>
 8001732:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e011      	b.n	800175e <HAL_ADC_ConfigChannel+0x4b6>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a4b      	ldr	r2, [pc, #300]	; (800186c <HAL_ADC_ConfigChannel+0x5c4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <HAL_ADC_ConfigChannel+0x4a2>
 8001744:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <HAL_ADC_ConfigChannel+0x5c8>)
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e009      	b.n	800175e <HAL_ADC_ConfigChannel+0x4b6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a48      	ldr	r2, [pc, #288]	; (8001870 <HAL_ADC_ConfigChannel+0x5c8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <HAL_ADC_ConfigChannel+0x4b2>
 8001754:	4b45      	ldr	r3, [pc, #276]	; (800186c <HAL_ADC_ConfigChannel+0x5c4>)
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e001      	b.n	800175e <HAL_ADC_ConfigChannel+0x4b6>
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <HAL_ADC_ConfigChannel+0x4d6>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_ADC_ConfigChannel+0x4d6>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_ADC_ConfigChannel+0x4d8>
 800177e:	2300      	movs	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d150      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001784:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001786:	2b00      	cmp	r3, #0
 8001788:	d010      	beq.n	80017ac <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x4fe>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x4fe>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x500>
 80017a6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d13c      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b10      	cmp	r3, #16
 80017b2:	d11d      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x548>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017bc:	d118      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80017be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_ADC_ConfigChannel+0x5cc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <HAL_ADC_ConfigChannel+0x5d0>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	0c9a      	lsrs	r2, r3, #18
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017e0:	e002      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f9      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ee:	e02e      	b.n	800184e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b11      	cmp	r3, #17
 80017f6:	d10b      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x568>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001800:	d106      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800180a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800180c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800180e:	e01e      	b.n	800184e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b12      	cmp	r3, #18
 8001816:	d11a      	bne.n	800184e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001822:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001824:	e013      	b.n	800184e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f043 0220 	orr.w	r2, r3, #32
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001838:	e00a      	b.n	8001850 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f043 0220 	orr.w	r2, r3, #32
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800184c:	e000      	b.n	8001850 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800184e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001858:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800185c:	4618      	mov	r0, r3
 800185e:	376c      	adds	r7, #108	; 0x6c
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	50000100 	.word	0x50000100
 800186c:	50000400 	.word	0x50000400
 8001870:	50000500 	.word	0x50000500
 8001874:	20000000 	.word	0x20000000
 8001878:	431bde83 	.word	0x431bde83

0800187c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800187c:	b480      	push	{r7}
 800187e:	b099      	sub	sp, #100	; 0x64
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001894:	d102      	bne.n	800189c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001896:	4b6d      	ldr	r3, [pc, #436]	; (8001a4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	e01a      	b.n	80018d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a6a      	ldr	r2, [pc, #424]	; (8001a4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d103      	bne.n	80018ae <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80018a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	e011      	b.n	80018d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a67      	ldr	r2, [pc, #412]	; (8001a50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80018b8:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	e009      	b.n	80018d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a64      	ldr	r2, [pc, #400]	; (8001a54 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d102      	bne.n	80018ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80018c8:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	e001      	b.n	80018d2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0b0      	b.n	8001a3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e0a9      	b.n	8001a3e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f040 808d 	bne.w	8001a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8086 	bne.w	8001a1c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001918:	d004      	beq.n	8001924 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a4b      	ldr	r2, [pc, #300]	; (8001a4c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001924:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001926:	e000      	b.n	800192a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001928:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800192a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d040      	beq.n	80019b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6859      	ldr	r1, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001946:	035b      	lsls	r3, r3, #13
 8001948:	430b      	orrs	r3, r1
 800194a:	431a      	orrs	r2, r3
 800194c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800194e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d108      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001970:	2300      	movs	r3, #0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d15c      	bne.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d101      	bne.n	8001992 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001992:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001994:	2b00      	cmp	r3, #0
 8001996:	d14b      	bne.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80019a0:	f023 030f 	bic.w	r3, r3, #15
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	6811      	ldr	r1, [r2, #0]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	6892      	ldr	r2, [r2, #8]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019b4:	e03c      	b.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80019b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019c0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d108      	bne.n	80019e2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80019e2:	2300      	movs	r3, #0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d123      	bne.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d107      	bne.n	8001a04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001a04:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d112      	bne.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a12:	f023 030f 	bic.w	r3, r3, #15
 8001a16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a18:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a1a:	e009      	b.n	8001a30 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001a2e:	e000      	b.n	8001a32 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a30:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3764      	adds	r7, #100	; 0x64
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	50000100 	.word	0x50000100
 8001a50:	50000400 	.word	0x50000400
 8001a54:	50000500 	.word	0x50000500
 8001a58:	50000300 	.word	0x50000300
 8001a5c:	50000700 	.word	0x50000700

08001a60 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d108      	bne.n	8001a8c <ADC_Disable+0x2c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <ADC_Disable+0x2c>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <ADC_Disable+0x2e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d047      	beq.n	8001b22 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030d 	and.w	r3, r3, #13
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d10f      	bne.n	8001ac0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0202 	orr.w	r2, r2, #2
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ab8:	f7fe feda 	bl	8000870 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001abe:	e029      	b.n	8001b14 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f043 0210 	orr.w	r2, r3, #16
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e023      	b.n	8001b24 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001adc:	f7fe fec8 	bl	8000870 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d914      	bls.n	8001b14 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d10d      	bne.n	8001b14 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0210 	orr.w	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e007      	b.n	8001b24 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d0dc      	beq.n	8001adc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0ed      	b.n	8001d1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7fe fc1c 	bl	8000388 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b60:	f7fe fe86 	bl	8000870 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b66:	e012      	b.n	8001b8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b68:	f7fe fe82 	bl	8000870 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b0a      	cmp	r3, #10
 8001b74:	d90b      	bls.n	8001b8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2205      	movs	r2, #5
 8001b86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0c5      	b.n	8001d1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0e5      	beq.n	8001b68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0202 	bic.w	r2, r2, #2
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bac:	f7fe fe60 	bl	8000870 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bb2:	e012      	b.n	8001bda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bb4:	f7fe fe5c 	bl	8000870 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b0a      	cmp	r3, #10
 8001bc0:	d90b      	bls.n	8001bda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e09f      	b.n	8001d1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e5      	bne.n	8001bb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7e1b      	ldrb	r3, [r3, #24]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e007      	b.n	8001c12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7e5b      	ldrb	r3, [r3, #25]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d108      	bne.n	8001c2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e007      	b.n	8001c3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7e9b      	ldrb	r3, [r3, #26]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d108      	bne.n	8001c56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0220 	orr.w	r2, r2, #32
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	e007      	b.n	8001c66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0220 	bic.w	r2, r2, #32
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	7edb      	ldrb	r3, [r3, #27]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d108      	bne.n	8001c80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0210 	bic.w	r2, r2, #16
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e007      	b.n	8001c90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0210 	orr.w	r2, r2, #16
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7f1b      	ldrb	r3, [r3, #28]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d108      	bne.n	8001caa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0208 	orr.w	r2, r2, #8
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e007      	b.n	8001cba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0208 	bic.w	r2, r2, #8
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7f5b      	ldrb	r3, [r3, #29]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d108      	bne.n	8001cd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0204 	orr.w	r2, r2, #4
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e007      	b.n	8001ce4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0204 	bic.w	r2, r2, #4
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	ea42 0103 	orr.w	r1, r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	1e5a      	subs	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ff8e 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff29 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff3e 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff8e 	bl	8001e18 <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5d 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff31 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f56:	e154      	b.n	8002202 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8146 	beq.w	80021fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d005      	beq.n	8001f88 <HAL_GPIO_Init+0x40>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d130      	bne.n	8001fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f003 0201 	and.w	r2, r3, #1
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d017      	beq.n	8002026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d123      	bne.n	800207a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	08da      	lsrs	r2, r3, #3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3208      	adds	r2, #8
 8002074:	6939      	ldr	r1, [r7, #16]
 8002076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	2203      	movs	r2, #3
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	4013      	ands	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0203 	and.w	r2, r3, #3
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80a0 	beq.w	80021fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020bc:	4b58      	ldr	r3, [pc, #352]	; (8002220 <HAL_GPIO_Init+0x2d8>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a57      	ldr	r2, [pc, #348]	; (8002220 <HAL_GPIO_Init+0x2d8>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b55      	ldr	r3, [pc, #340]	; (8002220 <HAL_GPIO_Init+0x2d8>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d4:	4a53      	ldr	r2, [pc, #332]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020fe:	d019      	beq.n	8002134 <HAL_GPIO_Init+0x1ec>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a49      	ldr	r2, [pc, #292]	; (8002228 <HAL_GPIO_Init+0x2e0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d013      	beq.n	8002130 <HAL_GPIO_Init+0x1e8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a48      	ldr	r2, [pc, #288]	; (800222c <HAL_GPIO_Init+0x2e4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00d      	beq.n	800212c <HAL_GPIO_Init+0x1e4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a47      	ldr	r2, [pc, #284]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d007      	beq.n	8002128 <HAL_GPIO_Init+0x1e0>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a46      	ldr	r2, [pc, #280]	; (8002234 <HAL_GPIO_Init+0x2ec>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_GPIO_Init+0x1dc>
 8002120:	2304      	movs	r3, #4
 8002122:	e008      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002124:	2305      	movs	r3, #5
 8002126:	e006      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002128:	2303      	movs	r3, #3
 800212a:	e004      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 800212c:	2302      	movs	r3, #2
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002134:	2300      	movs	r3, #0
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	f002 0203 	and.w	r2, r2, #3
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	4093      	lsls	r3, r2
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002146:	4937      	ldr	r1, [pc, #220]	; (8002224 <HAL_GPIO_Init+0x2dc>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002154:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002178:	4a2f      	ldr	r2, [pc, #188]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217e:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021a2:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021cc:	4a1a      	ldr	r2, [pc, #104]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021f6:	4a10      	ldr	r2, [pc, #64]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	f47f aea3 	bne.w	8001f58 <HAL_GPIO_Init+0x10>
  }
}
 8002212:	bf00      	nop
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40021000 	.word	0x40021000
 8002224:	40010000 	.word	0x40010000
 8002228:	48000400 	.word	0x48000400
 800222c:	48000800 	.word	0x48000800
 8002230:	48000c00 	.word	0x48000c00
 8002234:	48001000 	.word	0x48001000
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002258:	e002      	b.n	8002260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e08f      	b.n	80023a2 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b05      	cmp	r3, #5
 800228c:	d101      	bne.n	8002292 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e087      	b.n	80023a2 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d101      	bne.n	80022a2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07f      	b.n	80023a2 <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a8:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_OPAMP_Init+0x140>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a3f      	ldr	r2, [pc, #252]	; (80023ac <HAL_OPAMP_Init+0x140>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_OPAMP_Init+0x140>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d103      	bne.n	80022d4 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe f9ab 	bl	8000630 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b40      	cmp	r3, #64	; 0x40
 80022e0:	d003      	beq.n	80022ea <HAL_OPAMP_Init+0x7e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b60      	cmp	r3, #96	; 0x60
 80022e8:	d125      	bne.n	8002336 <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_OPAMP_Init+0x144>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6851      	ldr	r1, [r2, #4]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68d2      	ldr	r2, [r2, #12]
 80022fc:	4311      	orrs	r1, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6912      	ldr	r2, [r2, #16]
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6992      	ldr	r2, [r2, #24]
 8002308:	4311      	orrs	r1, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	69d2      	ldr	r2, [r2, #28]
 800230e:	4311      	orrs	r1, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6a12      	ldr	r2, [r2, #32]
 8002314:	4311      	orrs	r1, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800231a:	4311      	orrs	r1, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002320:	04d2      	lsls	r2, r2, #19
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002328:	0612      	lsls	r2, r2, #24
 800232a:	4311      	orrs	r1, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	430b      	orrs	r3, r1
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e02a      	b.n	800238c <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_OPAMP_Init+0x144>)
 800233e:	4013      	ands	r3, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6851      	ldr	r1, [r2, #4]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6892      	ldr	r2, [r2, #8]
 8002348:	4311      	orrs	r1, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68d2      	ldr	r2, [r2, #12]
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6912      	ldr	r2, [r2, #16]
 8002354:	4311      	orrs	r1, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6952      	ldr	r2, [r2, #20]
 800235a:	4311      	orrs	r1, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6992      	ldr	r2, [r2, #24]
 8002360:	4311      	orrs	r1, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	69d2      	ldr	r2, [r2, #28]
 8002366:	4311      	orrs	r1, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6a12      	ldr	r2, [r2, #32]
 800236c:	4311      	orrs	r1, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002378:	04d2      	lsls	r2, r2, #19
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002380:	0612      	lsls	r2, r2, #24
 8002382:	4311      	orrs	r1, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	e0003811 	.word	0xe0003811

080023b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f001 b823 	b.w	8003420 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 817d 	beq.w	80026ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023f0:	4bbc      	ldr	r3, [pc, #752]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00c      	beq.n	8002416 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023fc:	4bb9      	ldr	r3, [pc, #740]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d15c      	bne.n	80024c2 <HAL_RCC_OscConfig+0x10e>
 8002408:	4bb6      	ldr	r3, [pc, #728]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002414:	d155      	bne.n	80024c2 <HAL_RCC_OscConfig+0x10e>
 8002416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800241a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800242a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_RCC_OscConfig+0x94>
 8002442:	4ba8      	ldr	r3, [pc, #672]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	e015      	b.n	8002474 <HAL_RCC_OscConfig+0xc0>
 8002448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800245c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002460:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002464:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002470:	4b9c      	ldr	r3, [pc, #624]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002478:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800247c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002480:	fa92 f2a2 	rbit	r2, r2
 8002484:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002488:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800248c:	fab2 f282 	clz	r2, r2
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	f042 0220 	orr.w	r2, r2, #32
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	f002 021f 	and.w	r2, r2, #31
 800249c:	2101      	movs	r1, #1
 800249e:	fa01 f202 	lsl.w	r2, r1, r2
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 811f 	beq.w	80026e8 <HAL_RCC_OscConfig+0x334>
 80024aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 8116 	bne.w	80026e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	f000 bfaf 	b.w	8003420 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12e>
 80024d4:	4b83      	ldr	r3, [pc, #524]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a82      	ldr	r2, [pc, #520]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e036      	b.n	8002550 <HAL_RCC_OscConfig+0x19c>
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x158>
 80024f2:	4b7c      	ldr	r3, [pc, #496]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a7b      	ldr	r2, [pc, #492]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b79      	ldr	r3, [pc, #484]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a78      	ldr	r2, [pc, #480]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e021      	b.n	8002550 <HAL_RCC_OscConfig+0x19c>
 800250c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002510:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x184>
 800251e:	4b71      	ldr	r3, [pc, #452]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a70      	ldr	r2, [pc, #448]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b6e      	ldr	r3, [pc, #440]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6d      	ldr	r2, [pc, #436]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0x19c>
 8002538:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a69      	ldr	r2, [pc, #420]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b67      	ldr	r3, [pc, #412]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a66      	ldr	r2, [pc, #408]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002550:	4b64      	ldr	r3, [pc, #400]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f023 020f 	bic.w	r2, r3, #15
 8002558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	495f      	ldr	r1, [pc, #380]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 8002566:	4313      	orrs	r3, r2
 8002568:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d059      	beq.n	800262e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe f979 	bl	8000870 <HAL_GetTick>
 800257e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	e00a      	b.n	800259a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002584:	f7fe f974 	bl	8000870 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	d902      	bls.n	800259a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	f000 bf43 	b.w	8003420 <HAL_RCC_OscConfig+0x106c>
 800259a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800259e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d102      	bne.n	80025cc <HAL_RCC_OscConfig+0x218>
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	e015      	b.n	80025f8 <HAL_RCC_OscConfig+0x244>
 80025cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002600:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002604:	fa92 f2a2 	rbit	r2, r2
 8002608:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800260c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f002 021f 	and.w	r2, r2, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ab      	beq.n	8002584 <HAL_RCC_OscConfig+0x1d0>
 800262c:	e05d      	b.n	80026ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe f91f 	bl	8000870 <HAL_GetTick>
 8002632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	e00a      	b.n	800264e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe f91a 	bl	8000870 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	; 0x64
 8002646:	d902      	bls.n	800264e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	f000 bee9 	b.w	8003420 <HAL_RCC_OscConfig+0x106c>
 800264e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002652:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002662:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_RCC_OscConfig+0x2cc>
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e015      	b.n	80026ac <HAL_RCC_OscConfig+0x2f8>
 8002680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002684:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002698:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800269c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_RCC_OscConfig+0x330>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026b0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026b8:	fa92 f2a2 	rbit	r2, r2
 80026bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026c4:	fab2 f282 	clz	r2, r2
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	f042 0220 	orr.w	r2, r2, #32
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	f002 021f 	and.w	r2, r2, #31
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	4013      	ands	r3, r2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ab      	bne.n	8002638 <HAL_RCC_OscConfig+0x284>
 80026e0:	e003      	b.n	80026ea <HAL_RCC_OscConfig+0x336>
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 817d 	beq.w	80029fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002700:	4ba6      	ldr	r3, [pc, #664]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00b      	beq.n	8002724 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800270c:	4ba3      	ldr	r3, [pc, #652]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d172      	bne.n	80027fe <HAL_RCC_OscConfig+0x44a>
 8002718:	4ba0      	ldr	r3, [pc, #640]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d16c      	bne.n	80027fe <HAL_RCC_OscConfig+0x44a>
 8002724:	2302      	movs	r3, #2
 8002726:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002736:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_RCC_OscConfig+0x3a0>
 800274e:	4b93      	ldr	r3, [pc, #588]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	e013      	b.n	800277c <HAL_RCC_OscConfig+0x3c8>
 8002754:	2302      	movs	r3, #2
 8002756:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002766:	2302      	movs	r3, #2
 8002768:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800276c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002778:	4b88      	ldr	r3, [pc, #544]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2202      	movs	r2, #2
 800277e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002782:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002786:	fa92 f2a2 	rbit	r2, r2
 800278a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800278e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	f042 0220 	orr.w	r2, r2, #32
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCC_OscConfig+0x410>
 80027ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d002      	beq.n	80027c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	f000 be2e 	b.w	8003420 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	21f8      	movs	r1, #248	; 0xf8
 80027da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027e2:	fa91 f1a1 	rbit	r1, r1
 80027e6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027ee:	fab1 f181 	clz	r1, r1
 80027f2:	b2c9      	uxtb	r1, r1
 80027f4:	408b      	lsls	r3, r1
 80027f6:	4969      	ldr	r1, [pc, #420]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fc:	e0fd      	b.n	80029fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8088 	beq.w	8002920 <HAL_RCC_OscConfig+0x56c>
 8002810:	2301      	movs	r3, #1
 8002812:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002822:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002826:	fab3 f383 	clz	r3, r3
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002830:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	461a      	mov	r2, r3
 8002838:	2301      	movs	r3, #1
 800283a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe f818 	bl	8000870 <HAL_GetTick>
 8002840:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	e00a      	b.n	800285c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002846:	f7fe f813 	bl	8000870 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d902      	bls.n	800285c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	f000 bde2 	b.w	8003420 <HAL_RCC_OscConfig+0x106c>
 800285c:	2302      	movs	r3, #2
 800285e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800286e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d102      	bne.n	800288c <HAL_RCC_OscConfig+0x4d8>
 8002886:	4b45      	ldr	r3, [pc, #276]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	e013      	b.n	80028b4 <HAL_RCC_OscConfig+0x500>
 800288c:	2302      	movs	r3, #2
 800288e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800289e:	2302      	movs	r3, #2
 80028a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028b0:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2202      	movs	r2, #2
 80028b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028be:	fa92 f2a2 	rbit	r2, r2
 80028c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f042 0220 	orr.w	r2, r2, #32
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f002 021f 	and.w	r2, r2, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0af      	beq.n	8002846 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	21f8      	movs	r1, #248	; 0xf8
 80028fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002904:	fa91 f1a1 	rbit	r1, r1
 8002908:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800290c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002910:	fab1 f181 	clz	r1, r1
 8002914:	b2c9      	uxtb	r1, r1
 8002916:	408b      	lsls	r3, r1
 8002918:	4920      	ldr	r1, [pc, #128]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
 800291e:	e06c      	b.n	80029fa <HAL_RCC_OscConfig+0x646>
 8002920:	2301      	movs	r3, #1
 8002922:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002932:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002940:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	461a      	mov	r2, r3
 8002948:	2300      	movs	r3, #0
 800294a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fd ff90 	bl	8000870 <HAL_GetTick>
 8002950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002956:	f7fd ff8b 	bl	8000870 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d902      	bls.n	800296c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	f000 bd5a 	b.w	8003420 <HAL_RCC_OscConfig+0x106c>
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800297e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d104      	bne.n	80029a0 <HAL_RCC_OscConfig+0x5ec>
 8002996:	4b01      	ldr	r3, [pc, #4]	; (800299c <HAL_RCC_OscConfig+0x5e8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e015      	b.n	80029c8 <HAL_RCC_OscConfig+0x614>
 800299c:	40021000 	.word	0x40021000
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029b2:	2302      	movs	r3, #2
 80029b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029c4:	4bc8      	ldr	r3, [pc, #800]	; (8002ce8 <HAL_RCC_OscConfig+0x934>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	2202      	movs	r2, #2
 80029ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029d2:	fa92 f2a2 	rbit	r2, r2
 80029d6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029de:	fab2 f282 	clz	r2, r2
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	f042 0220 	orr.w	r2, r2, #32
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f002 021f 	and.w	r2, r2, #31
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1ad      	bne.n	8002956 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8110 	beq.w	8002c30 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d079      	beq.n	8002b14 <HAL_RCC_OscConfig+0x760>
 8002a20:	2301      	movs	r3, #1
 8002a22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4bab      	ldr	r3, [pc, #684]	; (8002cec <HAL_RCC_OscConfig+0x938>)
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	461a      	mov	r2, r3
 8002a46:	2301      	movs	r3, #1
 8002a48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7fd ff11 	bl	8000870 <HAL_GetTick>
 8002a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fd ff0c 	bl	8000870 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d902      	bls.n	8002a6a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	f000 bcdb 	b.w	8003420 <HAL_RCC_OscConfig+0x106c>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a84:	2202      	movs	r2, #2
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fa93 f2a3 	rbit	r2, r3
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	fa93 f2a3 	rbit	r2, r3
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ac2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x934>)
 8002ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ad0:	2102      	movs	r1, #2
 8002ad2:	6019      	str	r1, [r3, #0]
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f1a3 	rbit	r1, r3
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002aea:	6019      	str	r1, [r3, #0]
  return result;
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	2101      	movs	r1, #1
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0a0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x6a0>
 8002b12:	e08d      	b.n	8002c30 <HAL_RCC_OscConfig+0x87c>
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fa93 f2a3 	rbit	r2, r3
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b36:	601a      	str	r2, [r3, #0]
  return result;
 8002b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b40:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b68      	ldr	r3, [pc, #416]	; (8002cec <HAL_RCC_OscConfig+0x938>)
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	2300      	movs	r3, #0
 8002b54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7fd fe8b 	bl	8000870 <HAL_GetTick>
 8002b5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b60:	f7fd fe86 	bl	8000870 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d902      	bls.n	8002b76 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	f000 bc55 	b.w	8003420 <HAL_RCC_OscConfig+0x106c>
 8002b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b7e:	2202      	movs	r2, #2
 8002b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	fa93 f2a3 	rbit	r2, r3
 8002bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	fa93 f2a3 	rbit	r2, r3
 8002bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bdc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002be0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCC_OscConfig+0x934>)
 8002be4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bee:	2102      	movs	r1, #2
 8002bf0:	6019      	str	r1, [r3, #0]
 8002bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	fa93 f1a3 	rbit	r1, r3
 8002c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c04:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c08:	6019      	str	r1, [r3, #0]
  return result;
 8002c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	2101      	movs	r1, #1
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d197      	bne.n	8002b60 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 81a1 	beq.w	8002f88 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c4c:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_RCC_OscConfig+0x934>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d116      	bne.n	8002c86 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c58:	4b23      	ldr	r3, [pc, #140]	; (8002ce8 <HAL_RCC_OscConfig+0x934>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_RCC_OscConfig+0x934>)
 8002c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c62:	61d3      	str	r3, [r2, #28]
 8002c64:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_RCC_OscConfig+0x934>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c7e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <HAL_RCC_OscConfig+0x93c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11a      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <HAL_RCC_OscConfig+0x93c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <HAL_RCC_OscConfig+0x93c>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fd fde7 	bl	8000870 <HAL_GetTick>
 8002ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca6:	e009      	b.n	8002cbc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca8:	f7fd fde2 	bl	8000870 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e3b1      	b.n	8003420 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_RCC_OscConfig+0x93c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ef      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ccc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x940>
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <HAL_RCC_OscConfig+0x934>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4a02      	ldr	r2, [pc, #8]	; (8002ce8 <HAL_RCC_OscConfig+0x934>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6213      	str	r3, [r2, #32]
 8002ce4:	e03c      	b.n	8002d60 <HAL_RCC_OscConfig+0x9ac>
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	10908120 	.word	0x10908120
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x96a>
 8002d04:	4bc1      	ldr	r3, [pc, #772]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4ac0      	ldr	r2, [pc, #768]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	4bbe      	ldr	r3, [pc, #760]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4abd      	ldr	r2, [pc, #756]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d16:	f023 0304 	bic.w	r3, r3, #4
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	e020      	b.n	8002d60 <HAL_RCC_OscConfig+0x9ac>
 8002d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x994>
 8002d2e:	4bb7      	ldr	r3, [pc, #732]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4ab6      	ldr	r2, [pc, #728]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4bb4      	ldr	r3, [pc, #720]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4ab3      	ldr	r2, [pc, #716]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6213      	str	r3, [r2, #32]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_OscConfig+0x9ac>
 8002d48:	4bb0      	ldr	r3, [pc, #704]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4aaf      	ldr	r2, [pc, #700]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6213      	str	r3, [r2, #32]
 8002d54:	4bad      	ldr	r3, [pc, #692]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4aac      	ldr	r2, [pc, #688]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002d5a:	f023 0304 	bic.w	r3, r3, #4
 8002d5e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8081 	beq.w	8002e74 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d72:	f7fd fd7d 	bl	8000870 <HAL_GetTick>
 8002d76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	e00b      	b.n	8002d94 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fd fd78 	bl	8000870 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e345      	b.n	8003420 <HAL_RCC_OscConfig+0x106c>
 8002d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	fa93 f2a3 	rbit	r2, r3
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dda:	601a      	str	r2, [r3, #0]
  return result;
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002de4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d102      	bne.n	8002e00 <HAL_RCC_OscConfig+0xa4c>
 8002dfa:	4b84      	ldr	r3, [pc, #528]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	e013      	b.n	8002e28 <HAL_RCC_OscConfig+0xa74>
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e08:	2202      	movs	r2, #2
 8002e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	fa93 f2a3 	rbit	r2, r3
 8002e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	4b79      	ldr	r3, [pc, #484]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e30:	2102      	movs	r1, #2
 8002e32:	6011      	str	r1, [r2, #0]
 8002e34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	fa92 f1a2 	rbit	r1, r2
 8002e42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e46:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e4a:	6011      	str	r1, [r2, #0]
  return result;
 8002e4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e50:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d084      	beq.n	8002d7c <HAL_RCC_OscConfig+0x9c8>
 8002e72:	e07f      	b.n	8002f74 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e74:	f7fd fcfc 	bl	8000870 <HAL_GetTick>
 8002e78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fd fcf7 	bl	8000870 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e2c4      	b.n	8003420 <HAL_RCC_OscConfig+0x106c>
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	fa93 f2a3 	rbit	r2, r3
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	fa93 f2a3 	rbit	r2, r3
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002edc:	601a      	str	r2, [r3, #0]
  return result;
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ee6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f043 0302 	orr.w	r3, r3, #2
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_OscConfig+0xb4e>
 8002efc:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	e013      	b.n	8002f2a <HAL_RCC_OscConfig+0xb76>
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	fa93 f2a3 	rbit	r2, r3
 8002f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	4b39      	ldr	r3, [pc, #228]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f32:	2102      	movs	r1, #2
 8002f34:	6011      	str	r1, [r2, #0]
 8002f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	fa92 f1a2 	rbit	r1, r2
 8002f44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f4c:	6011      	str	r1, [r2, #0]
  return result;
 8002f4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f52:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	f002 021f 	and.w	r2, r2, #31
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d184      	bne.n	8002e7e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f74:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7c:	4b23      	ldr	r3, [pc, #140]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	4a22      	ldr	r2, [pc, #136]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8242 	beq.w	800341e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_RCC_OscConfig+0xc58>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	f000 8213 	beq.w	80033ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	f040 8162 	bne.w	800327e <HAL_RCC_OscConfig+0xeca>
 8002fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fa93 f2a3 	rbit	r2, r3
 8002fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fda:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fde:	601a      	str	r2, [r3, #0]
  return result;
 8002fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fe8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fd fc36 	bl	8000870 <HAL_GetTick>
 8003004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003008:	e00c      	b.n	8003024 <HAL_RCC_OscConfig+0xc70>
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003010:	f7fd fc2e 	bl	8000870 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1fd      	b.n	8003420 <HAL_RCC_OscConfig+0x106c>
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800302c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003048:	601a      	str	r2, [r3, #0]
  return result;
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003052:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_RCC_OscConfig+0xcba>
 8003068:	4bb0      	ldr	r3, [pc, #704]	; (800332c <HAL_RCC_OscConfig+0xf78>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	e027      	b.n	80030be <HAL_RCC_OscConfig+0xd0a>
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800309c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	4b9c      	ldr	r3, [pc, #624]	; (800332c <HAL_RCC_OscConfig+0xf78>)
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030ca:	6011      	str	r1, [r2, #0]
 80030cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	fa92 f1a2 	rbit	r1, r2
 80030da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030e2:	6011      	str	r1, [r2, #0]
  return result;
 80030e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	fab2 f282 	clz	r2, r2
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	f042 0220 	orr.w	r2, r2, #32
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f002 021f 	and.w	r2, r2, #31
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f202 	lsl.w	r2, r1, r2
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d182      	bne.n	8003010 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <HAL_RCC_OscConfig+0xf78>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	430b      	orrs	r3, r1
 800312c:	497f      	ldr	r1, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0xf78>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
 8003132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003136:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800313a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800313e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003144:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	fa93 f2a3 	rbit	r2, r3
 800314e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003152:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003156:	601a      	str	r2, [r3, #0]
  return result;
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003160:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800316c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	461a      	mov	r2, r3
 8003174:	2301      	movs	r3, #1
 8003176:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fd fb7a 	bl	8000870 <HAL_GetTick>
 800317c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003180:	e009      	b.n	8003196 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003182:	f7fd fb75 	bl	8000870 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e144      	b.n	8003420 <HAL_RCC_OscConfig+0x106c>
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800319e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	fa93 f2a3 	rbit	r2, r3
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031ba:	601a      	str	r2, [r3, #0]
  return result;
 80031bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d102      	bne.n	80031e0 <HAL_RCC_OscConfig+0xe2c>
 80031da:	4b54      	ldr	r3, [pc, #336]	; (800332c <HAL_RCC_OscConfig+0xf78>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	e027      	b.n	8003230 <HAL_RCC_OscConfig+0xe7c>
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	fa93 f2a3 	rbit	r2, r3
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800320e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003218:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	fa93 f2a3 	rbit	r2, r3
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	4b3f      	ldr	r3, [pc, #252]	; (800332c <HAL_RCC_OscConfig+0xf78>)
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003234:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003238:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003242:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	fa92 f1a2 	rbit	r1, r2
 800324c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003250:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003254:	6011      	str	r1, [r2, #0]
  return result;
 8003256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800325a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	fab2 f282 	clz	r2, r2
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	f042 0220 	orr.w	r2, r2, #32
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	f002 021f 	and.w	r2, r2, #31
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f202 	lsl.w	r2, r1, r2
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d082      	beq.n	8003182 <HAL_RCC_OscConfig+0xdce>
 800327c:	e0cf      	b.n	800341e <HAL_RCC_OscConfig+0x106a>
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003286:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800328a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032a2:	601a      	str	r2, [r3, #0]
  return result;
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80032ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	461a      	mov	r2, r3
 80032c0:	2300      	movs	r3, #0
 80032c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fd fad4 	bl	8000870 <HAL_GetTick>
 80032c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032cc:	e009      	b.n	80032e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7fd facf 	bl	8000870 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e09e      	b.n	8003420 <HAL_RCC_OscConfig+0x106c>
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	fa93 f2a3 	rbit	r2, r3
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003306:	601a      	str	r2, [r3, #0]
  return result;
 8003308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003310:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d104      	bne.n	8003330 <HAL_RCC_OscConfig+0xf7c>
 8003326:	4b01      	ldr	r3, [pc, #4]	; (800332c <HAL_RCC_OscConfig+0xf78>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	e029      	b.n	8003380 <HAL_RCC_OscConfig+0xfcc>
 800332c:	40021000 	.word	0x40021000
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003338:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800333c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800335e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	4b2b      	ldr	r3, [pc, #172]	; (800342c <HAL_RCC_OscConfig+0x1078>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003384:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003388:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800338c:	6011      	str	r1, [r2, #0]
 800338e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003392:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	fa92 f1a2 	rbit	r1, r2
 800339c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033a4:	6011      	str	r1, [r2, #0]
  return result;
 80033a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	fab2 f282 	clz	r2, r2
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	f042 0220 	orr.w	r2, r2, #32
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	f002 021f 	and.w	r2, r2, #31
 80033c0:	2101      	movs	r1, #1
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d180      	bne.n	80032ce <HAL_RCC_OscConfig+0xf1a>
 80033cc:	e027      	b.n	800341e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e01e      	b.n	8003420 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033e2:	4b12      	ldr	r3, [pc, #72]	; (800342c <HAL_RCC_OscConfig+0x1078>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10b      	bne.n	800341a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003402:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003416:	429a      	cmp	r2, r3
 8003418:	d001      	beq.n	800341e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000

08003430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b09e      	sub	sp, #120	; 0x78
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e162      	b.n	800370e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003448:	4b90      	ldr	r3, [pc, #576]	; (800368c <HAL_RCC_ClockConfig+0x25c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d910      	bls.n	8003478 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003456:	4b8d      	ldr	r3, [pc, #564]	; (800368c <HAL_RCC_ClockConfig+0x25c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 0207 	bic.w	r2, r3, #7
 800345e:	498b      	ldr	r1, [pc, #556]	; (800368c <HAL_RCC_ClockConfig+0x25c>)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	4313      	orrs	r3, r2
 8003464:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b89      	ldr	r3, [pc, #548]	; (800368c <HAL_RCC_ClockConfig+0x25c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e14a      	b.n	800370e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b82      	ldr	r3, [pc, #520]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	497f      	ldr	r1, [pc, #508]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80dc 	beq.w	800365c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d13c      	bne.n	8003526 <HAL_RCC_ClockConfig+0xf6>
 80034ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034bc:	fab3 f383 	clz	r3, r3
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d102      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xa6>
 80034d0:	4b6f      	ldr	r3, [pc, #444]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	e00f      	b.n	80034f6 <HAL_RCC_ClockConfig+0xc6>
 80034d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	667b      	str	r3, [r7, #100]	; 0x64
 80034e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e8:	663b      	str	r3, [r7, #96]	; 0x60
 80034ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034f2:	4b67      	ldr	r3, [pc, #412]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80034fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034fe:	fa92 f2a2 	rbit	r2, r2
 8003502:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003506:	fab2 f282 	clz	r2, r2
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f042 0220 	orr.w	r2, r2, #32
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f002 021f 	and.w	r2, r2, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d17b      	bne.n	800361a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0f3      	b.n	800370e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d13c      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x178>
 800352e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003532:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800353c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_RCC_ClockConfig+0x128>
 8003552:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	e00f      	b.n	8003578 <HAL_RCC_ClockConfig+0x148>
 8003558:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800355c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	647b      	str	r3, [r7, #68]	; 0x44
 8003566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800356a:	643b      	str	r3, [r7, #64]	; 0x40
 800356c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003574:	4b46      	ldr	r3, [pc, #280]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357c:	63ba      	str	r2, [r7, #56]	; 0x38
 800357e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003580:	fa92 f2a2 	rbit	r2, r2
 8003584:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003588:	fab2 f282 	clz	r2, r2
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	f042 0220 	orr.w	r2, r2, #32
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	f002 021f 	and.w	r2, r2, #31
 8003598:	2101      	movs	r1, #1
 800359a:	fa01 f202 	lsl.w	r2, r1, r2
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d13a      	bne.n	800361a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0b2      	b.n	800370e <HAL_RCC_ClockConfig+0x2de>
 80035a8:	2302      	movs	r3, #2
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d102      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x1a0>
 80035ca:	4b31      	ldr	r3, [pc, #196]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	e00d      	b.n	80035ec <HAL_RCC_ClockConfig+0x1bc>
 80035d0:	2302      	movs	r3, #2
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
 80035dc:	2302      	movs	r3, #2
 80035de:	623b      	str	r3, [r7, #32]
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	4b29      	ldr	r3, [pc, #164]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	2202      	movs	r2, #2
 80035ee:	61ba      	str	r2, [r7, #24]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	fa92 f2a2 	rbit	r2, r2
 80035f6:	617a      	str	r2, [r7, #20]
  return result;
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	fab2 f282 	clz	r2, r2
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f042 0220 	orr.w	r2, r2, #32
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	f002 021f 	and.w	r2, r2, #31
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f202 	lsl.w	r2, r1, r2
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e079      	b.n	800370e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f023 0203 	bic.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	491a      	ldr	r1, [pc, #104]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800362c:	f7fd f920 	bl	8000870 <HAL_GetTick>
 8003630:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003632:	e00a      	b.n	800364a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003634:	f7fd f91c 	bl	8000870 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e061      	b.n	800370e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <HAL_RCC_ClockConfig+0x260>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 020c 	and.w	r2, r3, #12
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	429a      	cmp	r2, r3
 800365a:	d1eb      	bne.n	8003634 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_ClockConfig+0x25c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d214      	bcs.n	8003694 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_RCC_ClockConfig+0x25c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 0207 	bic.w	r2, r3, #7
 8003672:	4906      	ldr	r1, [pc, #24]	; (800368c <HAL_RCC_ClockConfig+0x25c>)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4313      	orrs	r3, r2
 8003678:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <HAL_RCC_ClockConfig+0x25c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e040      	b.n	800370e <HAL_RCC_ClockConfig+0x2de>
 800368c:	40022000 	.word	0x40022000
 8003690:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a0:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HAL_RCC_ClockConfig+0x2e8>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	491a      	ldr	r1, [pc, #104]	; (8003718 <HAL_RCC_ClockConfig+0x2e8>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d009      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036be:	4b16      	ldr	r3, [pc, #88]	; (8003718 <HAL_RCC_ClockConfig+0x2e8>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4912      	ldr	r1, [pc, #72]	; (8003718 <HAL_RCC_ClockConfig+0x2e8>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036d2:	f000 f829 	bl	8003728 <HAL_RCC_GetSysClockFreq>
 80036d6:	4601      	mov	r1, r0
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_RCC_ClockConfig+0x2e8>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e0:	22f0      	movs	r2, #240	; 0xf0
 80036e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	fa92 f2a2 	rbit	r2, r2
 80036ea:	60fa      	str	r2, [r7, #12]
  return result;
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	fab2 f282 	clz	r2, r2
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	40d3      	lsrs	r3, r2
 80036f6:	4a09      	ldr	r2, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x2ec>)
 80036f8:	5cd3      	ldrb	r3, [r2, r3]
 80036fa:	fa21 f303 	lsr.w	r3, r1, r3
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <HAL_RCC_ClockConfig+0x2f0>)
 8003700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003702:	4b08      	ldr	r3, [pc, #32]	; (8003724 <HAL_RCC_ClockConfig+0x2f4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd f86e 	bl	80007e8 <HAL_InitTick>
  
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3778      	adds	r7, #120	; 0x78
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	08003bd0 	.word	0x08003bd0
 8003720:	20000000 	.word	0x20000000
 8003724:	20000004 	.word	0x20000004

08003728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003728:	b480      	push	{r7}
 800372a:	b08b      	sub	sp, #44	; 0x2c
 800372c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003742:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b04      	cmp	r3, #4
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x30>
 8003752:	2b08      	cmp	r3, #8
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x36>
 8003756:	e03c      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003758:	4b24      	ldr	r3, [pc, #144]	; (80037ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800375a:	623b      	str	r3, [r7, #32]
      break;
 800375c:	e03c      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003764:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003768:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	fa92 f2a2 	rbit	r2, r2
 8003770:	607a      	str	r2, [r7, #4]
  return result;
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	40d3      	lsrs	r3, r2
 800377c:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003782:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	220f      	movs	r2, #15
 800378c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	fa92 f2a2 	rbit	r2, r2
 8003794:	60fa      	str	r2, [r7, #12]
  return result;
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	fab2 f282 	clz	r2, r2
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	40d3      	lsrs	r3, r2
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80037a2:	5cd3      	ldrb	r3, [r2, r3]
 80037a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037b0:	4a0e      	ldr	r2, [pc, #56]	; (80037ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	e004      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	623b      	str	r3, [r7, #32]
      break;
 80037d0:	e002      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_RCC_GetSysClockFreq+0xd4>)
 80037d4:	623b      	str	r3, [r7, #32]
      break;
 80037d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	372c      	adds	r7, #44	; 0x2c
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	08003be0 	.word	0x08003be0
 80037f4:	08003bf0 	.word	0x08003bf0
 80037f8:	003d0900 	.word	0x003d0900
 80037fc:	007a1200 	.word	0x007a1200

08003800 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b092      	sub	sp, #72	; 0x48
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003810:	2300      	movs	r3, #0
 8003812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80d4 	beq.w	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003824:	4b4e      	ldr	r3, [pc, #312]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	69db      	ldr	r3, [r3, #28]
 8003828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10e      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	4a4a      	ldr	r2, [pc, #296]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383a:	61d3      	str	r3, [r2, #28]
 800383c:	4b48      	ldr	r3, [pc, #288]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003848:	2301      	movs	r3, #1
 800384a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b45      	ldr	r3, [pc, #276]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385a:	4b42      	ldr	r3, [pc, #264]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a41      	ldr	r2, [pc, #260]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7fd f803 	bl	8000870 <HAL_GetTick>
 800386a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7fc ffff 	bl	8000870 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	; 0x64
 800387a:	d901      	bls.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e169      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	4b38      	ldr	r3, [pc, #224]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800388c:	4b34      	ldr	r3, [pc, #208]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003894:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8084 	beq.w	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d07c      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ac:	4b2c      	ldr	r3, [pc, #176]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b26      	ldr	r3, [pc, #152]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	461a      	mov	r2, r3
 80038d6:	2301      	movs	r3, #1
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	461a      	mov	r2, r3
 80038fa:	2300      	movs	r3, #0
 80038fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003902:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d04b      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fc ffaf 	bl	8000870 <HAL_GetTick>
 8003912:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003914:	e00a      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003916:	f7fc ffab 	bl	8000870 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f241 3288 	movw	r2, #5000	; 0x1388
 8003924:	4293      	cmp	r3, r2
 8003926:	d901      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e113      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800392c:	2302      	movs	r3, #2
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
 8003938:	2302      	movs	r3, #2
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	61fb      	str	r3, [r7, #28]
  return result;
 8003944:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d108      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800395a:	4b01      	ldr	r3, [pc, #4]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	e00d      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003960:	40021000 	.word	0x40021000
 8003964:	40007000 	.word	0x40007000
 8003968:	10908100 	.word	0x10908100
 800396c:	2302      	movs	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	4b78      	ldr	r3, [pc, #480]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	2202      	movs	r2, #2
 800397e:	613a      	str	r2, [r7, #16]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	fa92 f2a2 	rbit	r2, r2
 8003986:	60fa      	str	r2, [r7, #12]
  return result;
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	fab2 f282 	clz	r2, r2
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f002 021f 	and.w	r2, r2, #31
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0b7      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80039a6:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	496a      	ldr	r1, [pc, #424]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c0:	4b66      	ldr	r3, [pc, #408]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d8:	4b60      	ldr	r3, [pc, #384]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	f023 0203 	bic.w	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	495d      	ldr	r1, [pc, #372]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f6:	4b59      	ldr	r3, [pc, #356]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	4956      	ldr	r1, [pc, #344]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a14:	4b51      	ldr	r3, [pc, #324]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	494e      	ldr	r1, [pc, #312]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a32:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f023 0210 	bic.w	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	4947      	ldr	r1, [pc, #284]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003a50:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	493f      	ldr	r1, [pc, #252]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a6e:	4b3b      	ldr	r3, [pc, #236]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f023 0220 	bic.w	r2, r3, #32
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4938      	ldr	r1, [pc, #224]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a8c:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	4930      	ldr	r1, [pc, #192]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aaa:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	4929      	ldr	r1, [pc, #164]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ac8:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4921      	ldr	r1, [pc, #132]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	491a      	ldr	r1, [pc, #104]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b04:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	4912      	ldr	r1, [pc, #72]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	490b      	ldr	r1, [pc, #44]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	4903      	ldr	r1, [pc, #12]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3748      	adds	r7, #72	; 0x48
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40021000 	.word	0x40021000

08003b60 <memset>:
 8003b60:	4402      	add	r2, r0
 8003b62:	4603      	mov	r3, r0
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d100      	bne.n	8003b6a <memset+0xa>
 8003b68:	4770      	bx	lr
 8003b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b6e:	e7f9      	b.n	8003b64 <memset+0x4>

08003b70 <__libc_init_array>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	4d0d      	ldr	r5, [pc, #52]	; (8003ba8 <__libc_init_array+0x38>)
 8003b74:	4c0d      	ldr	r4, [pc, #52]	; (8003bac <__libc_init_array+0x3c>)
 8003b76:	1b64      	subs	r4, r4, r5
 8003b78:	10a4      	asrs	r4, r4, #2
 8003b7a:	2600      	movs	r6, #0
 8003b7c:	42a6      	cmp	r6, r4
 8003b7e:	d109      	bne.n	8003b94 <__libc_init_array+0x24>
 8003b80:	4d0b      	ldr	r5, [pc, #44]	; (8003bb0 <__libc_init_array+0x40>)
 8003b82:	4c0c      	ldr	r4, [pc, #48]	; (8003bb4 <__libc_init_array+0x44>)
 8003b84:	f000 f818 	bl	8003bb8 <_init>
 8003b88:	1b64      	subs	r4, r4, r5
 8003b8a:	10a4      	asrs	r4, r4, #2
 8003b8c:	2600      	movs	r6, #0
 8003b8e:	42a6      	cmp	r6, r4
 8003b90:	d105      	bne.n	8003b9e <__libc_init_array+0x2e>
 8003b92:	bd70      	pop	{r4, r5, r6, pc}
 8003b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b98:	4798      	blx	r3
 8003b9a:	3601      	adds	r6, #1
 8003b9c:	e7ee      	b.n	8003b7c <__libc_init_array+0xc>
 8003b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ba2:	4798      	blx	r3
 8003ba4:	3601      	adds	r6, #1
 8003ba6:	e7f2      	b.n	8003b8e <__libc_init_array+0x1e>
 8003ba8:	08003c00 	.word	0x08003c00
 8003bac:	08003c00 	.word	0x08003c00
 8003bb0:	08003c00 	.word	0x08003c00
 8003bb4:	08003c04 	.word	0x08003c04

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
