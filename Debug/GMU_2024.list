
GMU_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006408  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c0  080065c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080065c0  080065c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065c0  080065c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065c4  080065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080065c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000049c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a8  200004a8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011fe5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036a0  00000000  00000000  00032064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001170  00000000  00000000  00035708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d32  00000000  00000000  00036878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fdf4  00000000  00000000  000375aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001814f  00000000  00000000  0005739e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000beb05  00000000  00000000  0006f4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004670  00000000  00000000  0012dff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00132664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006578 	.word	0x08006578

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006578 	.word	0x08006578

080001c8 <ADC_Init>:

volatile uint16_t adcValue[10];
uint16_t adcValueMean;

void ADC_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_OPAMP_Start(&hopamp1);
 80001cc:	4806      	ldr	r0, [pc, #24]	; (80001e8 <ADC_Init+0x20>)
 80001ce:	f004 faa7 	bl	8004720 <HAL_OPAMP_Start>
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80001d2:	2100      	movs	r1, #0
 80001d4:	4805      	ldr	r0, [pc, #20]	; (80001ec <ADC_Init+0x24>)
 80001d6:	f002 fa49 	bl	800266c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcValue,10);
 80001da:	220a      	movs	r2, #10
 80001dc:	4904      	ldr	r1, [pc, #16]	; (80001f0 <ADC_Init+0x28>)
 80001de:	4803      	ldr	r0, [pc, #12]	; (80001ec <ADC_Init+0x24>)
 80001e0:	f001 fe42 	bl	8001e68 <HAL_ADC_Start_DMA>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	20000114 	.word	0x20000114
 80001f0:	20000028 	.word	0x20000028

080001f4 <getADCValue>:

uint16_t getADCValue(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	uint32_t adcValueTmp = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i>=10; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	70fb      	strb	r3, [r7, #3]
 8000202:	e00b      	b.n	800021c <getADCValue+0x28>
	{
		adcValueTmp += adcValue[i];
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <getADCValue+0x50>)
 8000208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800020c:	b29b      	uxth	r3, r3
 800020e:	461a      	mov	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4413      	add	r3, r2
 8000214:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i>=10; i++)
 8000216:	78fb      	ldrb	r3, [r7, #3]
 8000218:	3301      	adds	r3, #1
 800021a:	70fb      	strb	r3, [r7, #3]
 800021c:	78fb      	ldrb	r3, [r7, #3]
 800021e:	2b09      	cmp	r3, #9
 8000220:	d8f0      	bhi.n	8000204 <getADCValue+0x10>
	}
	return adcValueMean = adcValueTmp / 10;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a08      	ldr	r2, [pc, #32]	; (8000248 <getADCValue+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	08db      	lsrs	r3, r3, #3
 800022c:	b29a      	uxth	r2, r3
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <getADCValue+0x58>)
 8000230:	801a      	strh	r2, [r3, #0]
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <getADCValue+0x58>)
 8000234:	881b      	ldrh	r3, [r3, #0]
}
 8000236:	4618      	mov	r0, r3
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	cccccccd 	.word	0xcccccccd
 800024c:	2000003c 	.word	0x2000003c

08000250 <AppInit>:


Gearbox_t gearbox;

void AppInit(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	gearboxInit(&gearbox);
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <AppInit+0x18>)
 8000256:	f000 f993 	bl	8000580 <gearboxInit>
	ADC_Init();
 800025a:	f7ff ffb5 	bl	80001c8 <ADC_Init>
	CAN_Handler_Init();
 800025e:	f000 f893 	bl	8000388 <CAN_Handler_Init>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000040 	.word	0x20000040

0800026c <canRxProcess>:

void canRxProcess()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	static uint8_t clutch_data;

	if(CAN_Handler_IsGearUpCommanded())
 8000270:	f000 f8b8 	bl	80003e4 <CAN_Handler_IsGearUpCommanded>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d003      	beq.n	8000282 <canRxProcess+0x16>
	{
		startUpshift(&gearbox);
 800027a:	4812      	ldr	r0, [pc, #72]	; (80002c4 <canRxProcess+0x58>)
 800027c:	f000 fcb2 	bl	8000be4 <startUpshift>
		return;
 8000280:	e01e      	b.n	80002c0 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsGearDownCommanded())
 8000282:	f000 f8cb 	bl	800041c <CAN_Handler_IsGearDownCommanded>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d003      	beq.n	8000294 <canRxProcess+0x28>
	{
		startDownshift(&gearbox);
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <canRxProcess+0x58>)
 800028e:	f000 fcba 	bl	8000c06 <startDownshift>
		return;
 8000292:	e015      	b.n	80002c0 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsClutchCommanded(&clutch_data))
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <canRxProcess+0x5c>)
 8000296:	f000 f8dd 	bl	8000454 <CAN_Handler_IsClutchCommanded>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d00f      	beq.n	80002c0 <canRxProcess+0x54>
	{
		if(clutch_data == 255)
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <canRxProcess+0x5c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2bff      	cmp	r3, #255	; 0xff
 80002a6:	d103      	bne.n	80002b0 <canRxProcess+0x44>
			{
				clutch(true);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fcbd 	bl	8000c28 <clutch>
			}
			else if(clutch_data == 0)
			{
				clutch(false);
			}
				return;
 80002ae:	e006      	b.n	80002be <canRxProcess+0x52>
			else if(clutch_data == 0)
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <canRxProcess+0x5c>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d102      	bne.n	80002be <canRxProcess+0x52>
				clutch(false);
 80002b8:	2000      	movs	r0, #0
 80002ba:	f000 fcb5 	bl	8000c28 <clutch>
				return;
 80002be:	bf00      	nop
	}

}
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000040 	.word	0x20000040
 80002c8:	20000064 	.word	0x20000064

080002cc <sendCANFrame>:

void sendCANFrame(void)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af04      	add	r7, sp, #16

	CAN_Handler_SendGmu1Frame(gearbox.actual_gear, HAL_GPIO_ReadPin(CLUTCH_GPIO_Port, CLUTCH_Pin), gearbox.gearPosADC, gearbox._state, 0, 0, gearbox.gear_cut);
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <sendCANFrame+0x54>)
 80002d4:	7b5c      	ldrb	r4, [r3, #13]
 80002d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002da:	4812      	ldr	r0, [pc, #72]	; (8000324 <sendCANFrame+0x58>)
 80002dc:	f004 f932 	bl	8004544 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4618      	mov	r0, r3
 80002e4:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <sendCANFrame+0x54>)
 80002e6:	881a      	ldrh	r2, [r3, #0]
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <sendCANFrame+0x54>)
 80002ea:	7b19      	ldrb	r1, [r3, #12]
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <sendCANFrame+0x54>)
 80002ee:	7edb      	ldrb	r3, [r3, #27]
 80002f0:	9302      	str	r3, [sp, #8]
 80002f2:	2300      	movs	r3, #0
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	2300      	movs	r3, #0
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	460b      	mov	r3, r1
 80002fc:	4601      	mov	r1, r0
 80002fe:	4620      	mov	r0, r4
 8000300:	f000 f8c8 	bl	8000494 <CAN_Handler_SendGmu1Frame>
	CAN_Handler_SendGmu2Frame(0, 0, gearbox.upshiftTime, gearbox.downshiftTime);
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <sendCANFrame+0x54>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	b29a      	uxth	r2, r3
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <sendCANFrame+0x54>)
 800030c:	6a1b      	ldr	r3, [r3, #32]
 800030e:	b29b      	uxth	r3, r3
 8000310:	2100      	movs	r1, #0
 8000312:	2000      	movs	r0, #0
 8000314:	f000 f8f4 	bl	8000500 <CAN_Handler_SendGmu2Frame>
}
 8000318:	bf00      	nop
 800031a:	3704      	adds	r7, #4
 800031c:	46bd      	mov	sp, r7
 800031e:	bd90      	pop	{r4, r7, pc}
 8000320:	20000040 	.word	0x20000040
 8000324:	48000400 	.word	0x48000400

08000328 <AppProcess>:
void statusLED(void)
{
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
}
void AppProcess(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
	uint32_t CANRXtick = HAL_GetTick();
 800032e:	f001 fb87 	bl	8001a40 <HAL_GetTick>
 8000332:	6078      	str	r0, [r7, #4]
	uint32_t CANSendFrameTick = HAL_GetTick();
 8000334:	f001 fb84 	bl	8001a40 <HAL_GetTick>
 8000338:	6038      	str	r0, [r7, #0]

	while(1)
	{
		gearbox.gearPosADC = getADCValue();
 800033a:	f7ff ff5b 	bl	80001f4 <getADCValue>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <AppProcess+0x5c>)
 8000344:	801a      	strh	r2, [r3, #0]
		updateGear(&gearbox);
 8000346:	480f      	ldr	r0, [pc, #60]	; (8000384 <AppProcess+0x5c>)
 8000348:	f000 f946 	bl	80005d8 <updateGear>
		processCallback(&gearbox);
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <AppProcess+0x5c>)
 800034e:	f000 f9b5 	bl	80006bc <processCallback>

		if((HAL_GetTick() - CANRXtick) > 1)
 8000352:	f001 fb75 	bl	8001a40 <HAL_GetTick>
 8000356:	4602      	mov	r2, r0
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	2b01      	cmp	r3, #1
 800035e:	d904      	bls.n	800036a <AppProcess+0x42>
		{
			canRxProcess();
 8000360:	f7ff ff84 	bl	800026c <canRxProcess>
			CANRXtick = HAL_GetTick();
 8000364:	f001 fb6c 	bl	8001a40 <HAL_GetTick>
 8000368:	6078      	str	r0, [r7, #4]
		}
		if((HAL_GetTick() - CANSendFrameTick) > 2)
 800036a:	f001 fb69 	bl	8001a40 <HAL_GetTick>
 800036e:	4602      	mov	r2, r0
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	2b02      	cmp	r3, #2
 8000376:	d9e0      	bls.n	800033a <AppProcess+0x12>
		{
			sendCANFrame();
 8000378:	f7ff ffa8 	bl	80002cc <sendCANFrame>
			CANSendFrameTick = HAL_GetTick();
 800037c:	f001 fb60 	bl	8001a40 <HAL_GetTick>
 8000380:	6038      	str	r0, [r7, #0]
		gearbox.gearPosADC = getADCValue();
 8000382:	e7da      	b.n	800033a <AppProcess+0x12>
 8000384:	20000040 	.word	0x20000040

08000388 <CAN_Handler_Init>:

struct can_frame cf_gear_up, cf_gear_down, cf_clutch;
struct can_frame cf_gmu1, cf_gmu2;


void CAN_Handler_Init(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	CAN_Init();
 800038c:	f001 f90e 	bl	80015ac <CAN_Init>

	CAN_InitFrame(&cf_gear_up, 0x000, 0, 1);
 8000390:	2301      	movs	r3, #1
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	480e      	ldr	r0, [pc, #56]	; (80003d0 <CAN_Handler_Init+0x48>)
 8000398:	f001 f914 	bl	80015c4 <CAN_InitFrame>
	CAN_InitFrame(&cf_gear_down, 0x001, 0, 1);
 800039c:	2301      	movs	r3, #1
 800039e:	2200      	movs	r2, #0
 80003a0:	2101      	movs	r1, #1
 80003a2:	480c      	ldr	r0, [pc, #48]	; (80003d4 <CAN_Handler_Init+0x4c>)
 80003a4:	f001 f90e 	bl	80015c4 <CAN_InitFrame>
	CAN_InitFrame(&cf_clutch, 0x002, 0, 1);
 80003a8:	2301      	movs	r3, #1
 80003aa:	2200      	movs	r2, #0
 80003ac:	2102      	movs	r1, #2
 80003ae:	480a      	ldr	r0, [pc, #40]	; (80003d8 <CAN_Handler_Init+0x50>)
 80003b0:	f001 f908 	bl	80015c4 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu1, 0x080, 10, 8);
 80003b4:	2308      	movs	r3, #8
 80003b6:	220a      	movs	r2, #10
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	4808      	ldr	r0, [pc, #32]	; (80003dc <CAN_Handler_Init+0x54>)
 80003bc:	f001 f902 	bl	80015c4 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu2, 0x081, 100, 8);
 80003c0:	2308      	movs	r3, #8
 80003c2:	2264      	movs	r2, #100	; 0x64
 80003c4:	2181      	movs	r1, #129	; 0x81
 80003c6:	4806      	ldr	r0, [pc, #24]	; (80003e0 <CAN_Handler_Init+0x58>)
 80003c8:	f001 f8fc 	bl	80015c4 <CAN_InitFrame>

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000068 	.word	0x20000068
 80003d4:	20000088 	.word	0x20000088
 80003d8:	200000a8 	.word	0x200000a8
 80003dc:	200000c8 	.word	0x200000c8
 80003e0:	200000e8 	.word	0x200000e8

080003e4 <CAN_Handler_IsGearUpCommanded>:

uint8_t CAN_Handler_IsGearUpCommanded(){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

	static uint32_t last_tick = 0;

	if((cf_gear_up.tick_ms != last_tick) && (cf_gear_up.core.data[0] == 255)){
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <CAN_Handler_IsGearUpCommanded+0x30>)
 80003ea:	699a      	ldr	r2, [r3, #24]
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <CAN_Handler_IsGearUpCommanded+0x34>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d009      	beq.n	8000408 <CAN_Handler_IsGearUpCommanded+0x24>
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <CAN_Handler_IsGearUpCommanded+0x30>)
 80003f6:	7b1b      	ldrb	r3, [r3, #12]
 80003f8:	2bff      	cmp	r3, #255	; 0xff
 80003fa:	d105      	bne.n	8000408 <CAN_Handler_IsGearUpCommanded+0x24>
		last_tick = cf_gear_up.tick_ms;
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <CAN_Handler_IsGearUpCommanded+0x30>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a05      	ldr	r2, [pc, #20]	; (8000418 <CAN_Handler_IsGearUpCommanded+0x34>)
 8000402:	6013      	str	r3, [r2, #0]
		return 1;
 8000404:	2301      	movs	r3, #1
 8000406:	e000      	b.n	800040a <CAN_Handler_IsGearUpCommanded+0x26>
	}
	else{
		return 0;
 8000408:	2300      	movs	r3, #0
	}


}
 800040a:	4618      	mov	r0, r3
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	20000068 	.word	0x20000068
 8000418:	20000108 	.word	0x20000108

0800041c <CAN_Handler_IsGearDownCommanded>:

uint8_t CAN_Handler_IsGearDownCommanded(){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

	static uint32_t last_tick_ds = 0;

	if((cf_gear_down.tick_ms != last_tick_ds) && (cf_gear_down.core.data[0] == 255)){
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <CAN_Handler_IsGearDownCommanded+0x30>)
 8000422:	699a      	ldr	r2, [r3, #24]
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <CAN_Handler_IsGearDownCommanded+0x34>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	429a      	cmp	r2, r3
 800042a:	d009      	beq.n	8000440 <CAN_Handler_IsGearDownCommanded+0x24>
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <CAN_Handler_IsGearDownCommanded+0x30>)
 800042e:	7b1b      	ldrb	r3, [r3, #12]
 8000430:	2bff      	cmp	r3, #255	; 0xff
 8000432:	d105      	bne.n	8000440 <CAN_Handler_IsGearDownCommanded+0x24>
		last_tick_ds = cf_gear_down.tick_ms;
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <CAN_Handler_IsGearDownCommanded+0x30>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a05      	ldr	r2, [pc, #20]	; (8000450 <CAN_Handler_IsGearDownCommanded+0x34>)
 800043a:	6013      	str	r3, [r2, #0]
		return 1;
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <CAN_Handler_IsGearDownCommanded+0x26>
	}
	else{
		return 0;
 8000440:	2300      	movs	r3, #0
	}


}
 8000442:	4618      	mov	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	20000088 	.word	0x20000088
 8000450:	2000010c 	.word	0x2000010c

08000454 <CAN_Handler_IsClutchCommanded>:

uint8_t CAN_Handler_IsClutchCommanded(uint8_t* data){
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]

	static uint32_t last_tick = 0;

	if(cf_clutch.tick_ms != last_tick){
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <CAN_Handler_IsClutchCommanded+0x38>)
 800045e:	699a      	ldr	r2, [r3, #24]
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <CAN_Handler_IsClutchCommanded+0x3c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	429a      	cmp	r2, r3
 8000466:	d009      	beq.n	800047c <CAN_Handler_IsClutchCommanded+0x28>
		last_tick = cf_clutch.tick_ms;
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <CAN_Handler_IsClutchCommanded+0x38>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a08      	ldr	r2, [pc, #32]	; (8000490 <CAN_Handler_IsClutchCommanded+0x3c>)
 800046e:	6013      	str	r3, [r2, #0]
		*data = cf_clutch.core.data[0];
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <CAN_Handler_IsClutchCommanded+0x38>)
 8000472:	7b1a      	ldrb	r2, [r3, #12]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	701a      	strb	r2, [r3, #0]
		return 1;
 8000478:	2301      	movs	r3, #1
 800047a:	e000      	b.n	800047e <CAN_Handler_IsClutchCommanded+0x2a>
	}
	else{
		return 0;
 800047c:	2300      	movs	r3, #0
	}


}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	200000a8 	.word	0x200000a8
 8000490:	20000110 	.word	0x20000110

08000494 <CAN_Handler_SendGmu1Frame>:

void CAN_Handler_SendGmu1Frame(uint8_t gear, uint8_t clutch, uint16_t gear_pos_adc, uint8_t state, uint8_t air_preas, uint8_t reset_det, uint8_t gear_cut){
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4604      	mov	r4, r0
 800049c:	4608      	mov	r0, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	461a      	mov	r2, r3
 80004a2:	4623      	mov	r3, r4
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	4603      	mov	r3, r0
 80004a8:	71bb      	strb	r3, [r7, #6]
 80004aa:	460b      	mov	r3, r1
 80004ac:	80bb      	strh	r3, [r7, #4]
 80004ae:	4613      	mov	r3, r2
 80004b0:	70fb      	strb	r3, [r7, #3]

	cf_gmu1.core.data[0] = gear;
 80004b2:	4a12      	ldr	r2, [pc, #72]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	7313      	strb	r3, [r2, #12]
	cf_gmu1.core.data[1] = clutch;
 80004b8:	4a10      	ldr	r2, [pc, #64]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	7353      	strb	r3, [r2, #13]
	cf_gmu1.core.data[2] = (uint8_t)((gear_pos_adc >> 8) & 0xFF);
 80004be:	88bb      	ldrh	r3, [r7, #4]
 80004c0:	0a1b      	lsrs	r3, r3, #8
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004c8:	739a      	strb	r2, [r3, #14]
	cf_gmu1.core.data[3] = (uint8_t)(gear_pos_adc & 0xFF);
 80004ca:	88bb      	ldrh	r3, [r7, #4]
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004d0:	73da      	strb	r2, [r3, #15]
	cf_gmu1.core.data[4] = state;
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	7413      	strb	r3, [r2, #16]
	cf_gmu1.core.data[5] = air_preas;
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004da:	7e3b      	ldrb	r3, [r7, #24]
 80004dc:	7453      	strb	r3, [r2, #17]
	cf_gmu1.core.data[6] = (uint8_t)((gear_cut)&0xFF);
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80004e4:	7493      	strb	r3, [r2, #18]
	cf_gmu1.core.data[7] = reset_det;
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004e8:	7f3b      	ldrb	r3, [r7, #28]
 80004ea:	74d3      	strb	r3, [r2, #19]

	CAN_SendFrame(&cf_gmu1);
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004ee:	f001 f8c1 	bl	8001674 <CAN_SendFrame>
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000c8 	.word	0x200000c8

08000500 <CAN_Handler_SendGmu2Frame>:

void CAN_Handler_SendGmu2Frame(uint16_t partial_upshift_t, uint16_t partial_downshift_t, uint16_t upshift_t, uint16_t downshift_t){
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4604      	mov	r4, r0
 8000508:	4608      	mov	r0, r1
 800050a:	4611      	mov	r1, r2
 800050c:	461a      	mov	r2, r3
 800050e:	4623      	mov	r3, r4
 8000510:	80fb      	strh	r3, [r7, #6]
 8000512:	4603      	mov	r3, r0
 8000514:	80bb      	strh	r3, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	807b      	strh	r3, [r7, #2]
 800051a:	4613      	mov	r3, r2
 800051c:	803b      	strh	r3, [r7, #0]

	cf_gmu2.core.data[0] = (uint8_t)((partial_upshift_t >> 8) & 0xFF);
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000528:	731a      	strb	r2, [r3, #12]
	cf_gmu2.core.data[1] = (uint8_t)(partial_upshift_t & 0xFF);
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000530:	735a      	strb	r2, [r3, #13]
	cf_gmu2.core.data[2] = (uint8_t)((partial_downshift_t >> 8) & 0xFF);
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	b29b      	uxth	r3, r3
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 800053c:	739a      	strb	r2, [r3, #14]
	cf_gmu2.core.data[3] = (uint8_t)(partial_downshift_t & 0xFF);
 800053e:	88bb      	ldrh	r3, [r7, #4]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000544:	73da      	strb	r2, [r3, #15]
	cf_gmu2.core.data[4] = (uint8_t)((upshift_t >> 8) & 0xFF);
 8000546:	887b      	ldrh	r3, [r7, #2]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b29b      	uxth	r3, r3
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000550:	741a      	strb	r2, [r3, #16]
	cf_gmu2.core.data[5] = (uint8_t)(upshift_t & 0xFF);
 8000552:	887b      	ldrh	r3, [r7, #2]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000558:	745a      	strb	r2, [r3, #17]
	cf_gmu2.core.data[6] = (uint8_t)((downshift_t >> 8) & 0xFF);
 800055a:	883b      	ldrh	r3, [r7, #0]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	b29b      	uxth	r3, r3
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000564:	749a      	strb	r2, [r3, #18]
	cf_gmu2.core.data[7] = (uint8_t)(downshift_t & 0xFF);
 8000566:	883b      	ldrh	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 800056c:	74da      	strb	r2, [r3, #19]

	CAN_SendFrame(&cf_gmu2);
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000570:	f001 f880 	bl	8001674 <CAN_SendFrame>
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bd90      	pop	{r4, r7, pc}
 800057c:	200000e8 	.word	0x200000e8

08000580 <gearboxInit>:
static bool getTimeout(uint32_t dupa, uint32_t anus);

uint32_t cipa;

void gearboxInit(Gearbox_t* gearbox)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	gearbox->neutral_adc = 500;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800058e:	805a      	strh	r2, [r3, #2]
	gearbox->gear1_adc = 0;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	809a      	strh	r2, [r3, #4]
	gearbox->gear2_adc = 1470;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f240 52be 	movw	r2, #1470	; 0x5be
 800059c:	80da      	strh	r2, [r3, #6]
	gearbox->gear3_adc = 1870;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	f240 724e 	movw	r2, #1870	; 0x74e
 80005a4:	811a      	strh	r2, [r3, #8]
	gearbox->gear4_adc = 2300;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80005ac:	815a      	strh	r2, [r3, #10]

	gearbox->_state = Idle;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	731a      	strb	r2, [r3, #12]

	gearbox->shift_start_tick = 0;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
	gearbox->timestamp_tick = 0;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
	gearbox->start_gear_sens = 0;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	831a      	strh	r2, [r3, #24]
	gearbox->start_gear = 0;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	769a      	strb	r2, [r3, #26]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <updateGear>:
{
	gearbox->gearPosADC = ADCValue;
}

void updateGear(Gearbox_t* gearbox)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	if((gearbox->gearPosADC>=(gearbox->neutral_adc-150))&&(gearbox->gearPosADC<=(gearbox->neutral_adc+150)))
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	885b      	ldrh	r3, [r3, #2]
 80005ea:	3b96      	subs	r3, #150	; 0x96
 80005ec:	429a      	cmp	r2, r3
 80005ee:	db0b      	blt.n	8000608 <updateGear+0x30>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	885b      	ldrh	r3, [r3, #2]
 80005fa:	3396      	adds	r3, #150	; 0x96
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dc03      	bgt.n	8000608 <updateGear+0x30>
	{
		gearbox->actual_gear = 0;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	735a      	strb	r2, [r3, #13]
 8000606:	e053      	b.n	80006b0 <updateGear+0xd8>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear1_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear1_adc+150)))
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	889b      	ldrh	r3, [r3, #4]
 8000612:	3b96      	subs	r3, #150	; 0x96
 8000614:	429a      	cmp	r2, r3
 8000616:	db0b      	blt.n	8000630 <updateGear+0x58>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	889b      	ldrh	r3, [r3, #4]
 8000622:	3396      	adds	r3, #150	; 0x96
 8000624:	429a      	cmp	r2, r3
 8000626:	dc03      	bgt.n	8000630 <updateGear+0x58>
	{
		gearbox->actual_gear = 1;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2201      	movs	r2, #1
 800062c:	735a      	strb	r2, [r3, #13]
 800062e:	e03f      	b.n	80006b0 <updateGear+0xd8>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear2_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear2_adc+150)))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	88db      	ldrh	r3, [r3, #6]
 800063a:	3b96      	subs	r3, #150	; 0x96
 800063c:	429a      	cmp	r2, r3
 800063e:	db0b      	blt.n	8000658 <updateGear+0x80>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	88db      	ldrh	r3, [r3, #6]
 800064a:	3396      	adds	r3, #150	; 0x96
 800064c:	429a      	cmp	r2, r3
 800064e:	dc03      	bgt.n	8000658 <updateGear+0x80>
	{
		gearbox->actual_gear = 2;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2202      	movs	r2, #2
 8000654:	735a      	strb	r2, [r3, #13]
 8000656:	e02b      	b.n	80006b0 <updateGear+0xd8>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear3_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear3_adc+150)))
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	891b      	ldrh	r3, [r3, #8]
 8000662:	3b96      	subs	r3, #150	; 0x96
 8000664:	429a      	cmp	r2, r3
 8000666:	db0b      	blt.n	8000680 <updateGear+0xa8>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	891b      	ldrh	r3, [r3, #8]
 8000672:	3396      	adds	r3, #150	; 0x96
 8000674:	429a      	cmp	r2, r3
 8000676:	dc03      	bgt.n	8000680 <updateGear+0xa8>
		{
			gearbox->actual_gear = 3;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2203      	movs	r2, #3
 800067c:	735a      	strb	r2, [r3, #13]
 800067e:	e017      	b.n	80006b0 <updateGear+0xd8>
		}
	else if((gearbox->gearPosADC>=(gearbox->gear4_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear4_adc+150)))
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	895b      	ldrh	r3, [r3, #10]
 800068a:	3b96      	subs	r3, #150	; 0x96
 800068c:	429a      	cmp	r2, r3
 800068e:	db0b      	blt.n	80006a8 <updateGear+0xd0>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	895b      	ldrh	r3, [r3, #10]
 800069a:	3396      	adds	r3, #150	; 0x96
 800069c:	429a      	cmp	r2, r3
 800069e:	dc03      	bgt.n	80006a8 <updateGear+0xd0>
		{
			gearbox->actual_gear = 4;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2204      	movs	r2, #4
 80006a4:	735a      	strb	r2, [r3, #13]
 80006a6:	e003      	b.n	80006b0 <updateGear+0xd8>
		}
	else
		{
			gearbox->actual_gear = 0xff;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	22ff      	movs	r2, #255	; 0xff
 80006ac:	735a      	strb	r2, [r3, #13]
		}

}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <processCallback>:

void processCallback(Gearbox_t* gearbox)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	switch(gearbox->_state)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7b1b      	ldrb	r3, [r3, #12]
 80006c8:	2b0c      	cmp	r3, #12
 80006ca:	d84d      	bhi.n	8000768 <processCallback+0xac>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <processCallback+0x18>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	08000771 	.word	0x08000771
 80006d8:	08000709 	.word	0x08000709
 80006dc:	08000711 	.word	0x08000711
 80006e0:	08000719 	.word	0x08000719
 80006e4:	08000721 	.word	0x08000721
 80006e8:	08000729 	.word	0x08000729
 80006ec:	08000731 	.word	0x08000731
 80006f0:	08000739 	.word	0x08000739
 80006f4:	08000741 	.word	0x08000741
 80006f8:	08000749 	.word	0x08000749
 80006fc:	08000751 	.word	0x08000751
 8000700:	08000759 	.word	0x08000759
 8000704:	08000761 	.word	0x08000761
	{
		case Idle:
		break;

		case StartUpshift:
			startUpshiftCallback(gearbox);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f837 	bl	800077c <startUpshiftCallback>
		break;
 800070e:	e030      	b.n	8000772 <processCallback+0xb6>

		case UpshiftFromNeutral:
			upshiftFromNeutral(gearbox);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 f876 	bl	8000802 <upshiftFromNeutral>
		break;
 8000716:	e02c      	b.n	8000772 <processCallback+0xb6>

		case UpshiftGearCut:
			upshiftGearCut(gearbox);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f896 	bl	800084a <upshiftGearCut>
		break;
 800071e:	e028      	b.n	8000772 <processCallback+0xb6>

		case UpshiftFinish:
			upshiftFinish(gearbox);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f8b4 	bl	800088e <upshiftFinish>
		break;
 8000726:	e024      	b.n	8000772 <processCallback+0xb6>

		case StartDownshift:
			startDownshiftCallback(gearbox);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 f8e9 	bl	8000900 <startDownshiftCallback>
		break;
 800072e:	e020      	b.n	8000772 <processCallback+0xb6>

		case DownshiftToNeutral:
			downshiftToNeutral(gearbox);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 f929 	bl	8000988 <downshiftToNeutral>
		break;
 8000736:	e01c      	b.n	8000772 <processCallback+0xb6>

		case DownshiftRevMatch:
			downshiftRevMatch(gearbox);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f94d 	bl	80009d8 <downshiftRevMatch>
		break;
 800073e:	e018      	b.n	8000772 <processCallback+0xb6>

		case DownshiftFinish:
			downshiftFinish(gearbox);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 f96d 	bl	8000a20 <downshiftFinish>
		break;
 8000746:	e014      	b.n	8000772 <processCallback+0xb6>

		case OL_US_GearCut:
			openLoop_upshift_gearCut(gearbox);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f9a3 	bl	8000a94 <openLoop_upshift_gearCut>
		break;
 800074e:	e010      	b.n	8000772 <processCallback+0xb6>

		case OL_US_Finish:
			openLoop_upshift_finish(gearbox);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f9c1 	bl	8000ad8 <openLoop_upshift_finish>
		break;
 8000756:	e00c      	b.n	8000772 <processCallback+0xb6>

		case OL_DS_Clutch:
			openLoop_downshift_clutch(gearbox);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f9ed 	bl	8000b38 <openLoop_downshift_clutch>
		break;
 800075e:	e008      	b.n	8000772 <processCallback+0xb6>

		case OL_DS_Finish:
			openLoop_downshift_finish(gearbox);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 fa0d 	bl	8000b80 <openLoop_downshift_finish>
		break;
 8000766:	e004      	b.n	8000772 <processCallback+0xb6>

		default:
			gearbox->_state = Idle;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	731a      	strb	r2, [r3, #12]
		break;
 800076e:	e000      	b.n	8000772 <processCallback+0xb6>
		break;
 8000770:	bf00      	nop

	}
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop

0800077c <startUpshiftCallback>:

void startUpshiftCallback(Gearbox_t* gearbox)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	gearbox->start_gear = gearbox->actual_gear;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7b5a      	ldrb	r2, [r3, #13]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	769a      	strb	r2, [r3, #26]
	gearbox->shift_start_tick = HAL_GetTick();
 800078c:	f001 f958 	bl	8001a40 <HAL_GetTick>
 8000790:	4602      	mov	r2, r0
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	611a      	str	r2, [r3, #16]
	if(gearbox->start_gear > 5)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7e9b      	ldrb	r3, [r3, #26]
 800079a:	2b05      	cmp	r3, #5
 800079c:	d90f      	bls.n	80007be <startUpshiftCallback+0x42>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f003 fee4 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80007ac:	f001 f948 	bl	8001a40 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_US_GearCut;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2209      	movs	r2, #9
 80007ba:	731a      	strb	r2, [r3, #12]
		return;
 80007bc:	e01e      	b.n	80007fc <startUpshiftCallback+0x80>
	}
	if(gearbox->start_gear == 4)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7e9b      	ldrb	r3, [r3, #26]
 80007c2:	2b04      	cmp	r3, #4
 80007c4:	d103      	bne.n	80007ce <startUpshiftCallback+0x52>
	{
		gearbox->_state = Idle;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	731a      	strb	r2, [r3, #12]
		return;
 80007cc:	e016      	b.n	80007fc <startUpshiftCallback+0x80>
	}
	HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d8:	f003 fecc 	bl	8004574 <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 80007dc:	f001 f930 	bl	8001a40 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	615a      	str	r2, [r3, #20]

	if(gearbox->start_gear == 0)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7e9b      	ldrb	r3, [r3, #26]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d103      	bne.n	80007f6 <startUpshiftCallback+0x7a>
	{
		gearbox->_state = UpshiftFromNeutral;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2202      	movs	r2, #2
 80007f2:	731a      	strb	r2, [r3, #12]
 80007f4:	e002      	b.n	80007fc <startUpshiftCallback+0x80>
	}
	else
	{
		gearbox->_state = UpshiftGearCut;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2203      	movs	r2, #3
 80007fa:	731a      	strb	r2, [r3, #12]
	}
}
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <upshiftFromNeutral>:
void upshiftFromNeutral(Gearbox_t* gearbox)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == 1) || (getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT)))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7b5b      	ldrb	r3, [r3, #13]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d008      	beq.n	8000824 <upshiftFromNeutral+0x22>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	21c8      	movs	r1, #200	; 0xc8
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fa17 	bl	8000c4c <getTimeout>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00e      	beq.n	8000842 <upshiftFromNeutral+0x40>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f003 fea1 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000832:	f001 f905 	bl	8001a40 <HAL_GetTick>
 8000836:	4602      	mov	r2, r0
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	615a      	str	r2, [r3, #20]
		gearbox->_state = Idle;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	731a      	strb	r2, [r3, #12]
	}
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <upshiftGearCut>:

void upshiftGearCut(Gearbox_t* gearbox)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, US_ACTUATOR_DELAY))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	2114      	movs	r1, #20
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f9f7 	bl	8000c4c <getTimeout>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d010      	beq.n	8000886 <upshiftGearCut+0x3c>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2110      	movs	r1, #16
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f003 fe82 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	22ff      	movs	r2, #255	; 0xff
 8000874:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000876:	f001 f8e3 	bl	8001a40 <HAL_GetTick>
 800087a:	4602      	mov	r2, r0
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	615a      	str	r2, [r3, #20]
		gearbox->_state = UpshiftFinish;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2204      	movs	r2, #4
 8000884:	731a      	strb	r2, [r3, #12]
	}
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <upshiftFinish>:

void upshiftFinish(Gearbox_t* gearbox)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear+1)||(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT)))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7b5b      	ldrb	r3, [r3, #13]
 800089a:	461a      	mov	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7e9b      	ldrb	r3, [r3, #26]
 80008a0:	3301      	adds	r3, #1
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d008      	beq.n	80008b8 <upshiftFinish+0x2a>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	21c8      	movs	r1, #200	; 0xc8
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f9cd 	bl	8000c4c <getTimeout>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d01e      	beq.n	80008f6 <upshiftFinish+0x68>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2110      	movs	r1, #16
 80008bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c0:	f003 fe58 	bl	8004574 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f003 fe51 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	227f      	movs	r2, #127	; 0x7f
 80008d6:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 80008d8:	f001 f8b2 	bl	8001a40 <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	615a      	str	r2, [r3, #20]
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695a      	ldr	r2, [r3, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	1ad2      	subs	r2, r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	61da      	str	r2, [r3, #28]
		gearbox->_state = Idle;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	731a      	strb	r2, [r3, #12]
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <startDownshiftCallback>:

void startDownshiftCallback(Gearbox_t* gearbox)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	gearbox->shift_start_tick = HAL_GetTick();
 8000908:	f001 f89a 	bl	8001a40 <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	611a      	str	r2, [r3, #16]
	gearbox->start_gear = gearbox->actual_gear;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7b5a      	ldrb	r2, [r3, #13]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	769a      	strb	r2, [r3, #26]

	if(gearbox->start_gear > 4)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7e9b      	ldrb	r3, [r3, #26]
 800091e:	2b04      	cmp	r3, #4
 8000920:	d90e      	bls.n	8000940 <startDownshiftCallback+0x40>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000928:	4816      	ldr	r0, [pc, #88]	; (8000984 <startDownshiftCallback+0x84>)
 800092a:	f003 fe23 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 800092e:	f001 f887 	bl	8001a40 <HAL_GetTick>
 8000932:	4602      	mov	r2, r0
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_DS_Clutch;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	220b      	movs	r2, #11
 800093c:	731a      	strb	r2, [r3, #12]
		return;
 800093e:	e01d      	b.n	800097c <startDownshiftCallback+0x7c>
	}
	else if(gearbox->start_gear == 0)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7e9b      	ldrb	r3, [r3, #26]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d103      	bne.n	8000950 <startDownshiftCallback+0x50>
	{
		gearbox->_state = Idle;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	731a      	strb	r2, [r3, #12]
		return;
 800094e:	e015      	b.n	800097c <startDownshiftCallback+0x7c>
	}

	HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000956:	480b      	ldr	r0, [pc, #44]	; (8000984 <startDownshiftCallback+0x84>)
 8000958:	f003 fe0c 	bl	8004574 <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 800095c:	f001 f870 	bl	8001a40 <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	615a      	str	r2, [r3, #20]

	if(gearbox->start_gear == 1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7e9b      	ldrb	r3, [r3, #26]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d103      	bne.n	8000976 <startDownshiftCallback+0x76>
	{
		gearbox->_state = DownshiftToNeutral;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2206      	movs	r2, #6
 8000972:	731a      	strb	r2, [r3, #12]
 8000974:	e002      	b.n	800097c <startDownshiftCallback+0x7c>
	}
	else
	{
		gearbox->_state = DownshiftRevMatch;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2207      	movs	r2, #7
 800097a:	731a      	strb	r2, [r3, #12]
	}
}
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	48000400 	.word	0x48000400

08000988 <downshiftToNeutral>:

void downshiftToNeutral(Gearbox_t* gearbox)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	2128      	movs	r1, #40	; 0x28
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f958 	bl	8000c4c <getTimeout>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d014      	beq.n	80009cc <downshiftToNeutral+0x44>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a8:	480a      	ldr	r0, [pc, #40]	; (80009d4 <downshiftToNeutral+0x4c>)
 80009aa:	f003 fde3 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80009ae:	f001 f847 	bl	8001a40 <HAL_GetTick>
 80009b2:	4602      	mov	r2, r0
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	615a      	str	r2, [r3, #20]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	695a      	ldr	r2, [r3, #20]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	1ad2      	subs	r2, r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	621a      	str	r2, [r3, #32]
		gearbox->_state = DownshiftFinish;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2208      	movs	r2, #8
 80009ca:	731a      	strb	r2, [r3, #12]
	}
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	48000400 	.word	0x48000400

080009d8 <downshiftRevMatch>:

void downshiftRevMatch(Gearbox_t* gearbox)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	2128      	movs	r1, #40	; 0x28
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f930 	bl	8000c4c <getTimeout>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d010      	beq.n	8000a14 <downshiftRevMatch+0x3c>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <downshiftRevMatch+0x44>)
 80009fa:	f003 fdbb 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80009fe:	f001 f81f 	bl	8001a40 <HAL_GetTick>
 8000a02:	4602      	mov	r2, r0
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	615a      	str	r2, [r3, #20]
		gearbox->gear_cut = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	76da      	strb	r2, [r3, #27]
		gearbox->_state = DownshiftFinish;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2208      	movs	r2, #8
 8000a12:	731a      	strb	r2, [r3, #12]
	}
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	48000400 	.word	0x48000400

08000a20 <downshiftFinish>:

void downshiftFinish(Gearbox_t* gearbox)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear -1 ) || (getTimeout(gearbox->timestamp_tick, DS_FINISH_TIMEOUT)))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7b5b      	ldrb	r3, [r3, #13]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7e9b      	ldrb	r3, [r3, #26]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d008      	beq.n	8000a4a <downshiftFinish+0x2a>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	21fa      	movs	r1, #250	; 0xfa
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f904 	bl	8000c4c <getTimeout>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d01d      	beq.n	8000a86 <downshiftFinish+0x66>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a50:	480f      	ldr	r0, [pc, #60]	; (8000a90 <downshiftFinish+0x70>)
 8000a52:	f003 fd8f 	bl	8004574 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <downshiftFinish+0x70>)
 8000a5e:	f003 fd89 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	227f      	movs	r2, #127	; 0x7f
 8000a66:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000a68:	f000 ffea 	bl	8001a40 <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	615a      	str	r2, [r3, #20]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	1ad2      	subs	r2, r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	621a      	str	r2, [r3, #32]
		gearbox->_state = Idle;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	731a      	strb	r2, [r3, #12]
	}
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	48000400 	.word	0x48000400

08000a94 <openLoop_upshift_gearCut>:

void openLoop_upshift_gearCut(Gearbox_t* gearbox)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_US_GEARCUT_DEALAY))
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	2164      	movs	r1, #100	; 0x64
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f8d2 	bl	8000c4c <getTimeout>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d010      	beq.n	8000ad0 <openLoop_upshift_gearCut+0x3c>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f003 fd5d 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	22ff      	movs	r2, #255	; 0xff
 8000abe:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000ac0:	f000 ffbe 	bl	8001a40 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_US_Finish;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	220a      	movs	r2, #10
 8000ace:	731a      	strb	r2, [r3, #12]
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <openLoop_upshift_finish>:

void openLoop_upshift_finish(Gearbox_t* gearbox)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	21c8      	movs	r1, #200	; 0xc8
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f8b0 	bl	8000c4c <getTimeout>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d01e      	beq.n	8000b30 <openLoop_upshift_finish+0x58>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2110      	movs	r1, #16
 8000af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afa:	f003 fd3b 	bl	8004574 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f003 fd34 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	227f      	movs	r2, #127	; 0x7f
 8000b10:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000b12:	f000 ff95 	bl	8001a40 <HAL_GetTick>
 8000b16:	4602      	mov	r2, r0
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	615a      	str	r2, [r3, #20]
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	695a      	ldr	r2, [r3, #20]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	1ad2      	subs	r2, r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	61da      	str	r2, [r3, #28]
		gearbox->_state = Idle;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	731a      	strb	r2, [r3, #12]
	}
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <openLoop_downshift_clutch>:

void openLoop_downshift_clutch(Gearbox_t* gearbox)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	2128      	movs	r1, #40	; 0x28
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f880 	bl	8000c4c <getTimeout>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d010      	beq.n	8000b74 <openLoop_downshift_clutch+0x3c>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <openLoop_downshift_clutch+0x44>)
 8000b5a:	f003 fd0b 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000b5e:	f000 ff6f 	bl	8001a40 <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	615a      	str	r2, [r3, #20]
		gearbox->gear_cut = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	76da      	strb	r2, [r3, #27]
		gearbox->_state = OL_DS_Finish;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	220c      	movs	r2, #12
 8000b72:	731a      	strb	r2, [r3, #12]
	}
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	48000400 	.word	0x48000400

08000b80 <openLoop_downshift_finish>:

void openLoop_downshift_finish(Gearbox_t* gearbox)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_DS_CLUTCH_DELAY))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	2164      	movs	r1, #100	; 0x64
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f85c 	bl	8000c4c <getTimeout>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d01d      	beq.n	8000bd6 <openLoop_downshift_finish+0x56>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <openLoop_downshift_finish+0x60>)
 8000ba2:	f003 fce7 	bl	8004574 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <openLoop_downshift_finish+0x60>)
 8000bae:	f003 fce1 	bl	8004574 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	227f      	movs	r2, #127	; 0x7f
 8000bb6:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000bb8:	f000 ff42 	bl	8001a40 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	615a      	str	r2, [r3, #20]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	1ad2      	subs	r2, r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
		gearbox->_state = Idle;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	731a      	strb	r2, [r3, #12]
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	48000400 	.word	0x48000400

08000be4 <startUpshift>:

void startUpshift(Gearbox_t* gearbox)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7b1b      	ldrb	r3, [r3, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <startUpshift+0x16>
		gearbox->_state = StartUpshift;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	731a      	strb	r2, [r3, #12]
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <startDownshift>:
void startDownshift(Gearbox_t* gearbox)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7b1b      	ldrb	r3, [r3, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <startDownshift+0x16>
		gearbox->_state = StartDownshift;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2205      	movs	r2, #5
 8000c1a:	731a      	strb	r2, [r3, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <clutch>:

void clutch(bool ON)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	461a      	mov	r2, r3
 8000c36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <clutch+0x20>)
 8000c3c:	f003 fc9a 	bl	8004574 <HAL_GPIO_WritePin>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	48000400 	.word	0x48000400

08000c4c <getTimeout>:
	else
		return false;
}

bool getTimeout(uint32_t actual_time, uint32_t maximum_waiting_time)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	if((HAL_GetTick() - actual_time) >= maximum_waiting_time)
 8000c56:	f000 fef3 	bl	8001a40 <HAL_GetTick>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d801      	bhi.n	8000c6a <getTimeout+0x1e>
	{
		return true;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e000      	b.n	8000c6c <getTimeout+0x20>
	}
	else
		return false;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000c98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000c9e:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000ca0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ca4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ca6:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cac:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf2:	4817      	ldr	r0, [pc, #92]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000cf4:	f000 fed8 	bl	8001aa8 <HAL_ADC_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cfe:	f000 fa27 	bl	8001150 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4810      	ldr	r0, [pc, #64]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000d0e:	f002 f831 	bl	8002d74 <HAL_ADCEx_MultiModeConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000d18:	f000 fa1a 	bl	8001150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000d28:	2305      	movs	r3, #5
 8000d2a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_ADC1_Init+0xdc>)
 8000d3a:	f001 fd31 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000d44:	f000 fa04 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	; 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000114 	.word	0x20000114

08000d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d64:	d13c      	bne.n	8000de0 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <HAL_ADC_MspInit+0x94>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <HAL_ADC_MspInit+0x94>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <HAL_ADC_MspInit+0x94>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000d80:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <HAL_ADC_MspInit+0x9c>)
 8000d82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000da8:	2220      	movs	r2, #32
 8000daa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000dae:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000db2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000db6:	f003 f898 	bl	8003eea <HAL_DMA_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000dc0:	f000 f9c6 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a09      	ldr	r2, [pc, #36]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_ADC_MspInit+0x98>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2012      	movs	r0, #18
 8000dd6:	f003 f852 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dda:	2012      	movs	r0, #18
 8000ddc:	f003 f86b 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40021000 	.word	0x40021000
 8000dec:	20000164 	.word	0x20000164
 8000df0:	40020008 	.word	0x40020008

08000df4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_CAN_Init+0x64>)
 8000dfa:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <MX_CAN_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e00:	2204      	movs	r2, #4
 8000e02:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e12:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000e16:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e1a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000e1e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_CAN_Init+0x64>)
 8000e46:	f002 f9b7 	bl	80031b8 <HAL_CAN_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e50:	f000 f97e 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001a8 	.word	0x200001a8
 8000e5c:	40006400 	.word	0x40006400

08000e60 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a28      	ldr	r2, [pc, #160]	; (8000f20 <HAL_CAN_MspInit+0xc0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d149      	bne.n	8000f16 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <HAL_CAN_MspInit+0xc4>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <HAL_CAN_MspInit+0xc4>)
 8000e88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_CAN_MspInit+0xc4>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <HAL_CAN_MspInit+0xc4>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <HAL_CAN_MspInit+0xc4>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_CAN_MspInit+0xc4>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f003 f9bd 	bl	8004250 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2013      	movs	r0, #19
 8000edc:	f002 ffcf 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000ee0:	2013      	movs	r0, #19
 8000ee2:	f002 ffe8 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2014      	movs	r0, #20
 8000eec:	f002 ffc7 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000ef0:	2014      	movs	r0, #20
 8000ef2:	f002 ffe0 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2015      	movs	r0, #21
 8000efc:	f002 ffbf 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000f00:	2015      	movs	r0, #21
 8000f02:	f002 ffd8 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2016      	movs	r0, #22
 8000f0c:	f002 ffb7 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000f10:	2016      	movs	r0, #22
 8000f12:	f002 ffd0 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40006400 	.word	0x40006400
 8000f24:	40021000 	.word	0x40021000

08000f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_DMA_Init+0x38>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <MX_DMA_Init+0x38>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_DMA_Init+0x38>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	200b      	movs	r0, #11
 8000f4c:	f002 ff97 	bl	8003e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f50:	200b      	movs	r0, #11
 8000f52:	f002 ffb0 	bl	8003eb6 <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7a:	4b38      	ldr	r3, [pc, #224]	; (800105c <MX_GPIO_Init+0xf8>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a37      	ldr	r2, [pc, #220]	; (800105c <MX_GPIO_Init+0xf8>)
 8000f80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <MX_GPIO_Init+0xf8>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <MX_GPIO_Init+0xf8>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a31      	ldr	r2, [pc, #196]	; (800105c <MX_GPIO_Init+0xf8>)
 8000f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <MX_GPIO_Init+0xf8>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b2c      	ldr	r3, [pc, #176]	; (800105c <MX_GPIO_Init+0xf8>)
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	4a2b      	ldr	r2, [pc, #172]	; (800105c <MX_GPIO_Init+0xf8>)
 8000fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb4:	6153      	str	r3, [r2, #20]
 8000fb6:	4b29      	ldr	r3, [pc, #164]	; (800105c <MX_GPIO_Init+0xf8>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEAR_CUT_Pin|GEAR_UP_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f003 fad2 	bl	8004574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLUTCH_Pin|GEAR_DOWN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8000fd6:	4822      	ldr	r0, [pc, #136]	; (8001060 <MX_GPIO_Init+0xfc>)
 8000fd8:	f003 facc 	bl	8004574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_CUT_Pin;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_CUT_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f003 f92b 	bl	8004250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CLUTCH_Pin|GEAR_DOWN_Pin;
 8000ffa:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	4813      	ldr	r0, [pc, #76]	; (8001060 <MX_GPIO_Init+0xfc>)
 8001014:	f003 f91c 	bl	8004250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_UP_Pin;
 8001018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_UP_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f003 f90c 	bl	8004250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4619      	mov	r1, r3
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_GPIO_Init+0xfc>)
 8001050:	f003 f8fe 	bl	8004250 <HAL_GPIO_Init>

}
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000
 8001060:	48000400 	.word	0x48000400

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f000 fc90 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f816 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f7ff ff78 	bl	8000f64 <MX_GPIO_Init>
  MX_DMA_Init();
 8001074:	f7ff ff58 	bl	8000f28 <MX_DMA_Init>
  MX_CAN_Init();
 8001078:	f7ff febc 	bl	8000df4 <MX_CAN_Init>
  MX_OPAMP1_Init();
 800107c:	f000 f86e 	bl	800115c <MX_OPAMP1_Init>
  MX_ADC1_Init();
 8001080:	f7ff fdf8 	bl	8000c74 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001084:	f000 f960 	bl	8001348 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 8001088:	f7ff f8e2 	bl	8000250 <AppInit>
  HAL_TIM_Base_Start_IT(&htim2);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <main+0x34>)
 800108e:	f004 fdf7 	bl	8005c80 <HAL_TIM_Base_Start_IT>
  AppProcess();
 8001092:	f7ff f949 	bl	8000328 <AppProcess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001096:	e7fe      	b.n	8001096 <main+0x32>
 8001098:	20000204 	.word	0x20000204

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b090      	sub	sp, #64	; 0x40
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0318 	add.w	r3, r7, #24
 80010a6:	2228      	movs	r2, #40	; 0x28
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fa2a 	bl	8006504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010c2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80010c8:	2301      	movs	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fb4d 	bl	8004784 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010f0:	f000 f82e 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2302      	movs	r3, #2
 80010fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2102      	movs	r1, #2
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fb76 	bl	8005800 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800111a:	f000 f819 	bl	8001150 <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3740      	adds	r7, #64	; 0x40
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001138:	d103      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800113e:	f003 fa31 	bl	80045a4 <HAL_GPIO_TogglePin>
	}
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	48000400 	.word	0x48000400

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_OPAMP1_Init+0x38>)
 8001162:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <MX_OPAMP1_Init+0x3c>)
 8001164:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_OPAMP1_Init+0x38>)
 8001168:	2260      	movs	r2, #96	; 0x60
 800116a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_OPAMP1_Init+0x38>)
 800116e:	220c      	movs	r2, #12
 8001170:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_OPAMP1_Init+0x38>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_OPAMP1_Init+0x38>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_OPAMP1_Init+0x38>)
 8001180:	f003 fa2a 	bl	80045d8 <HAL_OPAMP_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 800118a:	f7ff ffe1 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200001d0 	.word	0x200001d0
 8001198:	40010038 	.word	0x40010038

0800119c <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <HAL_OPAMP_MspInit+0x5c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d118      	bne.n	80011f0 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_OPAMP_MspInit+0x60>)
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_OPAMP_MspInit+0x60>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6153      	str	r3, [r2, #20]
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_OPAMP_MspInit+0x60>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GEAR_POS_Pin|GPIO_PIN_2;
 80011d6:	2306      	movs	r3, #6
 80011d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f003 f830 	bl	8004250 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40010038 	.word	0x40010038
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_MspInit+0x44>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a0e      	ldr	r2, [pc, #56]	; (8001244 <HAL_MspInit+0x44>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_MspInit+0x44>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x44>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x44>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x44>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 fbc0 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <DMA1_Channel1_IRQHandler+0x10>)
 80012a2:	f002 fec8 	bl	8004036 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000164 	.word	0x20000164

080012b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <ADC1_2_IRQHandler+0x10>)
 80012b6:	f000 fef3 	bl	80020a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000114 	.word	0x20000114

080012c4 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80012ca:	f002 fac6 	bl	800385a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001a8 	.word	0x200001a8

080012d8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80012de:	f002 fabc 	bl	800385a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200001a8 	.word	0x200001a8

080012ec <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <CAN_RX1_IRQHandler+0x10>)
 80012f2:	f002 fab2 	bl	800385a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001a8 	.word	0x200001a8

08001300 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END CAN_SCE_IRQn 0 */
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <TIM2_IRQHandler+0x10>)
 8001316:	f004 fd1d 	bl	8005d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000204 	.word	0x20000204

08001324 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SystemInit+0x20>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <SystemInit+0x20>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_TIM2_Init+0x98>)
 8001368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800136c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_TIM2_Init+0x98>)
 8001370:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001374:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_TIM2_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 17999;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_TIM2_Init+0x98>)
 800137e:	f244 624f 	movw	r2, #17999	; 0x464f
 8001382:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_TIM2_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_TIM2_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001390:	4813      	ldr	r0, [pc, #76]	; (80013e0 <MX_TIM2_Init+0x98>)
 8001392:	f004 fc1d 	bl	8005bd0 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800139c:	f7ff fed8 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <MX_TIM2_Init+0x98>)
 80013ae:	f004 fdf0 	bl	8005f92 <HAL_TIM_ConfigClockSource>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80013b8:	f7ff feca 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_TIM2_Init+0x98>)
 80013ca:	f004 fffd 	bl	80063c8 <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80013d4:	f7ff febc 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000204 	.word	0x20000204

080013e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f4:	d113      	bne.n	800141e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_TIM_Base_MspInit+0x44>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_TIM_Base_MspInit+0x44>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	61d3      	str	r3, [r2, #28]
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_TIM_Base_MspInit+0x44>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	201c      	movs	r0, #28
 8001414:	f002 fd33 	bl	8003e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001418:	201c      	movs	r0, #28
 800141a:	f002 fd4c 	bl	8003eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000

0800142c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800142c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001464 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001430:	f7ff ff78 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001434:	480c      	ldr	r0, [pc, #48]	; (8001468 <LoopForever+0x6>)
  ldr r1, =_edata
 8001436:	490d      	ldr	r1, [pc, #52]	; (800146c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <LoopForever+0xe>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800144c:	4c0a      	ldr	r4, [pc, #40]	; (8001478 <LoopForever+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145a:	f005 f85b 	bl	8006514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145e:	f7ff fe01 	bl	8001064 <main>

08001462 <LoopForever>:

LoopForever:
    b LoopForever
 8001462:	e7fe      	b.n	8001462 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001464:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800146c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001470:	080065c8 	.word	0x080065c8
  ldr r2, =_sbss
 8001474:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001478:	200004a8 	.word	0x200004a8

0800147c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800147c:	e7fe      	b.n	800147c <ADC3_IRQHandler>
	...

08001480 <CAN_FIFO_Add>:

#include "CAN_FIFO.h"



void CAN_FIFO_Add(struct CAN_FIFO *fifo, uint8_t *data_ptr){
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]

	if(fifo->empty){
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <CAN_FIFO_Add+0x2c>
		fifo->data_ptr[fifo->last_element]=data_ptr;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	785b      	ldrb	r3, [r3, #1]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	605a      	str	r2, [r3, #4]
		fifo->empty=0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return;
 80014aa:	e02c      	b.n	8001506 <CAN_FIFO_Add+0x86>
	}
	fifo->last_element=(fifo->last_element+1)%CAN_FIFO_SIZE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <CAN_FIFO_Add+0x90>)
 80014b4:	fb82 1203 	smull	r1, r2, r2, r3
 80014b8:	1151      	asrs	r1, r2, #5
 80014ba:	17da      	asrs	r2, r3, #31
 80014bc:	1a8a      	subs	r2, r1, r2
 80014be:	2164      	movs	r1, #100	; 0x64
 80014c0:	fb01 f202 	mul.w	r2, r1, r2
 80014c4:	1a9a      	subs	r2, r3, r2
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	705a      	strb	r2, [r3, #1]
	if(fifo->last_element==fifo->first_element){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	785a      	ldrb	r2, [r3, #1]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10f      	bne.n	80014f8 <CAN_FIFO_Add+0x78>
		fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <CAN_FIFO_Add+0x90>)
 80014e0:	fb82 1203 	smull	r1, r2, r2, r3
 80014e4:	1151      	asrs	r1, r2, #5
 80014e6:	17da      	asrs	r2, r3, #31
 80014e8:	1a8a      	subs	r2, r1, r2
 80014ea:	2164      	movs	r1, #100	; 0x64
 80014ec:	fb01 f202 	mul.w	r2, r1, r2
 80014f0:	1a9a      	subs	r2, r3, r2
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	701a      	strb	r2, [r3, #0]
	}
	fifo->data_ptr[fifo->last_element]=data_ptr;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	605a      	str	r2, [r3, #4]


}
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	51eb851f 	.word	0x51eb851f

08001514 <CAN_FIFO_Get>:

/* return 0 if FIFO is empty */
uint8_t* CAN_FIFO_Get(struct CAN_FIFO *fifo){
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

	uint8_t *temp;
	if(fifo->empty){
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <CAN_FIFO_Get+0x16>
		return 0;
 8001526:	2300      	movs	r3, #0
 8001528:	e023      	b.n	8001572 <CAN_FIFO_Get+0x5e>
	}
	temp=fifo->data_ptr[fifo->first_element];
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60fb      	str	r3, [r7, #12]
	if(fifo->first_element==fifo->last_element){
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	781a      	ldrb	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	429a      	cmp	r2, r3
 8001542:	d105      	bne.n	8001550 <CAN_FIFO_Get+0x3c>
		fifo->empty=1;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return temp;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	e010      	b.n	8001572 <CAN_FIFO_Get+0x5e>
	}
	fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <CAN_FIFO_Get+0x6c>)
 8001558:	fb82 1203 	smull	r1, r2, r2, r3
 800155c:	1151      	asrs	r1, r2, #5
 800155e:	17da      	asrs	r2, r3, #31
 8001560:	1a8a      	subs	r2, r1, r2
 8001562:	2164      	movs	r1, #100	; 0x64
 8001564:	fb01 f202 	mul.w	r2, r1, r2
 8001568:	1a9a      	subs	r2, r3, r2
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	701a      	strb	r2, [r3, #0]
	return temp;
 8001570:	68fb      	ldr	r3, [r7, #12]

}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	51eb851f 	.word	0x51eb851f

08001584 <CAN_FIFO_Flush>:
uint8_t CAN_FIFO_Empty(struct CAN_FIFO *fifo){

	return fifo->empty;
}

void CAN_FIFO_Flush(struct CAN_FIFO *fifo){
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

	fifo->first_element=0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
	fifo->last_element=0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	705a      	strb	r2, [r3, #1]
	fifo->empty=1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <CAN_Init>:
	struct can_frame* pFrames[CAN_MAX_FRAME_NUM];
	uint8_t values_num;
}_can_info;


void CAN_Init(){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	CAN_HW_Init();
 80015b0:	f000 f8c6 	bl	8001740 <CAN_HW_Init>
	CAN_FIFO_Flush(&FIFO_CAN_TX);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <CAN_Init+0x14>)
 80015b6:	f7ff ffe5 	bl	8001584 <CAN_FIFO_Flush>
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000254 	.word	0x20000254

080015c4 <CAN_InitFrame>:

void CAN_InitFrame(struct can_frame* pFrame, uint16_t id, uint16_t period, uint8_t dlc) {
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4603      	mov	r3, r0
 80015d4:	817b      	strh	r3, [r7, #10]
 80015d6:	460b      	mov	r3, r1
 80015d8:	813b      	strh	r3, [r7, #8]
 80015da:	4613      	mov	r3, r2
 80015dc:	71fb      	strb	r3, [r7, #7]
	
	pFrame->core.id = id;
 80015de:	897a      	ldrh	r2, [r7, #10]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	605a      	str	r2, [r3, #4]
	pFrame->period = period;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	893a      	ldrh	r2, [r7, #8]
 80015e8:	829a      	strh	r2, [r3, #20]
	pFrame->core.dlc = dlc;
 80015ea:	79fa      	ldrb	r2, [r7, #7]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	609a      	str	r2, [r3, #8]
	_can_info.pFrames[_can_info.frames_num] = pFrame;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <CAN_InitFrame+0x54>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <CAN_InitFrame+0x54>)
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	605a      	str	r2, [r3, #4]
	_can_info.frames_num++;
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <CAN_InitFrame+0x54>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <CAN_InitFrame+0x54>)
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	200003ec 	.word	0x200003ec

0800161c <FilterFrame>:
	_can_info.values_num++;
}

/* returns index of frame in _can_info or
   returns 255 if didn't found matching frame*/
uint8_t FilterFrame(uint16_t id){
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
	
	uint8_t i;
	for(i = 0; i < _can_info.frames_num; i++){
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e00d      	b.n	8001648 <FilterFrame+0x2c>
		if(_can_info.pFrames[i]->core.id == id){
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	4a0c      	ldr	r2, [pc, #48]	; (8001660 <FilterFrame+0x44>)
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	429a      	cmp	r2, r3
 800163c:	d101      	bne.n	8001642 <FilterFrame+0x26>
			return i;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	e008      	b.n	8001654 <FilterFrame+0x38>
	for(i = 0; i < _can_info.frames_num; i++){
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	3301      	adds	r3, #1
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <FilterFrame+0x44>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	429a      	cmp	r2, r3
 8001650:	d3ec      	bcc.n	800162c <FilterFrame+0x10>
		}
	}
	return 255;
 8001652:	23ff      	movs	r3, #255	; 0xff
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	200003ec 	.word	0x200003ec

08001664 <CAN_GetTickMs>:
	
	value = (value + pCan_value->ofs)*pCan_value->mult/pCan_value->div;
	return value;
}

inline uint32_t CAN_GetTickMs(){
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	return CAN_HW_GetTickMs();
 8001668:	f000 f8ac 	bl	80017c4 <CAN_HW_GetTickMs>
 800166c:	4603      	mov	r3, r0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <CAN_SendFrame>:
	if(!pFrame->tick_ms) return 0;
	if(CAN_GetTickMs() - pFrame->tick_ms > pFrame->period*10) return 0;
	return 1;
}

inline uint8_t CAN_SendFrame(struct can_frame* pFrame) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(!CAN_HW_SendFrame(pFrame)){
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f8a9 	bl	80017d4 <CAN_HW_SendFrame>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <CAN_SendFrame+0x1c>
		CAN_FIFO_Add(&FIFO_CAN_TX, (uint8_t*)pFrame);
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4804      	ldr	r0, [pc, #16]	; (800169c <CAN_SendFrame+0x28>)
 800168c:	f7ff fef8 	bl	8001480 <CAN_FIFO_Add>
	}
	return 1;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000254 	.word	0x20000254

080016a0 <CAN_ReceiveCallback>:
void CAN_SetRxCallback(void (*callback)(struct can_frame* frame))
{
	CAN_RxCallback = callback;
}

inline void CAN_ReceiveCallback(struct can_msg* msg){
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	uint8_t index;
	index = FilterFrame(msg->id);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ffb4 	bl	800161c <FilterFrame>
 80016b4:	4603      	mov	r3, r0
 80016b6:	73fb      	strb	r3, [r7, #15]
	if(index==255) return;
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	2bff      	cmp	r3, #255	; 0xff
 80016bc:	d023      	beq.n	8001706 <CAN_ReceiveCallback+0x66>
	memcpy(_can_info.pFrames[index]->core.data, msg->data, 8);
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <CAN_ReceiveCallback+0x70>)
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f103 000c 	add.w	r0, r3, #12
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	330c      	adds	r3, #12
 80016d0:	2208      	movs	r2, #8
 80016d2:	4619      	mov	r1, r3
 80016d4:	f004 ff42 	bl	800655c <memcpy>
	_can_info.pFrames[index]->tick_ms = CAN_GetTickMs();
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <CAN_ReceiveCallback+0x70>)
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	685c      	ldr	r4, [r3, #4]
 80016e2:	f7ff ffbf 	bl	8001664 <CAN_GetTickMs>
 80016e6:	4603      	mov	r3, r0
 80016e8:	61a3      	str	r3, [r4, #24]
	if(CAN_RxCallback != NULL) CAN_RxCallback(_can_info.pFrames[index]);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <CAN_ReceiveCallback+0x74>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <CAN_ReceiveCallback+0x68>
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <CAN_ReceiveCallback+0x74>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	4905      	ldr	r1, [pc, #20]	; (8001710 <CAN_ReceiveCallback+0x70>)
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	4790      	blx	r2
 8001704:	e000      	b.n	8001708 <CAN_ReceiveCallback+0x68>
	if(index==255) return;
 8001706:	bf00      	nop
}
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bd90      	pop	{r4, r7, pc}
 800170e:	bf00      	nop
 8001710:	200003ec 	.word	0x200003ec
 8001714:	20000250 	.word	0x20000250

08001718 <CAN_TxCompleteCallback>:

void CAN_TxCompleteCallback(){
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

	uint8_t* pFrame;


	pFrame = CAN_FIFO_Get(&FIFO_CAN_TX);
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <CAN_TxCompleteCallback+0x24>)
 8001720:	f7ff fef8 	bl	8001514 <CAN_FIFO_Get>
 8001724:	6078      	str	r0, [r7, #4]
	if(!pFrame) return;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <CAN_TxCompleteCallback+0x1c>
	CAN_SendFrame((struct can_frame*)pFrame);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ffa1 	bl	8001674 <CAN_SendFrame>
 8001732:	e000      	b.n	8001736 <CAN_TxCompleteCallback+0x1e>
	if(!pFrame) return;
 8001734:	bf00      	nop
}
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000254 	.word	0x20000254

08001740 <CAN_HW_Init>:
#include "CAN_LIB_HW.h"

uint8_t retransmision_counter;

void CAN_HW_Init(){
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

	static CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <CAN_HW_Init+0x7c>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <CAN_HW_Init+0x7c>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <CAN_HW_Init+0x7c>)
 8001752:	2201      	movs	r2, #1
 8001754:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <CAN_HW_Init+0x7c>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <CAN_HW_Init+0x7c>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <CAN_HW_Init+0x7c>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <CAN_HW_Init+0x7c>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <CAN_HW_Init+0x7c>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <CAN_HW_Init+0x7c>)
 8001776:	2201      	movs	r2, #1
 8001778:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <CAN_HW_Init+0x7c>)
 800177c:	220e      	movs	r2, #14
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&CAN_HANDLE, &sFilterConfig) != HAL_OK)
 8001780:	490e      	ldr	r1, [pc, #56]	; (80017bc <CAN_HW_Init+0x7c>)
 8001782:	480f      	ldr	r0, [pc, #60]	; (80017c0 <CAN_HW_Init+0x80>)
 8001784:	f001 fe13 	bl	80033ae <HAL_CAN_ConfigFilter>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <CAN_HW_Init+0x52>
	{
		/* Filter configuration Error */
		Error_Handler();
 800178e:	f7ff fcdf 	bl	8001150 <Error_Handler>
	}

	if (HAL_CAN_Start(&CAN_HANDLE) != HAL_OK)
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <CAN_HW_Init+0x80>)
 8001794:	f001 fed5 	bl	8003542 <HAL_CAN_Start>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <CAN_HW_Init+0x62>
	{
		/* Start Error */
		Error_Handler();
 800179e:	f7ff fcd7 	bl	8001150 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&CAN_HANDLE, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN
 80017a2:	f248 010f 	movw	r1, #32783	; 0x800f
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <CAN_HW_Init+0x80>)
 80017a8:	f002 f831 	bl	800380e <HAL_CAN_ActivateNotification>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <CAN_HW_Init+0x76>
			| CAN_IT_RX_FIFO0_FULL | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 80017b2:	f7ff fccd 	bl	8001150 <Error_Handler>
	}

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000448 	.word	0x20000448
 80017c0:	200001a8 	.word	0x200001a8

080017c4 <CAN_HW_GetTickMs>:

inline uint32_t CAN_HW_GetTickMs(){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80017c8:	f000 f93a 	bl	8001a40 <HAL_GetTick>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <CAN_HW_SendFrame>:

uint8_t CAN_HW_SendFrame(struct can_frame* pFrame){
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

	/* Check if mailbox is free */
    if ((CAN_HANDLE.Instance->TSR & CAN_TSR_TME0) == 0U) return 0;
 80017dc:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <CAN_HW_SendFrame+0xc0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <CAN_HW_SendFrame+0x1a>
 80017ea:	2300      	movs	r3, #0
 80017ec:	e04b      	b.n	8001886 <CAN_HW_SendFrame+0xb2>

    /* Set up the Id */
    if(pFrame->core.isExtId){
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <CAN_HW_SendFrame+0x36>
    	CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_EXID_Pos) | CAN_ID_EXT | CAN_RTR_DATA);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	00da      	lsls	r2, r3, #3
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <CAN_HW_SendFrame+0xc0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0204 	orr.w	r2, r2, #4
 8001804:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001808:	e006      	b.n	8001818 <CAN_HW_SendFrame+0x44>
    }
    else{
        CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_STID_Pos) | CAN_RTR_DATA);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <CAN_HW_SendFrame+0xc0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	0552      	lsls	r2, r2, #21
 8001814:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    }

    /* Set up the DLC */
    CAN_HANDLE.Instance->sTxMailBox[0].TDTR = pFrame->core.dlc;
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <CAN_HW_SendFrame+0xc0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6892      	ldr	r2, [r2, #8]
 8001820:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    /* Set up the data field */
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDHR,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7cdb      	ldrb	r3, [r3, #19]
 8001828:	061a      	lsls	r2, r3, #24
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7c9b      	ldrb	r3, [r3, #18]
 800182e:	041b      	lsls	r3, r3, #16
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7c5b      	ldrb	r3, [r3, #17]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7c1b      	ldrb	r3, [r3, #16]
 800183e:	4619      	mov	r1, r3
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <CAN_HW_SendFrame+0xc0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
              ((uint32_t)pFrame->core.data[7] << CAN_TDH0R_DATA7_Pos) |
              ((uint32_t)pFrame->core.data[6] << CAN_TDH0R_DATA6_Pos) |
              ((uint32_t)pFrame->core.data[5] << CAN_TDH0R_DATA5_Pos) |
              ((uint32_t)pFrame->core.data[4] << CAN_TDH0R_DATA4_Pos));
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDLR,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7bdb      	ldrb	r3, [r3, #15]
 800184e:	061a      	lsls	r2, r3, #24
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7b9b      	ldrb	r3, [r3, #14]
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7b5b      	ldrb	r3, [r3, #13]
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7b1b      	ldrb	r3, [r3, #12]
 8001864:	4619      	mov	r1, r3
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <CAN_HW_SendFrame+0xc0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
              ((uint32_t)pFrame->core.data[2] << CAN_TDL0R_DATA2_Pos) |
              ((uint32_t)pFrame->core.data[1] << CAN_TDL0R_DATA1_Pos) |
              ((uint32_t)pFrame->core.data[0] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(CAN_HANDLE.Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <CAN_HW_SendFrame+0xc0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <CAN_HW_SendFrame+0xc0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0201 	orr.w	r2, r2, #1
 8001880:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    return 1;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200001a8 	.word	0x200001a8

08001898 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 80018a0:	f7ff ff3a 	bl	8001718 <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000444 	.word	0x20000444

080018b8 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 80018c0:	f7ff ff2a 	bl	8001718 <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_CAN_TxMailbox0AbortCallback+0x1c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000444 	.word	0x20000444

080018d8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

	static struct can_msg msg;
	static CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data);
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80018e4:	2100      	movs	r1, #0
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f001 fe6f 	bl	80035ca <HAL_CAN_GetRxMessage>
	msg.dlc = RxHeader.DLC;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018f2:	6093      	str	r3, [r2, #8]
	msg.id = RxHeader.StdId;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a06      	ldr	r2, [pc, #24]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018fa:	6053      	str	r3, [r2, #4]
	CAN_ReceiveCallback(&msg);
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018fe:	f7ff fecf 	bl	80016a0 <CAN_ReceiveCallback>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000498 	.word	0x20000498
 8001910:	20000470 	.word	0x20000470
 8001914:	2000048c 	.word	0x2000048c

08001918 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

	static uint32_t errorcode;
	errorcode = HAL_CAN_GetError(hcan);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f002 f997 	bl	8003c68 <HAL_CAN_GetError>
 800193a:	4603      	mov	r3, r0
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_CAN_ErrorCallback+0x58>)
 800193e:	6013      	str	r3, [r2, #0]
	HAL_CAN_ResetError(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f002 f99d 	bl	8003c80 <HAL_CAN_ResetError>

	/* arbitration lost, retransmit */
	if(errorcode & HAL_CAN_ERROR_TX_ALST0){
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_CAN_ErrorCallback+0x58>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800194e:	2b00      	cmp	r3, #0
 8001950:	d013      	beq.n	800197a <HAL_CAN_ErrorCallback+0x4e>

		if(retransmision_counter < CAN_ARB_LOST_RETR){
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_CAN_ErrorCallback+0x5c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b13      	cmp	r3, #19
 8001958:	d80f      	bhi.n	800197a <HAL_CAN_ErrorCallback+0x4e>
		    SET_BIT(CAN_HANDLE->Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			retransmision_counter++;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_CAN_ErrorCallback+0x5c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <HAL_CAN_ErrorCallback+0x5c>)
 8001978:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200004a0 	.word	0x200004a0
 8001988:	20000444 	.word	0x20000444

0800198c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x28>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x28>)
 8001996:	f043 0310 	orr.w	r3, r3, #16
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f002 fa63 	bl	8003e68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fc2a 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40022000 	.word	0x40022000

080019b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fa7b 	bl	8003ed2 <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f002 fa43 	bl	8003e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	200004a4 	.word	0x200004a4

08001a40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	200004a4 	.word	0x200004a4

08001a58 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09a      	sub	sp, #104	; 0x68
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e1c9      	b.n	8001e5c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d176      	bne.n	8001bc8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d152      	bne.n	8001b88 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff f929 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d13b      	bne.n	8001b88 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f001 faeb 	bl	80030ec <ADC_Disable>
 8001b16:	4603      	mov	r3, r0
 8001b18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d12f      	bne.n	8001b88 <HAL_ADC_Init+0xe0>
 8001b28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d12b      	bne.n	8001b88 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b38:	f023 0302 	bic.w	r3, r3, #2
 8001b3c:	f043 0202 	orr.w	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b52:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b62:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b64:	4b86      	ldr	r3, [pc, #536]	; (8001d80 <HAL_ADC_Init+0x2d8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a86      	ldr	r2, [pc, #536]	; (8001d84 <HAL_ADC_Init+0x2dc>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9a      	lsrs	r2, r3, #18
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba4:	d110      	bne.n	8001bc8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f023 0312 	bic.w	r3, r3, #18
 8001bae:	f043 0210 	orr.w	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 8136 	bne.w	8001e42 <HAL_ADC_Init+0x39a>
 8001bd6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 8131 	bne.w	8001e42 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 8129 	bne.w	8001e42 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bf8:	f043 0202 	orr.w	r2, r3, #2
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c08:	d004      	beq.n	8001c14 <HAL_ADC_Init+0x16c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5e      	ldr	r2, [pc, #376]	; (8001d88 <HAL_ADC_Init+0x2e0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_Init+0x170>
 8001c14:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_ADC_Init+0x2e4>)
 8001c16:	e000      	b.n	8001c1a <HAL_ADC_Init+0x172>
 8001c18:	4b5d      	ldr	r3, [pc, #372]	; (8001d90 <HAL_ADC_Init+0x2e8>)
 8001c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c24:	d102      	bne.n	8001c2c <HAL_ADC_Init+0x184>
 8001c26:	4b58      	ldr	r3, [pc, #352]	; (8001d88 <HAL_ADC_Init+0x2e0>)
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e01a      	b.n	8001c62 <HAL_ADC_Init+0x1ba>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a55      	ldr	r2, [pc, #340]	; (8001d88 <HAL_ADC_Init+0x2e0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d103      	bne.n	8001c3e <HAL_ADC_Init+0x196>
 8001c36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e011      	b.n	8001c62 <HAL_ADC_Init+0x1ba>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a54      	ldr	r2, [pc, #336]	; (8001d94 <HAL_ADC_Init+0x2ec>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d102      	bne.n	8001c4e <HAL_ADC_Init+0x1a6>
 8001c48:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_ADC_Init+0x2f0>)
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e009      	b.n	8001c62 <HAL_ADC_Init+0x1ba>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a51      	ldr	r2, [pc, #324]	; (8001d98 <HAL_ADC_Init+0x2f0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d102      	bne.n	8001c5e <HAL_ADC_Init+0x1b6>
 8001c58:	4b4e      	ldr	r3, [pc, #312]	; (8001d94 <HAL_ADC_Init+0x2ec>)
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e001      	b.n	8001c62 <HAL_ADC_Init+0x1ba>
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d108      	bne.n	8001c82 <HAL_ADC_Init+0x1da>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Init+0x1da>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_ADC_Init+0x1dc>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11c      	bne.n	8001cc2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c88:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_ADC_Init+0x202>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x202>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_Init+0x204>
 8001caa:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d108      	bne.n	8001cc2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7e5b      	ldrb	r3, [r3, #25]
 8001cc6:	035b      	lsls	r3, r3, #13
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ccc:	2a01      	cmp	r2, #1
 8001cce:	d002      	beq.n	8001cd6 <HAL_ADC_Init+0x22e>
 8001cd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd4:	e000      	b.n	8001cd8 <HAL_ADC_Init+0x230>
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d11b      	bne.n	8001d2e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7e5b      	ldrb	r3, [r3, #25]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	3b01      	subs	r3, #1
 8001d04:	045a      	lsls	r2, r3, #17
 8001d06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	663b      	str	r3, [r7, #96]	; 0x60
 8001d10:	e00d      	b.n	8001d2e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d1a:	f043 0220 	orr.w	r2, r3, #32
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d03a      	beq.n	8001dac <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <HAL_ADC_Init+0x2ec>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d004      	beq.n	8001d4a <HAL_ADC_Init+0x2a2>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_ADC_Init+0x2f0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d128      	bne.n	8001d9c <HAL_ADC_Init+0x2f4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001d52:	d012      	beq.n	8001d7a <HAL_ADC_Init+0x2d2>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	d00a      	beq.n	8001d74 <HAL_ADC_Init+0x2cc>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001d66:	d002      	beq.n	8001d6e <HAL_ADC_Init+0x2c6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	e018      	b.n	8001da0 <HAL_ADC_Init+0x2f8>
 8001d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d72:	e015      	b.n	8001da0 <HAL_ADC_Init+0x2f8>
 8001d74:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001d78:	e012      	b.n	8001da0 <HAL_ADC_Init+0x2f8>
 8001d7a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001d7e:	e00f      	b.n	8001da0 <HAL_ADC_Init+0x2f8>
 8001d80:	20000000 	.word	0x20000000
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	50000100 	.word	0x50000100
 8001d8c:	50000300 	.word	0x50000300
 8001d90:	50000700 	.word	0x50000700
 8001d94:	50000400 	.word	0x50000400
 8001d98:	50000500 	.word	0x50000500
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001da4:	4313      	orrs	r3, r2
 8001da6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001da8:	4313      	orrs	r3, r2
 8001daa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d114      	bne.n	8001de4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc8:	f023 0302 	bic.w	r3, r3, #2
 8001dcc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7e1b      	ldrb	r3, [r3, #24]
 8001dd2:	039a      	lsls	r2, r3, #14
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001de0:	4313      	orrs	r3, r2
 8001de2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_ADC_Init+0x3bc>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001df4:	430b      	orrs	r3, r1
 8001df6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d10c      	bne.n	8001e1a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f023 010f 	bic.w	r1, r3, #15
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	1e5a      	subs	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
 8001e18:	e007      	b.n	8001e2a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 020f 	bic.w	r2, r2, #15
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f023 0303 	bic.w	r3, r3, #3
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e40:	e00a      	b.n	8001e58 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f023 0312 	bic.w	r3, r3, #18
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3768      	adds	r7, #104	; 0x68
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	fff0c007 	.word	0xfff0c007

08001e68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 80f7 	bne.w	8002076 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Start_DMA+0x2e>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0f2      	b.n	800207c <HAL_ADC_Start_DMA+0x214>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea6:	d004      	beq.n	8001eb2 <HAL_ADC_Start_DMA+0x4a>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a75      	ldr	r2, [pc, #468]	; (8002084 <HAL_ADC_Start_DMA+0x21c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d109      	bne.n	8001ec6 <HAL_ADC_Start_DMA+0x5e>
 8001eb2:	4b75      	ldr	r3, [pc, #468]	; (8002088 <HAL_ADC_Start_DMA+0x220>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bf0c      	ite	eq
 8001ebe:	2301      	moveq	r3, #1
 8001ec0:	2300      	movne	r3, #0
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	e008      	b.n	8001ed8 <HAL_ADC_Start_DMA+0x70>
 8001ec6:	4b71      	ldr	r3, [pc, #452]	; (800208c <HAL_ADC_Start_DMA+0x224>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80c5 	beq.w	8002068 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f001 f8a0 	bl	8003024 <ADC_Enable>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 80b7 	bne.w	800205e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f0c:	d004      	beq.n	8001f18 <HAL_ADC_Start_DMA+0xb0>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a5c      	ldr	r2, [pc, #368]	; (8002084 <HAL_ADC_Start_DMA+0x21c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d106      	bne.n	8001f26 <HAL_ADC_Start_DMA+0xbe>
 8001f18:	4b5b      	ldr	r3, [pc, #364]	; (8002088 <HAL_ADC_Start_DMA+0x220>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_ADC_Start_DMA+0xde>
 8001f24:	e005      	b.n	8001f32 <HAL_ADC_Start_DMA+0xca>
 8001f26:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_ADC_Start_DMA+0x224>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_ADC_Start_DMA+0xde>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f3a:	d004      	beq.n	8001f46 <HAL_ADC_Start_DMA+0xde>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a53      	ldr	r2, [pc, #332]	; (8002090 <HAL_ADC_Start_DMA+0x228>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d115      	bne.n	8001f72 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d036      	beq.n	8001fce <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f70:	e02d      	b.n	8001fce <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f86:	d004      	beq.n	8001f92 <HAL_ADC_Start_DMA+0x12a>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a3d      	ldr	r2, [pc, #244]	; (8002084 <HAL_ADC_Start_DMA+0x21c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10a      	bne.n	8001fa8 <HAL_ADC_Start_DMA+0x140>
 8001f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e008      	b.n	8001fba <HAL_ADC_Start_DMA+0x152>
 8001fa8:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_ADC_Start_DMA+0x228>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fda:	d106      	bne.n	8001fea <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f023 0206 	bic.w	r2, r3, #6
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44
 8001fe8:	e002      	b.n	8001ff0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <HAL_ADC_Start_DMA+0x22c>)
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	4a24      	ldr	r2, [pc, #144]	; (8002098 <HAL_ADC_Start_DMA+0x230>)
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	4a23      	ldr	r2, [pc, #140]	; (800209c <HAL_ADC_Start_DMA+0x234>)
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	221c      	movs	r2, #28
 8002016:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0210 	orr.w	r2, r2, #16
 8002026:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3340      	adds	r3, #64	; 0x40
 8002042:	4619      	mov	r1, r3
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f001 ff96 	bl	8003f78 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0204 	orr.w	r2, r2, #4
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	e00d      	b.n	800207a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002066:	e008      	b.n	800207a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002074:	e001      	b.n	800207a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002076:	2302      	movs	r3, #2
 8002078:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800207a:	7dfb      	ldrb	r3, [r7, #23]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	50000100 	.word	0x50000100
 8002088:	50000300 	.word	0x50000300
 800208c:	50000700 	.word	0x50000700
 8002090:	50000400 	.word	0x50000400
 8002094:	08002f59 	.word	0x08002f59
 8002098:	08002fd3 	.word	0x08002fd3
 800209c:	08002fef 	.word	0x08002fef

080020a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <HAL_ADC_IRQHandler+0x38>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80bc 	beq.w	800225c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80b6 	beq.w	800225c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002110:	d004      	beq.n	800211c <HAL_ADC_IRQHandler+0x7c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a90      	ldr	r2, [pc, #576]	; (8002358 <HAL_ADC_IRQHandler+0x2b8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d106      	bne.n	800212a <HAL_ADC_IRQHandler+0x8a>
 800211c:	4b8f      	ldr	r3, [pc, #572]	; (800235c <HAL_ADC_IRQHandler+0x2bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	2b00      	cmp	r3, #0
 8002126:	d03e      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x106>
 8002128:	e005      	b.n	8002136 <HAL_ADC_IRQHandler+0x96>
 800212a:	4b8d      	ldr	r3, [pc, #564]	; (8002360 <HAL_ADC_IRQHandler+0x2c0>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2b00      	cmp	r3, #0
 8002134:	d037      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x106>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800213e:	d004      	beq.n	800214a <HAL_ADC_IRQHandler+0xaa>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a84      	ldr	r2, [pc, #528]	; (8002358 <HAL_ADC_IRQHandler+0x2b8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d106      	bne.n	8002158 <HAL_ADC_IRQHandler+0xb8>
 800214a:	4b84      	ldr	r3, [pc, #528]	; (800235c <HAL_ADC_IRQHandler+0x2bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2b05      	cmp	r3, #5
 8002154:	d027      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x106>
 8002156:	e005      	b.n	8002164 <HAL_ADC_IRQHandler+0xc4>
 8002158:	4b81      	ldr	r3, [pc, #516]	; (8002360 <HAL_ADC_IRQHandler+0x2c0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2b05      	cmp	r3, #5
 8002162:	d020      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x106>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216c:	d004      	beq.n	8002178 <HAL_ADC_IRQHandler+0xd8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a79      	ldr	r2, [pc, #484]	; (8002358 <HAL_ADC_IRQHandler+0x2b8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d106      	bne.n	8002186 <HAL_ADC_IRQHandler+0xe6>
 8002178:	4b78      	ldr	r3, [pc, #480]	; (800235c <HAL_ADC_IRQHandler+0x2bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2b09      	cmp	r3, #9
 8002182:	d010      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x106>
 8002184:	e005      	b.n	8002192 <HAL_ADC_IRQHandler+0xf2>
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_ADC_IRQHandler+0x2c0>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2b09      	cmp	r3, #9
 8002190:	d009      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x106>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219a:	d004      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x106>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a70      	ldr	r2, [pc, #448]	; (8002364 <HAL_ADC_IRQHandler+0x2c4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d104      	bne.n	80021b0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	e00f      	b.n	80021d0 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b8:	d004      	beq.n	80021c4 <HAL_ADC_IRQHandler+0x124>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a66      	ldr	r2, [pc, #408]	; (8002358 <HAL_ADC_IRQHandler+0x2b8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d102      	bne.n	80021ca <HAL_ADC_IRQHandler+0x12a>
 80021c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021c8:	e000      	b.n	80021cc <HAL_ADC_IRQHandler+0x12c>
 80021ca:	4b66      	ldr	r3, [pc, #408]	; (8002364 <HAL_ADC_IRQHandler+0x2c4>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d137      	bne.n	800224e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d132      	bne.n	800224e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d02d      	beq.n	800224e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d11a      	bne.n	8002236 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 020c 	bic.w	r2, r2, #12
 800220e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d112      	bne.n	800224e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0201 	orr.w	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
 8002234:	e00b      	b.n	800224e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fc02 	bl	8001a58 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	220c      	movs	r2, #12
 800225a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d004      	beq.n	8002270 <HAL_ADC_IRQHandler+0x1d0>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8138 	beq.w	80024ec <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 8132 	beq.w	80024ec <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800229c:	d004      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x208>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2d      	ldr	r2, [pc, #180]	; (8002358 <HAL_ADC_IRQHandler+0x2b8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d106      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x216>
 80022a8:	4b2c      	ldr	r3, [pc, #176]	; (800235c <HAL_ADC_IRQHandler+0x2bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d03e      	beq.n	8002332 <HAL_ADC_IRQHandler+0x292>
 80022b4:	e005      	b.n	80022c2 <HAL_ADC_IRQHandler+0x222>
 80022b6:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_ADC_IRQHandler+0x2c0>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d037      	beq.n	8002332 <HAL_ADC_IRQHandler+0x292>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ca:	d004      	beq.n	80022d6 <HAL_ADC_IRQHandler+0x236>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a21      	ldr	r2, [pc, #132]	; (8002358 <HAL_ADC_IRQHandler+0x2b8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d106      	bne.n	80022e4 <HAL_ADC_IRQHandler+0x244>
 80022d6:	4b21      	ldr	r3, [pc, #132]	; (800235c <HAL_ADC_IRQHandler+0x2bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d027      	beq.n	8002332 <HAL_ADC_IRQHandler+0x292>
 80022e2:	e005      	b.n	80022f0 <HAL_ADC_IRQHandler+0x250>
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_ADC_IRQHandler+0x2c0>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d020      	beq.n	8002332 <HAL_ADC_IRQHandler+0x292>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f8:	d004      	beq.n	8002304 <HAL_ADC_IRQHandler+0x264>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <HAL_ADC_IRQHandler+0x2b8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d106      	bne.n	8002312 <HAL_ADC_IRQHandler+0x272>
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_ADC_IRQHandler+0x2bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	2b09      	cmp	r3, #9
 800230e:	d010      	beq.n	8002332 <HAL_ADC_IRQHandler+0x292>
 8002310:	e005      	b.n	800231e <HAL_ADC_IRQHandler+0x27e>
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_ADC_IRQHandler+0x2c0>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2b09      	cmp	r3, #9
 800231c:	d009      	beq.n	8002332 <HAL_ADC_IRQHandler+0x292>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002326:	d004      	beq.n	8002332 <HAL_ADC_IRQHandler+0x292>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <HAL_ADC_IRQHandler+0x2c4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d104      	bne.n	800233c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	e018      	b.n	800236e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002344:	d004      	beq.n	8002350 <HAL_ADC_IRQHandler+0x2b0>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a03      	ldr	r2, [pc, #12]	; (8002358 <HAL_ADC_IRQHandler+0x2b8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d10b      	bne.n	8002368 <HAL_ADC_IRQHandler+0x2c8>
 8002350:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002354:	e009      	b.n	800236a <HAL_ADC_IRQHandler+0x2ca>
 8002356:	bf00      	nop
 8002358:	50000100 	.word	0x50000100
 800235c:	50000300 	.word	0x50000300
 8002360:	50000700 	.word	0x50000700
 8002364:	50000400 	.word	0x50000400
 8002368:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_ADC_IRQHandler+0x514>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002374:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002378:	2b00      	cmp	r3, #0
 800237a:	f040 80b0 	bne.w	80024de <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00d      	beq.n	80023a4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 80a3 	bne.w	80024de <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f040 809d 	bne.w	80024de <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8097 	beq.w	80024de <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b8:	d004      	beq.n	80023c4 <HAL_ADC_IRQHandler+0x324>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7e      	ldr	r2, [pc, #504]	; (80025b8 <HAL_ADC_IRQHandler+0x518>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d106      	bne.n	80023d2 <HAL_ADC_IRQHandler+0x332>
 80023c4:	4b7d      	ldr	r3, [pc, #500]	; (80025bc <HAL_ADC_IRQHandler+0x51c>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d03e      	beq.n	800244e <HAL_ADC_IRQHandler+0x3ae>
 80023d0:	e005      	b.n	80023de <HAL_ADC_IRQHandler+0x33e>
 80023d2:	4b7b      	ldr	r3, [pc, #492]	; (80025c0 <HAL_ADC_IRQHandler+0x520>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d037      	beq.n	800244e <HAL_ADC_IRQHandler+0x3ae>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e6:	d004      	beq.n	80023f2 <HAL_ADC_IRQHandler+0x352>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a72      	ldr	r2, [pc, #456]	; (80025b8 <HAL_ADC_IRQHandler+0x518>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d106      	bne.n	8002400 <HAL_ADC_IRQHandler+0x360>
 80023f2:	4b72      	ldr	r3, [pc, #456]	; (80025bc <HAL_ADC_IRQHandler+0x51c>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d027      	beq.n	800244e <HAL_ADC_IRQHandler+0x3ae>
 80023fe:	e005      	b.n	800240c <HAL_ADC_IRQHandler+0x36c>
 8002400:	4b6f      	ldr	r3, [pc, #444]	; (80025c0 <HAL_ADC_IRQHandler+0x520>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2b06      	cmp	r3, #6
 800240a:	d020      	beq.n	800244e <HAL_ADC_IRQHandler+0x3ae>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002414:	d004      	beq.n	8002420 <HAL_ADC_IRQHandler+0x380>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a67      	ldr	r2, [pc, #412]	; (80025b8 <HAL_ADC_IRQHandler+0x518>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d106      	bne.n	800242e <HAL_ADC_IRQHandler+0x38e>
 8002420:	4b66      	ldr	r3, [pc, #408]	; (80025bc <HAL_ADC_IRQHandler+0x51c>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	2b07      	cmp	r3, #7
 800242a:	d010      	beq.n	800244e <HAL_ADC_IRQHandler+0x3ae>
 800242c:	e005      	b.n	800243a <HAL_ADC_IRQHandler+0x39a>
 800242e:	4b64      	ldr	r3, [pc, #400]	; (80025c0 <HAL_ADC_IRQHandler+0x520>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2b07      	cmp	r3, #7
 8002438:	d009      	beq.n	800244e <HAL_ADC_IRQHandler+0x3ae>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002442:	d004      	beq.n	800244e <HAL_ADC_IRQHandler+0x3ae>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5a      	ldr	r2, [pc, #360]	; (80025b4 <HAL_ADC_IRQHandler+0x514>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d104      	bne.n	8002458 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e00f      	b.n	8002478 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002460:	d004      	beq.n	800246c <HAL_ADC_IRQHandler+0x3cc>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a54      	ldr	r2, [pc, #336]	; (80025b8 <HAL_ADC_IRQHandler+0x518>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d102      	bne.n	8002472 <HAL_ADC_IRQHandler+0x3d2>
 800246c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002470:	e000      	b.n	8002474 <HAL_ADC_IRQHandler+0x3d4>
 8002472:	4b50      	ldr	r3, [pc, #320]	; (80025b4 <HAL_ADC_IRQHandler+0x514>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d12d      	bne.n	80024de <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d11a      	bne.n	80024c6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800249e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d112      	bne.n	80024de <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
 80024c4:	e00b      	b.n	80024de <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0210 	orr.w	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f936 	bl	8002750 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2260      	movs	r2, #96	; 0x60
 80024ea:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d011      	beq.n	800251a <HAL_ADC_IRQHandler+0x47a>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00c      	beq.n	800251a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fab7 	bl	8001a80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_ADC_IRQHandler+0x4aa>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f91c 	bl	8002778 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002548:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <HAL_ADC_IRQHandler+0x4da>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f90e 	bl	800278c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002578:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d04f      	beq.n	8002624 <HAL_ADC_IRQHandler+0x584>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d04a      	beq.n	8002624 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002596:	2301      	movs	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	e02d      	b.n	80025f8 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a4:	d004      	beq.n	80025b0 <HAL_ADC_IRQHandler+0x510>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a03      	ldr	r2, [pc, #12]	; (80025b8 <HAL_ADC_IRQHandler+0x518>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d109      	bne.n	80025c4 <HAL_ADC_IRQHandler+0x524>
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <HAL_ADC_IRQHandler+0x51c>)
 80025b2:	e008      	b.n	80025c6 <HAL_ADC_IRQHandler+0x526>
 80025b4:	50000400 	.word	0x50000400
 80025b8:	50000100 	.word	0x50000100
 80025bc:	50000300 	.word	0x50000300
 80025c0:	50000700 	.word	0x50000700
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <HAL_ADC_IRQHandler+0x5c8>)
 80025c6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10a      	bne.n	80025f8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80025e2:	2301      	movs	r3, #1
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e007      	b.n	80025f8 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80025f4:	2301      	movs	r3, #1
 80025f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d10e      	bne.n	800261c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f043 0202 	orr.w	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fa3c 	bl	8001a94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2210      	movs	r2, #16
 8002622:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <HAL_ADC_IRQHandler+0x5c0>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	f043 0208 	orr.w	r2, r3, #8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002658:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f882 	bl	8002764 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002660:	bf00      	nop
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	50000700 	.word	0x50000700

0800266c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_ADCEx_Calibration_Start+0x1c>
 8002684:	2302      	movs	r3, #2
 8002686:	e05f      	b.n	8002748 <HAL_ADCEx_Calibration_Start+0xdc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fd2b 	bl	80030ec <ADC_Disable>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d14e      	bne.n	800273e <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80026b4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d107      	bne.n	80026cc <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ca:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026da:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80026dc:	f7ff f9b0 	bl	8001a40 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026e2:	e01c      	b.n	800271e <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026e4:	f7ff f9ac 	bl	8001a40 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b0a      	cmp	r3, #10
 80026f0:	d915      	bls.n	800271e <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002700:	d10d      	bne.n	800271e <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f023 0312 	bic.w	r3, r3, #18
 800270a:	f043 0210 	orr.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e014      	b.n	8002748 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800272c:	d0da      	beq.n	80026e4 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f023 0303 	bic.w	r3, r3, #3
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002746:	7bfb      	ldrb	r3, [r7, #15]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b09b      	sub	sp, #108	; 0x6c
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x22>
 80027be:	2302      	movs	r3, #2
 80027c0:	e2c8      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x5b4>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f040 82ac 	bne.w	8002d32 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d81c      	bhi.n	800281c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	461a      	mov	r2, r3
 80027f6:	231f      	movs	r3, #31
 80027f8:	4093      	lsls	r3, r2
 80027fa:	43db      	mvns	r3, r3
 80027fc:	4019      	ands	r1, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	4413      	add	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa00 f203 	lsl.w	r2, r0, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
 800281a:	e063      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b09      	cmp	r3, #9
 8002822:	d81e      	bhi.n	8002862 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	3b1e      	subs	r3, #30
 8002838:	221f      	movs	r2, #31
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	4019      	ands	r1, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	3b1e      	subs	r3, #30
 8002854:	fa00 f203 	lsl.w	r2, r0, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	635a      	str	r2, [r3, #52]	; 0x34
 8002860:	e040      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b0e      	cmp	r3, #14
 8002868:	d81e      	bhi.n	80028a8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	3b3c      	subs	r3, #60	; 0x3c
 800287e:	221f      	movs	r2, #31
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	4019      	ands	r1, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	3b3c      	subs	r3, #60	; 0x3c
 800289a:	fa00 f203 	lsl.w	r2, r0, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
 80028a6:	e01d      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	3b5a      	subs	r3, #90	; 0x5a
 80028bc:	221f      	movs	r2, #31
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	4019      	ands	r1, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	3b5a      	subs	r3, #90	; 0x5a
 80028d8:	fa00 f203 	lsl.w	r2, r0, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f040 80e5 	bne.w	8002abe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b09      	cmp	r3, #9
 80028fa:	d91c      	bls.n	8002936 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6999      	ldr	r1, [r3, #24]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	3b1e      	subs	r3, #30
 800290e:	2207      	movs	r2, #7
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	4019      	ands	r1, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6898      	ldr	r0, [r3, #8]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	3b1e      	subs	r3, #30
 8002928:	fa00 f203 	lsl.w	r2, r0, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	619a      	str	r2, [r3, #24]
 8002934:	e019      	b.n	800296a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6959      	ldr	r1, [r3, #20]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	2207      	movs	r2, #7
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	4019      	ands	r1, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6898      	ldr	r0, [r3, #8]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	08db      	lsrs	r3, r3, #3
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	3b01      	subs	r3, #1
 8002988:	2b03      	cmp	r3, #3
 800298a:	d84f      	bhi.n	8002a2c <HAL_ADC_ConfigChannel+0x28c>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <HAL_ADC_ConfigChannel+0x1f4>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029c7 	.word	0x080029c7
 800299c:	080029e9 	.word	0x080029e9
 80029a0:	08002a0b 	.word	0x08002a0b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029aa:	4b99      	ldr	r3, [pc, #612]	; (8002c10 <HAL_ADC_ConfigChannel+0x470>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	0691      	lsls	r1, r2, #26
 80029b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029b6:	430a      	orrs	r2, r1
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029c2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029c4:	e07b      	b.n	8002abe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029cc:	4b90      	ldr	r3, [pc, #576]	; (8002c10 <HAL_ADC_ConfigChannel+0x470>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	0691      	lsls	r1, r2, #26
 80029d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029d8:	430a      	orrs	r2, r1
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029e4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029e6:	e06a      	b.n	8002abe <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029ee:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_ADC_ConfigChannel+0x470>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	0691      	lsls	r1, r2, #26
 80029f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029fa:	430a      	orrs	r2, r1
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a06:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a08:	e059      	b.n	8002abe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a10:	4b7f      	ldr	r3, [pc, #508]	; (8002c10 <HAL_ADC_ConfigChannel+0x470>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	0691      	lsls	r1, r2, #26
 8002a1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a28:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a2a:	e048      	b.n	8002abe <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	069b      	lsls	r3, r3, #26
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d107      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a4e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	069b      	lsls	r3, r3, #26
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d107      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a72:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d107      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a96:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	069b      	lsls	r3, r3, #26
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d107      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aba:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002abc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d108      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x33e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x33e>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x340>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f040 8131 	bne.w	8002d48 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d00f      	beq.n	8002b0e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43da      	mvns	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	400a      	ands	r2, r1
 8002b08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b0c:	e049      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	d91c      	bls.n	8002b6a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6999      	ldr	r1, [r3, #24]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b1b      	subs	r3, #27
 8002b42:	2207      	movs	r2, #7
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	4019      	ands	r1, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6898      	ldr	r0, [r3, #8]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b1b      	subs	r3, #27
 8002b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	619a      	str	r2, [r3, #24]
 8002b68:	e01b      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6959      	ldr	r1, [r3, #20]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4019      	ands	r1, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6898      	ldr	r0, [r3, #8]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002baa:	d004      	beq.n	8002bb6 <HAL_ADC_ConfigChannel+0x416>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <HAL_ADC_ConfigChannel+0x474>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x41a>
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <HAL_ADC_ConfigChannel+0x478>)
 8002bb8:	e000      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x41c>
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_ADC_ConfigChannel+0x47c>)
 8002bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d015      	beq.n	8002bfe <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002bd6:	2b11      	cmp	r3, #17
 8002bd8:	d105      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bea:	2b12      	cmp	r3, #18
 8002bec:	f040 80ac 	bne.w	8002d48 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002bf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 80a5 	bne.w	8002d48 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c06:	d10b      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x480>
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <HAL_ADC_ConfigChannel+0x474>)
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e023      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x4b6>
 8002c0e:	bf00      	nop
 8002c10:	83fff000 	.word	0x83fff000
 8002c14:	50000100 	.word	0x50000100
 8002c18:	50000300 	.word	0x50000300
 8002c1c:	50000700 	.word	0x50000700
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a4e      	ldr	r2, [pc, #312]	; (8002d60 <HAL_ADC_ConfigChannel+0x5c0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d103      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x492>
 8002c2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e011      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x4b6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d102      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x4a2>
 8002c3c:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e009      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x4b6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a48      	ldr	r2, [pc, #288]	; (8002d68 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d102      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x4b2>
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e001      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x4b6>
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d108      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x4d6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x4d6>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x4d8>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d150      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x4fe>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x4fe>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x500>
 8002c9e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d13c      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d11d      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x548>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb4:	d118      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_ADC_ConfigChannel+0x5cc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <HAL_ADC_ConfigChannel+0x5d0>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	0c9a      	lsrs	r2, r3, #18
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cd8:	e002      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f9      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ce6:	e02e      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b11      	cmp	r3, #17
 8002cee:	d10b      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x568>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf8:	d106      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d06:	e01e      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b12      	cmp	r3, #18
 8002d0e:	d11a      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d1a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d1c:	e013      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0220 	orr.w	r2, r3, #32
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d30:	e00a      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d44:	e000      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d46:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	376c      	adds	r7, #108	; 0x6c
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	50000100 	.word	0x50000100
 8002d64:	50000400 	.word	0x50000400
 8002d68:	50000500 	.word	0x50000500
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	431bde83 	.word	0x431bde83

08002d74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b099      	sub	sp, #100	; 0x64
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d8c:	d102      	bne.n	8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	e01a      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6a      	ldr	r2, [pc, #424]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d103      	bne.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	e011      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a67      	ldr	r2, [pc, #412]	; (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d102      	bne.n	8002db6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002db0:	4b66      	ldr	r3, [pc, #408]	; (8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	e009      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a64      	ldr	r2, [pc, #400]	; (8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d102      	bne.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	e001      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b0      	b.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0a9      	b.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f040 808d 	bne.w	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 8086 	bne.w	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e10:	d004      	beq.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a4b      	ldr	r2, [pc, #300]	; (8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e1c:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002e1e:	e000      	b.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e20:	4b4c      	ldr	r3, [pc, #304]	; (8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002e22:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d040      	beq.n	8002eae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e3e:	035b      	lsls	r3, r3, #13
 8002e40:	430b      	orrs	r3, r1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e46:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d108      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d15c      	bne.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d107      	bne.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002e8a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d14b      	bne.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e98:	f023 030f 	bic.w	r3, r3, #15
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	6811      	ldr	r1, [r2, #0]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	6892      	ldr	r2, [r2, #8]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eaa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eac:	e03c      	b.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d108      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d123      	bne.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d107      	bne.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002efc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d112      	bne.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f0a:	f023 030f 	bic.w	r3, r3, #15
 8002f0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f10:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f12:	e009      	b.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f26:	e000      	b.n	8002f2a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f28:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002f36:	4618      	mov	r0, r3
 8002f38:	3764      	adds	r7, #100	; 0x64
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	50000100 	.word	0x50000100
 8002f48:	50000400 	.word	0x50000400
 8002f4c:	50000500 	.word	0x50000500
 8002f50:	50000300 	.word	0x50000300
 8002f54:	50000700 	.word	0x50000700

08002f58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d126      	bne.n	8002fc0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d115      	bne.n	8002fb8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d111      	bne.n	8002fb8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7fe fd4d 	bl	8001a58 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002fbe:	e004      	b.n	8002fca <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	4798      	blx	r3
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7fe fd43 	bl	8001a6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	f043 0204 	orr.w	r2, r3, #4
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7fe fd3d 	bl	8001a94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <ADC_Enable+0x2c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <ADC_Enable+0x2c>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <ADC_Enable+0x2e>
 8003050:	2300      	movs	r3, #0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d143      	bne.n	80030de <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <ADC_Enable+0xc4>)
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f043 0210 	orr.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e02f      	b.n	80030e0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003090:	f7fe fcd6 	bl	8001a40 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003096:	e01b      	b.n	80030d0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003098:	f7fe fcd2 	bl	8001a40 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d914      	bls.n	80030d0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d00d      	beq.n	80030d0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0210 	orr.w	r2, r3, #16
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e007      	b.n	80030e0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d1dc      	bne.n	8003098 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	8000003f 	.word	0x8000003f

080030ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d108      	bne.n	8003118 <ADC_Disable+0x2c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <ADC_Disable+0x2c>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <ADC_Disable+0x2e>
 8003118:	2300      	movs	r3, #0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d047      	beq.n	80031ae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030d 	and.w	r3, r3, #13
 8003128:	2b01      	cmp	r3, #1
 800312a:	d10f      	bne.n	800314c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0202 	orr.w	r2, r2, #2
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2203      	movs	r2, #3
 8003142:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003144:	f7fe fc7c 	bl	8001a40 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800314a:	e029      	b.n	80031a0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f043 0210 	orr.w	r2, r3, #16
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	f043 0201 	orr.w	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e023      	b.n	80031b0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003168:	f7fe fc6a 	bl	8001a40 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d914      	bls.n	80031a0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10d      	bne.n	80031a0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f043 0210 	orr.w	r2, r3, #16
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f043 0201 	orr.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e007      	b.n	80031b0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d0dc      	beq.n	8003168 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0ed      	b.n	80033a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d102      	bne.n	80031dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fe42 	bl	8000e60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ec:	f7fe fc28 	bl	8001a40 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031f2:	e012      	b.n	800321a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031f4:	f7fe fc24 	bl	8001a40 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b0a      	cmp	r3, #10
 8003200:	d90b      	bls.n	800321a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2205      	movs	r2, #5
 8003212:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0c5      	b.n	80033a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0e5      	beq.n	80031f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0202 	bic.w	r2, r2, #2
 8003236:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003238:	f7fe fc02 	bl	8001a40 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800323e:	e012      	b.n	8003266 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003240:	f7fe fbfe 	bl	8001a40 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b0a      	cmp	r3, #10
 800324c:	d90b      	bls.n	8003266 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2205      	movs	r2, #5
 800325e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e09f      	b.n	80033a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7e1b      	ldrb	r3, [r3, #24]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d108      	bne.n	800328e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e007      	b.n	800329e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800329c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7e5b      	ldrb	r3, [r3, #25]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d108      	bne.n	80032b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e007      	b.n	80032c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7e9b      	ldrb	r3, [r3, #26]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d108      	bne.n	80032e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0220 	orr.w	r2, r2, #32
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e007      	b.n	80032f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0220 	bic.w	r2, r2, #32
 80032f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7edb      	ldrb	r3, [r3, #27]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0210 	bic.w	r2, r2, #16
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e007      	b.n	800331c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0210 	orr.w	r2, r2, #16
 800331a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	7f1b      	ldrb	r3, [r3, #28]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d108      	bne.n	8003336 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0208 	orr.w	r2, r2, #8
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e007      	b.n	8003346 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0208 	bic.w	r2, r2, #8
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7f5b      	ldrb	r3, [r3, #29]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d108      	bne.n	8003360 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0204 	orr.w	r2, r2, #4
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e007      	b.n	8003370 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0204 	bic.w	r2, r2, #4
 800336e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	ea42 0103 	orr.w	r1, r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	1e5a      	subs	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b087      	sub	sp, #28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80033c6:	7cfb      	ldrb	r3, [r7, #19]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d003      	beq.n	80033d4 <HAL_CAN_ConfigFilter+0x26>
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	f040 80aa 	bne.w	8003528 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2201      	movs	r2, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	401a      	ands	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d123      	bne.n	8003456 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	43db      	mvns	r3, r3
 8003418:	401a      	ands	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003430:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3248      	adds	r2, #72	; 0x48
 8003436:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800344a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800344c:	6979      	ldr	r1, [r7, #20]
 800344e:	3348      	adds	r3, #72	; 0x48
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	440b      	add	r3, r1
 8003454:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d122      	bne.n	80034a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	431a      	orrs	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800347e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	3248      	adds	r2, #72	; 0x48
 8003484:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003498:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800349a:	6979      	ldr	r1, [r7, #20]
 800349c:	3348      	adds	r3, #72	; 0x48
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034be:	e007      	b.n	80034d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	43db      	mvns	r3, r3
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80034ea:	e007      	b.n	80034fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	431a      	orrs	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800351a:	f023 0201 	bic.w	r2, r3, #1
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e006      	b.n	8003536 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d12e      	bne.n	80035b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800356e:	f7fe fa67 	bl	8001a40 <HAL_GetTick>
 8003572:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003574:	e012      	b.n	800359c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003576:	f7fe fa63 	bl	8001a40 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b0a      	cmp	r3, #10
 8003582:	d90b      	bls.n	800359c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2205      	movs	r2, #5
 8003594:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e012      	b.n	80035c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e5      	bne.n	8003576 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e006      	b.n	80035c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
  }
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80035ca:	b480      	push	{r7}
 80035cc:	b087      	sub	sp, #28
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d003      	beq.n	80035ee <HAL_CAN_GetRxMessage+0x24>
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	f040 8103 	bne.w	80037f4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10e      	bne.n	8003612 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0f7      	b.n	8003802 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0e8      	b.n	8003802 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	331b      	adds	r3, #27
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	4413      	add	r3, r2
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0204 	and.w	r2, r3, #4
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	331b      	adds	r3, #27
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	4413      	add	r3, r2
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0d5b      	lsrs	r3, r3, #21
 800365e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	e00b      	b.n	8003680 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	331b      	adds	r3, #27
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	4413      	add	r3, r2
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	08db      	lsrs	r3, r3, #3
 8003678:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	331b      	adds	r3, #27
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	4413      	add	r3, r2
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0202 	and.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	331b      	adds	r3, #27
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	4413      	add	r3, r2
 80036a2:	3304      	adds	r3, #4
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2208      	movs	r2, #8
 80036b2:	611a      	str	r2, [r3, #16]
 80036b4:	e00b      	b.n	80036ce <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	331b      	adds	r3, #27
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	4413      	add	r3, r2
 80036c2:	3304      	adds	r3, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	331b      	adds	r3, #27
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	331b      	adds	r3, #27
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	4413      	add	r3, r2
 80036f2:	3304      	adds	r3, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	4413      	add	r3, r2
 8003708:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	4413      	add	r3, r2
 800371e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0a1a      	lsrs	r2, r3, #8
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	4413      	add	r3, r2
 8003738:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	0c1a      	lsrs	r2, r3, #16
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	3302      	adds	r3, #2
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	4413      	add	r3, r2
 8003752:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e1a      	lsrs	r2, r3, #24
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	3303      	adds	r3, #3
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	4413      	add	r3, r2
 800376c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	3304      	adds	r3, #4
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4413      	add	r3, r2
 8003784:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0a1a      	lsrs	r2, r3, #8
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	3305      	adds	r3, #5
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	4413      	add	r3, r2
 800379e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0c1a      	lsrs	r2, r3, #16
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	3306      	adds	r3, #6
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	0e1a      	lsrs	r2, r3, #24
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	3307      	adds	r3, #7
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0220 	orr.w	r2, r2, #32
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	e007      	b.n	80037f0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0220 	orr.w	r2, r2, #32
 80037ee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e006      	b.n	8003802 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d002      	beq.n	800382c <HAL_CAN_ActivateNotification+0x1e>
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	2b02      	cmp	r3, #2
 800382a:	d109      	bne.n	8003840 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6959      	ldr	r1, [r3, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	e006      	b.n	800384e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b08a      	sub	sp, #40	; 0x28
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003862:	2300      	movs	r3, #0
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d07c      	beq.n	800399a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d023      	beq.n	80038f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7fd ffeb 	bl	8001898 <HAL_CAN_TxMailbox0CompleteCallback>
 80038c2:	e016      	b.n	80038f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d004      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	e00c      	b.n	80038f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	e002      	b.n	80038f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd ffe3 	bl	80018b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d024      	beq.n	8003946 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003904:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f959 	bl	8003bc8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003916:	e016      	b.n	8003946 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
 800392a:	e00c      	b.n	8003946 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
 800393e:	e002      	b.n	8003946 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f955 	bl	8003bf0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d024      	beq.n	800399a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003958:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f939 	bl	8003bdc <HAL_CAN_TxMailbox2CompleteCallback>
 800396a:	e016      	b.n	800399a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
 800397e:	e00c      	b.n	800399a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	e002      	b.n	800399a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f935 	bl	8003c04 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2210      	movs	r2, #16
 80039bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2208      	movs	r2, #8
 80039d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd ff9c 	bl	8001918 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fd ff6d 	bl	80018d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00c      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2210      	movs	r2, #16
 8003a20:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d006      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8f4 	bl	8003c2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f8db 	bl	8003c18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8de 	bl	8003c40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f8d7 	bl	8003c54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d07b      	beq.n	8003ba8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d072      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	f043 0302 	orr.w	r3, r3, #2
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d043      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d03e      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b28:	2b60      	cmp	r3, #96	; 0x60
 8003b2a:	d02b      	beq.n	8003b84 <HAL_CAN_IRQHandler+0x32a>
 8003b2c:	2b60      	cmp	r3, #96	; 0x60
 8003b2e:	d82e      	bhi.n	8003b8e <HAL_CAN_IRQHandler+0x334>
 8003b30:	2b50      	cmp	r3, #80	; 0x50
 8003b32:	d022      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x320>
 8003b34:	2b50      	cmp	r3, #80	; 0x50
 8003b36:	d82a      	bhi.n	8003b8e <HAL_CAN_IRQHandler+0x334>
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d019      	beq.n	8003b70 <HAL_CAN_IRQHandler+0x316>
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d826      	bhi.n	8003b8e <HAL_CAN_IRQHandler+0x334>
 8003b40:	2b30      	cmp	r3, #48	; 0x30
 8003b42:	d010      	beq.n	8003b66 <HAL_CAN_IRQHandler+0x30c>
 8003b44:	2b30      	cmp	r3, #48	; 0x30
 8003b46:	d822      	bhi.n	8003b8e <HAL_CAN_IRQHandler+0x334>
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d002      	beq.n	8003b52 <HAL_CAN_IRQHandler+0x2f8>
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d005      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b50:	e01d      	b.n	8003b8e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	f043 0308 	orr.w	r3, r3, #8
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b5a:	e019      	b.n	8003b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	f043 0310 	orr.w	r3, r3, #16
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b64:	e014      	b.n	8003b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	f043 0320 	orr.w	r3, r3, #32
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b6e:	e00f      	b.n	8003b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b78:	e00a      	b.n	8003b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b82:	e005      	b.n	8003b90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b8c:	e000      	b.n	8003b90 <HAL_CAN_IRQHandler+0x336>
            break;
 8003b8e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b9e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd feb6 	bl	800192c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	3728      	adds	r7, #40	; 0x28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c92:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c94:	7bbb      	ldrb	r3, [r7, #14]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d002      	beq.n	8003ca0 <HAL_CAN_ResetError+0x20>
 8003c9a:	7bbb      	ldrb	r3, [r7, #14]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d103      	bne.n	8003ca8 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ca6:	e007      	b.n	8003cb8 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <__NVIC_SetPriorityGrouping+0x44>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	60d3      	str	r3, [r2, #12]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <__NVIC_GetPriorityGrouping+0x18>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	f003 0307 	and.w	r3, r3, #7
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db0b      	blt.n	8003d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4907      	ldr	r1, [pc, #28]	; (8003d64 <__NVIC_EnableIRQ+0x38>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	e000e100 	.word	0xe000e100

08003d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	6039      	str	r1, [r7, #0]
 8003d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	db0a      	blt.n	8003d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	490c      	ldr	r1, [pc, #48]	; (8003db4 <__NVIC_SetPriority+0x4c>)
 8003d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d86:	0112      	lsls	r2, r2, #4
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d90:	e00a      	b.n	8003da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4908      	ldr	r1, [pc, #32]	; (8003db8 <__NVIC_SetPriority+0x50>)
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	3b04      	subs	r3, #4
 8003da0:	0112      	lsls	r2, r2, #4
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	440b      	add	r3, r1
 8003da6:	761a      	strb	r2, [r3, #24]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	e000e100 	.word	0xe000e100
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b089      	sub	sp, #36	; 0x24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f1c3 0307 	rsb	r3, r3, #7
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	bf28      	it	cs
 8003dda:	2304      	movcs	r3, #4
 8003ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2b06      	cmp	r3, #6
 8003de4:	d902      	bls.n	8003dec <NVIC_EncodePriority+0x30>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	3b03      	subs	r3, #3
 8003dea:	e000      	b.n	8003dee <NVIC_EncodePriority+0x32>
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	401a      	ands	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e04:	f04f 31ff 	mov.w	r1, #4294967295
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43d9      	mvns	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e14:	4313      	orrs	r3, r2
         );
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3724      	adds	r7, #36	; 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e34:	d301      	bcc.n	8003e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e36:	2301      	movs	r3, #1
 8003e38:	e00f      	b.n	8003e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <SysTick_Config+0x40>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e42:	210f      	movs	r1, #15
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	f7ff ff8e 	bl	8003d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <SysTick_Config+0x40>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e52:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <SysTick_Config+0x40>)
 8003e54:	2207      	movs	r2, #7
 8003e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	e000e010 	.word	0xe000e010

08003e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff29 	bl	8003cc8 <__NVIC_SetPriorityGrouping>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e90:	f7ff ff3e 	bl	8003d10 <__NVIC_GetPriorityGrouping>
 8003e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff8e 	bl	8003dbc <NVIC_EncodePriority>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff5d 	bl	8003d68 <__NVIC_SetPriority>
}
 8003eae:	bf00      	nop
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff31 	bl	8003d2c <__NVIC_EnableIRQ>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ffa2 	bl	8003e24 <SysTick_Config>
 8003ee0:	4603      	mov	r3, r0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e037      	b.n	8003f70 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f940 	bl	80041d8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}  
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_DMA_Start_IT+0x20>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e04a      	b.n	800402e <HAL_DMA_Start_IT+0xb6>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d13a      	bne.n	8004020 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f8d4 	bl	800417c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 020e 	orr.w	r2, r2, #14
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e00f      	b.n	800400e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 020a 	orr.w	r2, r2, #10
 8003ffc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0204 	bic.w	r2, r2, #4
 800400c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e005      	b.n	800402c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004028:	2302      	movs	r3, #2
 800402a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800402c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2204      	movs	r2, #4
 8004054:	409a      	lsls	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d024      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x72>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01f      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0204 	bic.w	r2, r2, #4
 8004084:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408e:	2104      	movs	r1, #4
 8004090:	fa01 f202 	lsl.w	r2, r1, r2
 8004094:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d06a      	beq.n	8004174 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80040a6:	e065      	b.n	8004174 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	2202      	movs	r2, #2
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02c      	beq.n	8004112 <HAL_DMA_IRQHandler+0xdc>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d027      	beq.n	8004112 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0320 	and.w	r3, r3, #32
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10b      	bne.n	80040e8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 020a 	bic.w	r2, r2, #10
 80040de:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	2102      	movs	r1, #2
 80040f2:	fa01 f202 	lsl.w	r2, r1, r2
 80040f6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d035      	beq.n	8004174 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004110:	e030      	b.n	8004174 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	2208      	movs	r2, #8
 8004118:	409a      	lsls	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d028      	beq.n	8004174 <HAL_DMA_IRQHandler+0x13e>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d023      	beq.n	8004174 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 020e 	bic.w	r2, r2, #14
 800413a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f202 	lsl.w	r2, r1, r2
 800414a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
    }
  }
}  
 8004172:	e7ff      	b.n	8004174 <HAL_DMA_IRQHandler+0x13e>
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f202 	lsl.w	r2, r1, r2
 8004198:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d108      	bne.n	80041bc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80041ba:	e007      	b.n	80041cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b14      	ldr	r3, [pc, #80]	; (8004238 <DMA_CalcBaseAndBitshift+0x60>)
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d80f      	bhi.n	800420c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <DMA_CalcBaseAndBitshift+0x64>)
 80041f4:	4413      	add	r3, r2
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <DMA_CalcBaseAndBitshift+0x68>)
 80041f8:	fba2 2303 	umull	r2, r3, r2, r3
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	009a      	lsls	r2, r3, #2
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0f      	ldr	r2, [pc, #60]	; (8004244 <DMA_CalcBaseAndBitshift+0x6c>)
 8004208:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800420a:	e00e      	b.n	800422a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	4b0d      	ldr	r3, [pc, #52]	; (8004248 <DMA_CalcBaseAndBitshift+0x70>)
 8004214:	4413      	add	r3, r2
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <DMA_CalcBaseAndBitshift+0x68>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a09      	ldr	r2, [pc, #36]	; (800424c <DMA_CalcBaseAndBitshift+0x74>)
 8004228:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40020407 	.word	0x40020407
 800423c:	bffdfff8 	.word	0xbffdfff8
 8004240:	cccccccd 	.word	0xcccccccd
 8004244:	40020000 	.word	0x40020000
 8004248:	bffdfbf8 	.word	0xbffdfbf8
 800424c:	40020400 	.word	0x40020400

08004250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800425e:	e154      	b.n	800450a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2101      	movs	r1, #1
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa01 f303 	lsl.w	r3, r1, r3
 800426c:	4013      	ands	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8146 	beq.w	8004504 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b01      	cmp	r3, #1
 8004282:	d005      	beq.n	8004290 <HAL_GPIO_Init+0x40>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d130      	bne.n	80042f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2203      	movs	r2, #3
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c6:	2201      	movs	r2, #1
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	f003 0201 	and.w	r2, r3, #1
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d017      	beq.n	800432e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	2203      	movs	r2, #3
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d123      	bne.n	8004382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	08da      	lsrs	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3208      	adds	r2, #8
 8004342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	220f      	movs	r2, #15
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4013      	ands	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	08da      	lsrs	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3208      	adds	r2, #8
 800437c:	6939      	ldr	r1, [r7, #16]
 800437e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	2203      	movs	r2, #3
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 0203 	and.w	r2, r3, #3
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80a0 	beq.w	8004504 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c4:	4b58      	ldr	r3, [pc, #352]	; (8004528 <HAL_GPIO_Init+0x2d8>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	4a57      	ldr	r2, [pc, #348]	; (8004528 <HAL_GPIO_Init+0x2d8>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	6193      	str	r3, [r2, #24]
 80043d0:	4b55      	ldr	r3, [pc, #340]	; (8004528 <HAL_GPIO_Init+0x2d8>)
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	60bb      	str	r3, [r7, #8]
 80043da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043dc:	4a53      	ldr	r2, [pc, #332]	; (800452c <HAL_GPIO_Init+0x2dc>)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	3302      	adds	r3, #2
 80043e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	220f      	movs	r2, #15
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004406:	d019      	beq.n	800443c <HAL_GPIO_Init+0x1ec>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a49      	ldr	r2, [pc, #292]	; (8004530 <HAL_GPIO_Init+0x2e0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <HAL_GPIO_Init+0x1e8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a48      	ldr	r2, [pc, #288]	; (8004534 <HAL_GPIO_Init+0x2e4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00d      	beq.n	8004434 <HAL_GPIO_Init+0x1e4>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a47      	ldr	r2, [pc, #284]	; (8004538 <HAL_GPIO_Init+0x2e8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d007      	beq.n	8004430 <HAL_GPIO_Init+0x1e0>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a46      	ldr	r2, [pc, #280]	; (800453c <HAL_GPIO_Init+0x2ec>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d101      	bne.n	800442c <HAL_GPIO_Init+0x1dc>
 8004428:	2304      	movs	r3, #4
 800442a:	e008      	b.n	800443e <HAL_GPIO_Init+0x1ee>
 800442c:	2305      	movs	r3, #5
 800442e:	e006      	b.n	800443e <HAL_GPIO_Init+0x1ee>
 8004430:	2303      	movs	r3, #3
 8004432:	e004      	b.n	800443e <HAL_GPIO_Init+0x1ee>
 8004434:	2302      	movs	r3, #2
 8004436:	e002      	b.n	800443e <HAL_GPIO_Init+0x1ee>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_GPIO_Init+0x1ee>
 800443c:	2300      	movs	r3, #0
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	f002 0203 	and.w	r2, r2, #3
 8004444:	0092      	lsls	r2, r2, #2
 8004446:	4093      	lsls	r3, r2
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800444e:	4937      	ldr	r1, [pc, #220]	; (800452c <HAL_GPIO_Init+0x2dc>)
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	089b      	lsrs	r3, r3, #2
 8004454:	3302      	adds	r3, #2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445c:	4b38      	ldr	r3, [pc, #224]	; (8004540 <HAL_GPIO_Init+0x2f0>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	43db      	mvns	r3, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4013      	ands	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004480:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <HAL_GPIO_Init+0x2f0>)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004486:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <HAL_GPIO_Init+0x2f0>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044aa:	4a25      	ldr	r2, [pc, #148]	; (8004540 <HAL_GPIO_Init+0x2f0>)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044b0:	4b23      	ldr	r3, [pc, #140]	; (8004540 <HAL_GPIO_Init+0x2f0>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80044d4:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_GPIO_Init+0x2f0>)
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044da:	4b19      	ldr	r3, [pc, #100]	; (8004540 <HAL_GPIO_Init+0x2f0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4013      	ands	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80044fe:	4a10      	ldr	r2, [pc, #64]	; (8004540 <HAL_GPIO_Init+0x2f0>)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3301      	adds	r3, #1
 8004508:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	f47f aea3 	bne.w	8004260 <HAL_GPIO_Init+0x10>
  }
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40021000 	.word	0x40021000
 800452c:	40010000 	.word	0x40010000
 8004530:	48000400 	.word	0x48000400
 8004534:	48000800 	.word	0x48000800
 8004538:	48000c00 	.word	0x48000c00
 800453c:	48001000 	.word	0x48001000
 8004540:	40010400 	.word	0x40010400

08004544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	e001      	b.n	8004566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]
 8004580:	4613      	mov	r3, r2
 8004582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004584:	787b      	ldrb	r3, [r7, #1]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004590:	e002      	b.n	8004598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004592:	887a      	ldrh	r2, [r7, #2]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4013      	ands	r3, r2
 80045bc:	041a      	lsls	r2, r3, #16
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	43d9      	mvns	r1, r3
 80045c2:	887b      	ldrh	r3, [r7, #2]
 80045c4:	400b      	ands	r3, r1
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	619a      	str	r2, [r3, #24]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e08f      	b.n	800470e <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d101      	bne.n	80045fe <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e087      	b.n	800470e <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d101      	bne.n	800460e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e07f      	b.n	800470e <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004614:	4b40      	ldr	r3, [pc, #256]	; (8004718 <HAL_OPAMP_Init+0x140>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	4a3f      	ldr	r2, [pc, #252]	; (8004718 <HAL_OPAMP_Init+0x140>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6193      	str	r3, [r2, #24]
 8004620:	4b3d      	ldr	r3, [pc, #244]	; (8004718 <HAL_OPAMP_Init+0x140>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fc fdab 	bl	800119c <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d003      	beq.n	8004656 <HAL_OPAMP_Init+0x7e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b60      	cmp	r3, #96	; 0x60
 8004654:	d125      	bne.n	80046a2 <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b2f      	ldr	r3, [pc, #188]	; (800471c <HAL_OPAMP_Init+0x144>)
 800465e:	4013      	ands	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6851      	ldr	r1, [r2, #4]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68d2      	ldr	r2, [r2, #12]
 8004668:	4311      	orrs	r1, r2
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6912      	ldr	r2, [r2, #16]
 800466e:	4311      	orrs	r1, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6992      	ldr	r2, [r2, #24]
 8004674:	4311      	orrs	r1, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	69d2      	ldr	r2, [r2, #28]
 800467a:	4311      	orrs	r1, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6a12      	ldr	r2, [r2, #32]
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800468c:	04d2      	lsls	r2, r2, #19
 800468e:	4311      	orrs	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004694:	0612      	lsls	r2, r2, #24
 8004696:	4311      	orrs	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	430b      	orrs	r3, r1
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	e02a      	b.n	80046f8 <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_OPAMP_Init+0x144>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6851      	ldr	r1, [r2, #4]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6892      	ldr	r2, [r2, #8]
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	68d2      	ldr	r2, [r2, #12]
 80046ba:	4311      	orrs	r1, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6912      	ldr	r2, [r2, #16]
 80046c0:	4311      	orrs	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6952      	ldr	r2, [r2, #20]
 80046c6:	4311      	orrs	r1, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6992      	ldr	r2, [r2, #24]
 80046cc:	4311      	orrs	r1, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	69d2      	ldr	r2, [r2, #28]
 80046d2:	4311      	orrs	r1, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6a12      	ldr	r2, [r2, #32]
 80046d8:	4311      	orrs	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046de:	4311      	orrs	r1, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046e4:	04d2      	lsls	r2, r2, #19
 80046e6:	4311      	orrs	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046ec:	0612      	lsls	r2, r2, #24
 80046ee:	4311      	orrs	r1, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	e0003811 	.word	0xe0003811

08004720 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e01d      	b.n	8004774 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b05      	cmp	r3, #5
 8004742:	d102      	bne.n	800474a <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e014      	b.n	8004774 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10c      	bne.n	8004770 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2204      	movs	r2, #4
 800476a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800476e:	e001      	b.n	8004774 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800478a:	af00      	add	r7, sp, #0
 800478c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004794:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800479a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f001 b823 	b.w	80057f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 817d 	beq.w	8004aba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80047c0:	4bbc      	ldr	r3, [pc, #752]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b04      	cmp	r3, #4
 80047ca:	d00c      	beq.n	80047e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047cc:	4bb9      	ldr	r3, [pc, #740]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d15c      	bne.n	8004892 <HAL_RCC_OscConfig+0x10e>
 80047d8:	4bb6      	ldr	r3, [pc, #728]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e4:	d155      	bne.n	8004892 <HAL_RCC_OscConfig+0x10e>
 80047e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d102      	bne.n	8004818 <HAL_RCC_OscConfig+0x94>
 8004812:	4ba8      	ldr	r3, [pc, #672]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	e015      	b.n	8004844 <HAL_RCC_OscConfig+0xc0>
 8004818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800482c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004830:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004834:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004838:	fa93 f3a3 	rbit	r3, r3
 800483c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004840:	4b9c      	ldr	r3, [pc, #624]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004848:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800484c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004850:	fa92 f2a2 	rbit	r2, r2
 8004854:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004858:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800485c:	fab2 f282 	clz	r2, r2
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	f042 0220 	orr.w	r2, r2, #32
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	f002 021f 	and.w	r2, r2, #31
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f202 	lsl.w	r2, r1, r2
 8004872:	4013      	ands	r3, r2
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 811f 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x334>
 800487a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f040 8116 	bne.w	8004ab8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f000 bfaf 	b.w	80057f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a2:	d106      	bne.n	80048b2 <HAL_RCC_OscConfig+0x12e>
 80048a4:	4b83      	ldr	r3, [pc, #524]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a82      	ldr	r2, [pc, #520]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80048aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	e036      	b.n	8004920 <HAL_RCC_OscConfig+0x19c>
 80048b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10c      	bne.n	80048dc <HAL_RCC_OscConfig+0x158>
 80048c2:	4b7c      	ldr	r3, [pc, #496]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a7b      	ldr	r2, [pc, #492]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80048c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	4b79      	ldr	r3, [pc, #484]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a78      	ldr	r2, [pc, #480]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80048d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e021      	b.n	8004920 <HAL_RCC_OscConfig+0x19c>
 80048dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x184>
 80048ee:	4b71      	ldr	r3, [pc, #452]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a70      	ldr	r2, [pc, #448]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80048f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4b6e      	ldr	r3, [pc, #440]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6d      	ldr	r2, [pc, #436]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0x19c>
 8004908:	4b6a      	ldr	r3, [pc, #424]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a69      	ldr	r2, [pc, #420]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 800490e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b67      	ldr	r3, [pc, #412]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a66      	ldr	r2, [pc, #408]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 800491a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004920:	4b64      	ldr	r3, [pc, #400]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f023 020f 	bic.w	r2, r3, #15
 8004928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	495f      	ldr	r1, [pc, #380]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 8004936:	4313      	orrs	r3, r2
 8004938:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800493a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d059      	beq.n	80049fe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7fd f879 	bl	8001a40 <HAL_GetTick>
 800494e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	e00a      	b.n	800496a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004954:	f7fd f874 	bl	8001a40 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b64      	cmp	r3, #100	; 0x64
 8004962:	d902      	bls.n	800496a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	f000 bf43 	b.w	80057f0 <HAL_RCC_OscConfig+0x106c>
 800496a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800496e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004972:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004976:	fa93 f3a3 	rbit	r3, r3
 800497a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800497e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	fab3 f383 	clz	r3, r3
 8004986:	b2db      	uxtb	r3, r3
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	b2db      	uxtb	r3, r3
 800498c:	f043 0301 	orr.w	r3, r3, #1
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d102      	bne.n	800499c <HAL_RCC_OscConfig+0x218>
 8004996:	4b47      	ldr	r3, [pc, #284]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	e015      	b.n	80049c8 <HAL_RCC_OscConfig+0x244>
 800499c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049a0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80049a8:	fa93 f3a3 	rbit	r3, r3
 80049ac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80049b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049b4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80049b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80049c4:	4b3b      	ldr	r3, [pc, #236]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049cc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80049d0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80049d4:	fa92 f2a2 	rbit	r2, r2
 80049d8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80049dc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80049e0:	fab2 f282 	clz	r2, r2
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	f042 0220 	orr.w	r2, r2, #32
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	f002 021f 	and.w	r2, r2, #31
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f202 	lsl.w	r2, r1, r2
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ab      	beq.n	8004954 <HAL_RCC_OscConfig+0x1d0>
 80049fc:	e05d      	b.n	8004aba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fd f81f 	bl	8001a40 <HAL_GetTick>
 8004a02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fd f81a 	bl	8001a40 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	; 0x64
 8004a16:	d902      	bls.n	8004a1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	f000 bee9 	b.w	80057f0 <HAL_RCC_OscConfig+0x106c>
 8004a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004a2a:	fa93 f3a3 	rbit	r3, r3
 8004a2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004a32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d102      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2cc>
 8004a4a:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	e015      	b.n	8004a7c <HAL_RCC_OscConfig+0x2f8>
 8004a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004a78:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <HAL_RCC_OscConfig+0x330>)
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004a84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a88:	fa92 f2a2 	rbit	r2, r2
 8004a8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004a90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a94:	fab2 f282 	clz	r2, r2
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	f042 0220 	orr.w	r2, r2, #32
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	f002 021f 	and.w	r2, r2, #31
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ab      	bne.n	8004a08 <HAL_RCC_OscConfig+0x284>
 8004ab0:	e003      	b.n	8004aba <HAL_RCC_OscConfig+0x336>
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 817d 	beq.w	8004dca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ad0:	4ba6      	ldr	r3, [pc, #664]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004adc:	4ba3      	ldr	r3, [pc, #652]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d172      	bne.n	8004bce <HAL_RCC_OscConfig+0x44a>
 8004ae8:	4ba0      	ldr	r3, [pc, #640]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d16c      	bne.n	8004bce <HAL_RCC_OscConfig+0x44a>
 8004af4:	2302      	movs	r3, #2
 8004af6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004b06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0a:	fab3 f383 	clz	r3, r3
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d102      	bne.n	8004b24 <HAL_RCC_OscConfig+0x3a0>
 8004b1e:	4b93      	ldr	r3, [pc, #588]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	e013      	b.n	8004b4c <HAL_RCC_OscConfig+0x3c8>
 8004b24:	2302      	movs	r3, #2
 8004b26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004b36:	2302      	movs	r3, #2
 8004b38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004b3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004b40:	fa93 f3a3 	rbit	r3, r3
 8004b44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004b48:	4b88      	ldr	r3, [pc, #544]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004b52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b56:	fa92 f2a2 	rbit	r2, r2
 8004b5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004b5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004b62:	fab2 f282 	clz	r2, r2
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	f042 0220 	orr.w	r2, r2, #32
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	f002 021f 	and.w	r2, r2, #31
 8004b72:	2101      	movs	r1, #1
 8004b74:	fa01 f202 	lsl.w	r2, r1, r2
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCC_OscConfig+0x410>
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f000 be2e 	b.w	80057f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b94:	4b75      	ldr	r3, [pc, #468]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	21f8      	movs	r1, #248	; 0xf8
 8004baa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004bb2:	fa91 f1a1 	rbit	r1, r1
 8004bb6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004bba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004bbe:	fab1 f181 	clz	r1, r1
 8004bc2:	b2c9      	uxtb	r1, r1
 8004bc4:	408b      	lsls	r3, r1
 8004bc6:	4969      	ldr	r1, [pc, #420]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bcc:	e0fd      	b.n	8004dca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8088 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x56c>
 8004be0:	2301      	movs	r3, #1
 8004be2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004bf2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf6:	fab3 f383 	clz	r3, r3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	461a      	mov	r2, r3
 8004c08:	2301      	movs	r3, #1
 8004c0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0c:	f7fc ff18 	bl	8001a40 <HAL_GetTick>
 8004c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c14:	e00a      	b.n	8004c2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c16:	f7fc ff13 	bl	8001a40 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d902      	bls.n	8004c2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	f000 bde2 	b.w	80057f0 <HAL_RCC_OscConfig+0x106c>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004c36:	fa93 f3a3 	rbit	r3, r3
 8004c3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004c3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c42:	fab3 f383 	clz	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	095b      	lsrs	r3, r3, #5
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d102      	bne.n	8004c5c <HAL_RCC_OscConfig+0x4d8>
 8004c56:	4b45      	ldr	r3, [pc, #276]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	e013      	b.n	8004c84 <HAL_RCC_OscConfig+0x500>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004c66:	fa93 f3a3 	rbit	r3, r3
 8004c6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c6e:	2302      	movs	r3, #2
 8004c70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c80:	4b3a      	ldr	r3, [pc, #232]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2202      	movs	r2, #2
 8004c86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004c8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c8e:	fa92 f2a2 	rbit	r2, r2
 8004c92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004c96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c9a:	fab2 f282 	clz	r2, r2
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	f042 0220 	orr.w	r2, r2, #32
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	f002 021f 	and.w	r2, r2, #31
 8004caa:	2101      	movs	r1, #1
 8004cac:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0af      	beq.n	8004c16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	21f8      	movs	r1, #248	; 0xf8
 8004ccc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004cd4:	fa91 f1a1 	rbit	r1, r1
 8004cd8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004cdc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004ce0:	fab1 f181 	clz	r1, r1
 8004ce4:	b2c9      	uxtb	r1, r1
 8004ce6:	408b      	lsls	r3, r1
 8004ce8:	4920      	ldr	r1, [pc, #128]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
 8004cee:	e06c      	b.n	8004dca <HAL_RCC_OscConfig+0x646>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004cfa:	fa93 f3a3 	rbit	r3, r3
 8004cfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d06:	fab3 f383 	clz	r3, r3
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	461a      	mov	r2, r3
 8004d18:	2300      	movs	r3, #0
 8004d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fc fe90 	bl	8001a40 <HAL_GetTick>
 8004d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d24:	e00a      	b.n	8004d3c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d26:	f7fc fe8b 	bl	8001a40 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d902      	bls.n	8004d3c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	f000 bd5a 	b.w	80057f0 <HAL_RCC_OscConfig+0x106c>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d46:	fa93 f3a3 	rbit	r3, r3
 8004d4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d104      	bne.n	8004d70 <HAL_RCC_OscConfig+0x5ec>
 8004d66:	4b01      	ldr	r3, [pc, #4]	; (8004d6c <HAL_RCC_OscConfig+0x5e8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	e015      	b.n	8004d98 <HAL_RCC_OscConfig+0x614>
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	2302      	movs	r3, #2
 8004d72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d7a:	fa93 f3a3 	rbit	r3, r3
 8004d7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d82:	2302      	movs	r3, #2
 8004d84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d8c:	fa93 f3a3 	rbit	r3, r3
 8004d90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d94:	4bc8      	ldr	r3, [pc, #800]	; (80050b8 <HAL_RCC_OscConfig+0x934>)
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004d9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004da2:	fa92 f2a2 	rbit	r2, r2
 8004da6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004daa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004dae:	fab2 f282 	clz	r2, r2
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	f042 0220 	orr.w	r2, r2, #32
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	f002 021f 	and.w	r2, r2, #31
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ad      	bne.n	8004d26 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 8110 	beq.w	8005000 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d079      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x760>
 8004df0:	2301      	movs	r3, #1
 8004df2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4bab      	ldr	r3, [pc, #684]	; (80050bc <HAL_RCC_OscConfig+0x938>)
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	461a      	mov	r2, r3
 8004e16:	2301      	movs	r3, #1
 8004e18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1a:	f7fc fe11 	bl	8001a40 <HAL_GetTick>
 8004e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e24:	f7fc fe0c 	bl	8001a40 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d902      	bls.n	8004e3a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	f000 bcdb 	b.w	80057f0 <HAL_RCC_OscConfig+0x106c>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e44:	fa93 f3a3 	rbit	r3, r3
 8004e48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e54:	2202      	movs	r2, #2
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	fa93 f2a3 	rbit	r2, r3
 8004e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e78:	2202      	movs	r2, #2
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	fa93 f2a3 	rbit	r2, r3
 8004e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e94:	4b88      	ldr	r3, [pc, #544]	; (80050b8 <HAL_RCC_OscConfig+0x934>)
 8004e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ea0:	2102      	movs	r1, #2
 8004ea2:	6019      	str	r1, [r3, #0]
 8004ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	fa93 f1a3 	rbit	r1, r3
 8004eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004eba:	6019      	str	r1, [r3, #0]
  return result;
 8004ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	fab3 f383 	clz	r3, r3
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0a0      	beq.n	8004e24 <HAL_RCC_OscConfig+0x6a0>
 8004ee2:	e08d      	b.n	8005000 <HAL_RCC_OscConfig+0x87c>
 8004ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	fa93 f2a3 	rbit	r2, r3
 8004efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f06:	601a      	str	r2, [r3, #0]
  return result;
 8004f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f10:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4b68      	ldr	r3, [pc, #416]	; (80050bc <HAL_RCC_OscConfig+0x938>)
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	461a      	mov	r2, r3
 8004f22:	2300      	movs	r3, #0
 8004f24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f26:	f7fc fd8b 	bl	8001a40 <HAL_GetTick>
 8004f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f2e:	e00a      	b.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f30:	f7fc fd86 	bl	8001a40 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d902      	bls.n	8004f46 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	f000 bc55 	b.w	80057f0 <HAL_RCC_OscConfig+0x106c>
 8004f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f4e:	2202      	movs	r2, #2
 8004f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	fa93 f2a3 	rbit	r2, r3
 8004f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f72:	2202      	movs	r2, #2
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	fa93 f2a3 	rbit	r2, r3
 8004f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f96:	2202      	movs	r2, #2
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	fa93 f2a3 	rbit	r2, r3
 8004fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004fb0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb2:	4b41      	ldr	r3, [pc, #260]	; (80050b8 <HAL_RCC_OscConfig+0x934>)
 8004fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	6019      	str	r1, [r3, #0]
 8004fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	fa93 f1a3 	rbit	r1, r3
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004fd8:	6019      	str	r1, [r3, #0]
  return result;
 8004fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fde:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	fab3 f383 	clz	r3, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d197      	bne.n	8004f30 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005004:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 81a1 	beq.w	8005358 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005016:	2300      	movs	r3, #0
 8005018:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501c:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <HAL_RCC_OscConfig+0x934>)
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d116      	bne.n	8005056 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005028:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <HAL_RCC_OscConfig+0x934>)
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <HAL_RCC_OscConfig+0x934>)
 800502e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005032:	61d3      	str	r3, [r2, #28]
 8005034:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <HAL_RCC_OscConfig+0x934>)
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800503c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005040:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800504e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005056:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <HAL_RCC_OscConfig+0x93c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11a      	bne.n	8005098 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005062:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <HAL_RCC_OscConfig+0x93c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a16      	ldr	r2, [pc, #88]	; (80050c0 <HAL_RCC_OscConfig+0x93c>)
 8005068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506e:	f7fc fce7 	bl	8001a40 <HAL_GetTick>
 8005072:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005076:	e009      	b.n	800508c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005078:	f7fc fce2 	bl	8001a40 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b64      	cmp	r3, #100	; 0x64
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e3b1      	b.n	80057f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508c:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <HAL_RCC_OscConfig+0x93c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0ef      	beq.n	8005078 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800509c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10d      	bne.n	80050c4 <HAL_RCC_OscConfig+0x940>
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <HAL_RCC_OscConfig+0x934>)
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	4a02      	ldr	r2, [pc, #8]	; (80050b8 <HAL_RCC_OscConfig+0x934>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6213      	str	r3, [r2, #32]
 80050b4:	e03c      	b.n	8005130 <HAL_RCC_OscConfig+0x9ac>
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000
 80050bc:	10908120 	.word	0x10908120
 80050c0:	40007000 	.word	0x40007000
 80050c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10c      	bne.n	80050ee <HAL_RCC_OscConfig+0x96a>
 80050d4:	4bc1      	ldr	r3, [pc, #772]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4ac0      	ldr	r2, [pc, #768]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	6213      	str	r3, [r2, #32]
 80050e0:	4bbe      	ldr	r3, [pc, #760]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	4abd      	ldr	r2, [pc, #756]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 80050e6:	f023 0304 	bic.w	r3, r3, #4
 80050ea:	6213      	str	r3, [r2, #32]
 80050ec:	e020      	b.n	8005130 <HAL_RCC_OscConfig+0x9ac>
 80050ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	2b05      	cmp	r3, #5
 80050fc:	d10c      	bne.n	8005118 <HAL_RCC_OscConfig+0x994>
 80050fe:	4bb7      	ldr	r3, [pc, #732]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	4ab6      	ldr	r2, [pc, #728]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 8005104:	f043 0304 	orr.w	r3, r3, #4
 8005108:	6213      	str	r3, [r2, #32]
 800510a:	4bb4      	ldr	r3, [pc, #720]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	4ab3      	ldr	r2, [pc, #716]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6213      	str	r3, [r2, #32]
 8005116:	e00b      	b.n	8005130 <HAL_RCC_OscConfig+0x9ac>
 8005118:	4bb0      	ldr	r3, [pc, #704]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	4aaf      	ldr	r2, [pc, #700]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	6213      	str	r3, [r2, #32]
 8005124:	4bad      	ldr	r3, [pc, #692]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	4aac      	ldr	r2, [pc, #688]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 800512a:	f023 0304 	bic.w	r3, r3, #4
 800512e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005134:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8081 	beq.w	8005244 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7fc fc7d 	bl	8001a40 <HAL_GetTick>
 8005146:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800514c:	f7fc fc78 	bl	8001a40 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f241 3288 	movw	r2, #5000	; 0x1388
 800515c:	4293      	cmp	r3, r2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e345      	b.n	80057f0 <HAL_RCC_OscConfig+0x106c>
 8005164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005168:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800516c:	2202      	movs	r2, #2
 800516e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005174:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	fa93 f2a3 	rbit	r2, r3
 800517e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005182:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005190:	2202      	movs	r2, #2
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005198:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	fa93 f2a3 	rbit	r2, r3
 80051a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80051aa:	601a      	str	r2, [r3, #0]
  return result;
 80051ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80051b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b6:	fab3 f383 	clz	r3, r3
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	095b      	lsrs	r3, r3, #5
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f043 0302 	orr.w	r3, r3, #2
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d102      	bne.n	80051d0 <HAL_RCC_OscConfig+0xa4c>
 80051ca:	4b84      	ldr	r3, [pc, #528]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	e013      	b.n	80051f8 <HAL_RCC_OscConfig+0xa74>
 80051d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80051d8:	2202      	movs	r2, #2
 80051da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	fa93 f2a3 	rbit	r2, r3
 80051ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	4b79      	ldr	r3, [pc, #484]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005200:	2102      	movs	r1, #2
 8005202:	6011      	str	r1, [r2, #0]
 8005204:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005208:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	fa92 f1a2 	rbit	r1, r2
 8005212:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005216:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800521a:	6011      	str	r1, [r2, #0]
  return result;
 800521c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005220:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	fab2 f282 	clz	r2, r2
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	f002 021f 	and.w	r2, r2, #31
 8005236:	2101      	movs	r1, #1
 8005238:	fa01 f202 	lsl.w	r2, r1, r2
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d084      	beq.n	800514c <HAL_RCC_OscConfig+0x9c8>
 8005242:	e07f      	b.n	8005344 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005244:	f7fc fbfc 	bl	8001a40 <HAL_GetTick>
 8005248:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800524c:	e00b      	b.n	8005266 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fc fbf7 	bl	8001a40 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f241 3288 	movw	r2, #5000	; 0x1388
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e2c4      	b.n	80057f0 <HAL_RCC_OscConfig+0x106c>
 8005266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800526e:	2202      	movs	r2, #2
 8005270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005276:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	fa93 f2a3 	rbit	r2, r3
 8005280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005284:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005292:	2202      	movs	r2, #2
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800529a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	fa93 f2a3 	rbit	r2, r3
 80052a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052ac:	601a      	str	r2, [r3, #0]
  return result;
 80052ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b8:	fab3 f383 	clz	r3, r3
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f043 0302 	orr.w	r3, r3, #2
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d102      	bne.n	80052d2 <HAL_RCC_OscConfig+0xb4e>
 80052cc:	4b43      	ldr	r3, [pc, #268]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	e013      	b.n	80052fa <HAL_RCC_OscConfig+0xb76>
 80052d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80052da:	2202      	movs	r2, #2
 80052dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	fa93 f2a3 	rbit	r2, r3
 80052ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	4b39      	ldr	r3, [pc, #228]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005302:	2102      	movs	r1, #2
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800530a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	fa92 f1a2 	rbit	r1, r2
 8005314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005318:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800531c:	6011      	str	r1, [r2, #0]
  return result;
 800531e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005322:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	fab2 f282 	clz	r2, r2
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	f002 021f 	and.w	r2, r2, #31
 8005338:	2101      	movs	r1, #1
 800533a:	fa01 f202 	lsl.w	r2, r1, r2
 800533e:	4013      	ands	r3, r2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d184      	bne.n	800524e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005344:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005348:	2b01      	cmp	r3, #1
 800534a:	d105      	bne.n	8005358 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800534c:	4b23      	ldr	r3, [pc, #140]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 8005352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005356:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8242 	beq.w	80057ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800536a:	4b1c      	ldr	r3, [pc, #112]	; (80053dc <HAL_RCC_OscConfig+0xc58>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b08      	cmp	r3, #8
 8005374:	f000 8213 	beq.w	800579e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	2b02      	cmp	r3, #2
 8005386:	f040 8162 	bne.w	800564e <HAL_RCC_OscConfig+0xeca>
 800538a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005392:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	fa93 f2a3 	rbit	r2, r3
 80053a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80053ae:	601a      	str	r2, [r3, #0]
  return result;
 80053b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80053b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ba:	fab3 f383 	clz	r3, r3
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	461a      	mov	r2, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f7fc fb36 	bl	8001a40 <HAL_GetTick>
 80053d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d8:	e00c      	b.n	80053f4 <HAL_RCC_OscConfig+0xc70>
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fc fb2e 	bl	8001a40 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e1fd      	b.n	80057f0 <HAL_RCC_OscConfig+0x106c>
 80053f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80053fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005406:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	fa93 f2a3 	rbit	r2, r3
 8005410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005414:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005418:	601a      	str	r2, [r3, #0]
  return result;
 800541a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005422:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005424:	fab3 f383 	clz	r3, r3
 8005428:	b2db      	uxtb	r3, r3
 800542a:	095b      	lsrs	r3, r3, #5
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d102      	bne.n	800543e <HAL_RCC_OscConfig+0xcba>
 8005438:	4bb0      	ldr	r3, [pc, #704]	; (80056fc <HAL_RCC_OscConfig+0xf78>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	e027      	b.n	800548e <HAL_RCC_OscConfig+0xd0a>
 800543e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005442:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005446:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800544a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005450:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	fa93 f2a3 	rbit	r2, r3
 800545a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005468:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800546c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005476:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	fa93 f2a3 	rbit	r2, r3
 8005480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005484:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	4b9c      	ldr	r3, [pc, #624]	; (80056fc <HAL_RCC_OscConfig+0xf78>)
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005492:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005496:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800549a:	6011      	str	r1, [r2, #0]
 800549c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	fa92 f1a2 	rbit	r1, r2
 80054aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80054b2:	6011      	str	r1, [r2, #0]
  return result;
 80054b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	fab2 f282 	clz	r2, r2
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	f042 0220 	orr.w	r2, r2, #32
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	f002 021f 	and.w	r2, r2, #31
 80054ce:	2101      	movs	r1, #1
 80054d0:	fa01 f202 	lsl.w	r2, r1, r2
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d182      	bne.n	80053e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054da:	4b88      	ldr	r3, [pc, #544]	; (80056fc <HAL_RCC_OscConfig+0xf78>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80054ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	430b      	orrs	r3, r1
 80054fc:	497f      	ldr	r1, [pc, #508]	; (80056fc <HAL_RCC_OscConfig+0xf78>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]
 8005502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005506:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800550a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800550e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005514:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	fa93 f2a3 	rbit	r2, r3
 800551e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005522:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005526:	601a      	str	r2, [r3, #0]
  return result;
 8005528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005530:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005532:	fab3 f383 	clz	r3, r3
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800553c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	461a      	mov	r2, r3
 8005544:	2301      	movs	r3, #1
 8005546:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005548:	f7fc fa7a 	bl	8001a40 <HAL_GetTick>
 800554c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005550:	e009      	b.n	8005566 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005552:	f7fc fa75 	bl	8001a40 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e144      	b.n	80057f0 <HAL_RCC_OscConfig+0x106c>
 8005566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800556e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005578:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	fa93 f2a3 	rbit	r2, r3
 8005582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005586:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800558a:	601a      	str	r2, [r3, #0]
  return result;
 800558c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005590:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005594:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005596:	fab3 f383 	clz	r3, r3
 800559a:	b2db      	uxtb	r3, r3
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d102      	bne.n	80055b0 <HAL_RCC_OscConfig+0xe2c>
 80055aa:	4b54      	ldr	r3, [pc, #336]	; (80056fc <HAL_RCC_OscConfig+0xf78>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	e027      	b.n	8005600 <HAL_RCC_OscConfig+0xe7c>
 80055b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80055b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	fa93 f2a3 	rbit	r2, r3
 80055cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80055de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	fa93 f2a3 	rbit	r2, r3
 80055f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <HAL_RCC_OscConfig+0xf78>)
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005604:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005608:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800560c:	6011      	str	r1, [r2, #0]
 800560e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005612:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	fa92 f1a2 	rbit	r1, r2
 800561c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005620:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005624:	6011      	str	r1, [r2, #0]
  return result;
 8005626:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800562a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	fab2 f282 	clz	r2, r2
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	f042 0220 	orr.w	r2, r2, #32
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	f002 021f 	and.w	r2, r2, #31
 8005640:	2101      	movs	r1, #1
 8005642:	fa01 f202 	lsl.w	r2, r1, r2
 8005646:	4013      	ands	r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d082      	beq.n	8005552 <HAL_RCC_OscConfig+0xdce>
 800564c:	e0cf      	b.n	80057ee <HAL_RCC_OscConfig+0x106a>
 800564e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005652:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005656:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800565a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005660:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	fa93 f2a3 	rbit	r2, r3
 800566a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005672:	601a      	str	r2, [r3, #0]
  return result;
 8005674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005678:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800567c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800567e:	fab3 f383 	clz	r3, r3
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	461a      	mov	r2, r3
 8005690:	2300      	movs	r3, #0
 8005692:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7fc f9d4 	bl	8001a40 <HAL_GetTick>
 8005698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800569c:	e009      	b.n	80056b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800569e:	f7fc f9cf 	bl	8001a40 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e09e      	b.n	80057f0 <HAL_RCC_OscConfig+0x106c>
 80056b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80056ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	fa93 f2a3 	rbit	r2, r3
 80056ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80056d6:	601a      	str	r2, [r3, #0]
  return result;
 80056d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80056e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e2:	fab3 f383 	clz	r3, r3
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d104      	bne.n	8005700 <HAL_RCC_OscConfig+0xf7c>
 80056f6:	4b01      	ldr	r3, [pc, #4]	; (80056fc <HAL_RCC_OscConfig+0xf78>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	e029      	b.n	8005750 <HAL_RCC_OscConfig+0xfcc>
 80056fc:	40021000 	.word	0x40021000
 8005700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005704:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800570c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005712:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	fa93 f2a3 	rbit	r2, r3
 800571c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005720:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800572e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005738:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	fa93 f2a3 	rbit	r2, r3
 8005742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005746:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	4b2b      	ldr	r3, [pc, #172]	; (80057fc <HAL_RCC_OscConfig+0x1078>)
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005754:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005758:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800575c:	6011      	str	r1, [r2, #0]
 800575e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005762:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	fa92 f1a2 	rbit	r1, r2
 800576c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005770:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005774:	6011      	str	r1, [r2, #0]
  return result;
 8005776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800577a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	fab2 f282 	clz	r2, r2
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	f042 0220 	orr.w	r2, r2, #32
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	f002 021f 	and.w	r2, r2, #31
 8005790:	2101      	movs	r1, #1
 8005792:	fa01 f202 	lsl.w	r2, r1, r2
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d180      	bne.n	800569e <HAL_RCC_OscConfig+0xf1a>
 800579c:	e027      	b.n	80057ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800579e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e01e      	b.n	80057f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <HAL_RCC_OscConfig+0x1078>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d10b      	bne.n	80057ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80057d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80057d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d001      	beq.n	80057ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000

08005800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b09e      	sub	sp, #120	; 0x78
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e162      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005818:	4b90      	ldr	r3, [pc, #576]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d910      	bls.n	8005848 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005826:	4b8d      	ldr	r3, [pc, #564]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 0207 	bic.w	r2, r3, #7
 800582e:	498b      	ldr	r1, [pc, #556]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4313      	orrs	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b89      	ldr	r3, [pc, #548]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d001      	beq.n	8005848 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e14a      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005854:	4b82      	ldr	r3, [pc, #520]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	497f      	ldr	r1, [pc, #508]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005862:	4313      	orrs	r3, r2
 8005864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80dc 	beq.w	8005a2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d13c      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xf6>
 800587c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005880:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005884:	fa93 f3a3 	rbit	r3, r3
 8005888:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800588a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588c:	fab3 f383 	clz	r3, r3
 8005890:	b2db      	uxtb	r3, r3
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d102      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xa6>
 80058a0:	4b6f      	ldr	r3, [pc, #444]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	e00f      	b.n	80058c6 <HAL_RCC_ClockConfig+0xc6>
 80058a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ae:	fa93 f3a3 	rbit	r3, r3
 80058b2:	667b      	str	r3, [r7, #100]	; 0x64
 80058b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058b8:	663b      	str	r3, [r7, #96]	; 0x60
 80058ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058bc:	fa93 f3a3 	rbit	r3, r3
 80058c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c2:	4b67      	ldr	r3, [pc, #412]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80058cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ce:	fa92 f2a2 	rbit	r2, r2
 80058d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80058d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058d6:	fab2 f282 	clz	r2, r2
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	f042 0220 	orr.w	r2, r2, #32
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	f002 021f 	and.w	r2, r2, #31
 80058e6:	2101      	movs	r1, #1
 80058e8:	fa01 f202 	lsl.w	r2, r1, r2
 80058ec:	4013      	ands	r3, r2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d17b      	bne.n	80059ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e0f3      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d13c      	bne.n	8005978 <HAL_RCC_ClockConfig+0x178>
 80058fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005902:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005906:	fa93 f3a3 	rbit	r3, r3
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800590c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590e:	fab3 f383 	clz	r3, r3
 8005912:	b2db      	uxtb	r3, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HAL_RCC_ClockConfig+0x128>
 8005922:	4b4f      	ldr	r3, [pc, #316]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	e00f      	b.n	8005948 <HAL_RCC_ClockConfig+0x148>
 8005928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800592c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005930:	fa93 f3a3 	rbit	r3, r3
 8005934:	647b      	str	r3, [r7, #68]	; 0x44
 8005936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800593a:	643b      	str	r3, [r7, #64]	; 0x40
 800593c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593e:	fa93 f3a3 	rbit	r3, r3
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005944:	4b46      	ldr	r3, [pc, #280]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800594c:	63ba      	str	r2, [r7, #56]	; 0x38
 800594e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005950:	fa92 f2a2 	rbit	r2, r2
 8005954:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005958:	fab2 f282 	clz	r2, r2
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	f042 0220 	orr.w	r2, r2, #32
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	f002 021f 	and.w	r2, r2, #31
 8005968:	2101      	movs	r1, #1
 800596a:	fa01 f202 	lsl.w	r2, r1, r2
 800596e:	4013      	ands	r3, r2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d13a      	bne.n	80059ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0b2      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
 8005978:	2302      	movs	r3, #2
 800597a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	fa93 f3a3 	rbit	r3, r3
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005986:	fab3 f383 	clz	r3, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	b2db      	uxtb	r3, r3
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d102      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x1a0>
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	e00d      	b.n	80059bc <HAL_RCC_ClockConfig+0x1bc>
 80059a0:	2302      	movs	r3, #2
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	fa93 f3a3 	rbit	r3, r3
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
 80059ac:	2302      	movs	r3, #2
 80059ae:	623b      	str	r3, [r7, #32]
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2202      	movs	r2, #2
 80059be:	61ba      	str	r2, [r7, #24]
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	fa92 f2a2 	rbit	r2, r2
 80059c6:	617a      	str	r2, [r7, #20]
  return result;
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	fab2 f282 	clz	r2, r2
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	f042 0220 	orr.w	r2, r2, #32
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	f002 021f 	and.w	r2, r2, #31
 80059da:	2101      	movs	r1, #1
 80059dc:	fa01 f202 	lsl.w	r2, r1, r2
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e079      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ea:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f023 0203 	bic.w	r2, r3, #3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	491a      	ldr	r1, [pc, #104]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059fc:	f7fc f820 	bl	8001a40 <HAL_GetTick>
 8005a00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a04:	f7fc f81c 	bl	8001a40 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e061      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1a:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <HAL_RCC_ClockConfig+0x260>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f003 020c 	and.w	r2, r3, #12
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d1eb      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d214      	bcs.n	8005a64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 0207 	bic.w	r2, r3, #7
 8005a42:	4906      	ldr	r1, [pc, #24]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <HAL_RCC_ClockConfig+0x25c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e040      	b.n	8005ade <HAL_RCC_ClockConfig+0x2de>
 8005a5c:	40022000 	.word	0x40022000
 8005a60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	491a      	ldr	r1, [pc, #104]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8e:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4912      	ldr	r1, [pc, #72]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005aa2:	f000 f829 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <HAL_RCC_ClockConfig+0x2e8>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ab0:	22f0      	movs	r2, #240	; 0xf0
 8005ab2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	fa92 f2a2 	rbit	r2, r2
 8005aba:	60fa      	str	r2, [r7, #12]
  return result;
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	fab2 f282 	clz	r2, r2
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	40d3      	lsrs	r3, r2
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <HAL_RCC_ClockConfig+0x2ec>)
 8005ac8:	5cd3      	ldrb	r3, [r2, r3]
 8005aca:	fa21 f303 	lsr.w	r3, r1, r3
 8005ace:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <HAL_RCC_ClockConfig+0x2f0>)
 8005ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <HAL_RCC_ClockConfig+0x2f4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fb ff6e 	bl	80019b8 <HAL_InitTick>
  
  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3778      	adds	r7, #120	; 0x78
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	08006590 	.word	0x08006590
 8005af0:	20000000 	.word	0x20000000
 8005af4:	20000004 	.word	0x20000004

08005af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b08b      	sub	sp, #44	; 0x2c
 8005afc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	2300      	movs	r3, #0
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b12:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d002      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0x30>
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d003      	beq.n	8005b2e <HAL_RCC_GetSysClockFreq+0x36>
 8005b26:	e03c      	b.n	8005ba2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b28:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b2a:	623b      	str	r3, [r7, #32]
      break;
 8005b2c:	e03c      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	fa92 f2a2 	rbit	r2, r2
 8005b40:	607a      	str	r2, [r7, #4]
  return result;
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	fab2 f282 	clz	r2, r2
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	40d3      	lsrs	r3, r2
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b4e:	5cd3      	ldrb	r3, [r2, r3]
 8005b50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b52:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	220f      	movs	r2, #15
 8005b5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	fa92 f2a2 	rbit	r2, r2
 8005b64:	60fa      	str	r2, [r7, #12]
  return result;
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	fab2 f282 	clz	r2, r2
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	40d3      	lsrs	r3, r2
 8005b70:	4a14      	ldr	r2, [pc, #80]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b72:	5cd3      	ldrb	r3, [r2, r3]
 8005b74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b80:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b90:	e004      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	623b      	str	r3, [r7, #32]
      break;
 8005ba0:	e002      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005ba4:	623b      	str	r3, [r7, #32]
      break;
 8005ba6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	372c      	adds	r7, #44	; 0x2c
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	080065a0 	.word	0x080065a0
 8005bc4:	080065b0 	.word	0x080065b0
 8005bc8:	003d0900 	.word	0x003d0900
 8005bcc:	007a1200 	.word	0x007a1200

08005bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e049      	b.n	8005c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fb fbf4 	bl	80013e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f000 fab0 	bl	8006174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d001      	beq.n	8005c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e04a      	b.n	8005d2e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a21      	ldr	r2, [pc, #132]	; (8005d3c <HAL_TIM_Base_Start_IT+0xbc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d018      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x6c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc2:	d013      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x6c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	; (8005d40 <HAL_TIM_Base_Start_IT+0xc0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00e      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x6c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1c      	ldr	r2, [pc, #112]	; (8005d44 <HAL_TIM_Base_Start_IT+0xc4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d009      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x6c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1a      	ldr	r2, [pc, #104]	; (8005d48 <HAL_TIM_Base_Start_IT+0xc8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x6c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a19      	ldr	r2, [pc, #100]	; (8005d4c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d115      	bne.n	8005d18 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b06      	cmp	r3, #6
 8005cfc:	d015      	beq.n	8005d2a <HAL_TIM_Base_Start_IT+0xaa>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d011      	beq.n	8005d2a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0201 	orr.w	r2, r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d16:	e008      	b.n	8005d2a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0201 	orr.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e000      	b.n	8005d2c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40013400 	.word	0x40013400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	00010007 	.word	0x00010007

08005d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d122      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d11b      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0202 	mvn.w	r2, #2
 8005d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f003 0303 	and.w	r3, r3, #3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f9ce 	bl	8006138 <HAL_TIM_IC_CaptureCallback>
 8005d9c:	e005      	b.n	8005daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9c0 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f9d1 	bl	800614c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d122      	bne.n	8005e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d11b      	bne.n	8005e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0204 	mvn.w	r2, #4
 8005dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9a4 	bl	8006138 <HAL_TIM_IC_CaptureCallback>
 8005df0:	e005      	b.n	8005dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f996 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f9a7 	bl	800614c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0208 	mvn.w	r2, #8
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f97a 	bl	8006138 <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f96c 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f97d 	bl	800614c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0310 	and.w	r3, r3, #16
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0210 	mvn.w	r2, #16
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2208      	movs	r2, #8
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f950 	bl	8006138 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f942 	bl	8006124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f953 	bl	800614c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d10e      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d107      	bne.n	8005ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0201 	mvn.w	r2, #1
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fb f928 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d10e      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b80      	cmp	r3, #128	; 0x80
 8005ef2:	d107      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 faec 	bl	80064dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f12:	d10e      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d107      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fadf 	bl	80064f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	d10e      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d107      	bne.n	8005f5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f901 	bl	8006160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d10e      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d107      	bne.n	8005f8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f06f 0220 	mvn.w	r2, #32
 8005f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fa9f 	bl	80064c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_TIM_ConfigClockSource+0x1c>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e0b6      	b.n	800611c <HAL_TIM_ConfigClockSource+0x18a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fcc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fd0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fd8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fea:	d03e      	beq.n	800606a <HAL_TIM_ConfigClockSource+0xd8>
 8005fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff0:	f200 8087 	bhi.w	8006102 <HAL_TIM_ConfigClockSource+0x170>
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff8:	f000 8086 	beq.w	8006108 <HAL_TIM_ConfigClockSource+0x176>
 8005ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006000:	d87f      	bhi.n	8006102 <HAL_TIM_ConfigClockSource+0x170>
 8006002:	2b70      	cmp	r3, #112	; 0x70
 8006004:	d01a      	beq.n	800603c <HAL_TIM_ConfigClockSource+0xaa>
 8006006:	2b70      	cmp	r3, #112	; 0x70
 8006008:	d87b      	bhi.n	8006102 <HAL_TIM_ConfigClockSource+0x170>
 800600a:	2b60      	cmp	r3, #96	; 0x60
 800600c:	d050      	beq.n	80060b0 <HAL_TIM_ConfigClockSource+0x11e>
 800600e:	2b60      	cmp	r3, #96	; 0x60
 8006010:	d877      	bhi.n	8006102 <HAL_TIM_ConfigClockSource+0x170>
 8006012:	2b50      	cmp	r3, #80	; 0x50
 8006014:	d03c      	beq.n	8006090 <HAL_TIM_ConfigClockSource+0xfe>
 8006016:	2b50      	cmp	r3, #80	; 0x50
 8006018:	d873      	bhi.n	8006102 <HAL_TIM_ConfigClockSource+0x170>
 800601a:	2b40      	cmp	r3, #64	; 0x40
 800601c:	d058      	beq.n	80060d0 <HAL_TIM_ConfigClockSource+0x13e>
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d86f      	bhi.n	8006102 <HAL_TIM_ConfigClockSource+0x170>
 8006022:	2b30      	cmp	r3, #48	; 0x30
 8006024:	d064      	beq.n	80060f0 <HAL_TIM_ConfigClockSource+0x15e>
 8006026:	2b30      	cmp	r3, #48	; 0x30
 8006028:	d86b      	bhi.n	8006102 <HAL_TIM_ConfigClockSource+0x170>
 800602a:	2b20      	cmp	r3, #32
 800602c:	d060      	beq.n	80060f0 <HAL_TIM_ConfigClockSource+0x15e>
 800602e:	2b20      	cmp	r3, #32
 8006030:	d867      	bhi.n	8006102 <HAL_TIM_ConfigClockSource+0x170>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d05c      	beq.n	80060f0 <HAL_TIM_ConfigClockSource+0x15e>
 8006036:	2b10      	cmp	r3, #16
 8006038:	d05a      	beq.n	80060f0 <HAL_TIM_ConfigClockSource+0x15e>
 800603a:	e062      	b.n	8006102 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800604c:	f000 f99c 	bl	8006388 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800605e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	609a      	str	r2, [r3, #8]
      break;
 8006068:	e04f      	b.n	800610a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800607a:	f000 f985 	bl	8006388 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800608c:	609a      	str	r2, [r3, #8]
      break;
 800608e:	e03c      	b.n	800610a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800609c:	461a      	mov	r2, r3
 800609e:	f000 f8f9 	bl	8006294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2150      	movs	r1, #80	; 0x50
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 f952 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060ae:	e02c      	b.n	800610a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060bc:	461a      	mov	r2, r3
 80060be:	f000 f918 	bl	80062f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2160      	movs	r1, #96	; 0x60
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f942 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060ce:	e01c      	b.n	800610a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060dc:	461a      	mov	r2, r3
 80060de:	f000 f8d9 	bl	8006294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2140      	movs	r1, #64	; 0x40
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 f932 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 80060ee:	e00c      	b.n	800610a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f000 f929 	bl	8006352 <TIM_ITRx_SetConfig>
      break;
 8006100:	e003      	b.n	800610a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
      break;
 8006106:	e000      	b.n	800610a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006108:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a3c      	ldr	r2, [pc, #240]	; (8006278 <TIM_Base_SetConfig+0x104>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00f      	beq.n	80061ac <TIM_Base_SetConfig+0x38>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006192:	d00b      	beq.n	80061ac <TIM_Base_SetConfig+0x38>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a39      	ldr	r2, [pc, #228]	; (800627c <TIM_Base_SetConfig+0x108>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_Base_SetConfig+0x38>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a38      	ldr	r2, [pc, #224]	; (8006280 <TIM_Base_SetConfig+0x10c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_Base_SetConfig+0x38>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a37      	ldr	r2, [pc, #220]	; (8006284 <TIM_Base_SetConfig+0x110>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d108      	bne.n	80061be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a2d      	ldr	r2, [pc, #180]	; (8006278 <TIM_Base_SetConfig+0x104>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01b      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d017      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2a      	ldr	r2, [pc, #168]	; (800627c <TIM_Base_SetConfig+0x108>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d013      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a29      	ldr	r2, [pc, #164]	; (8006280 <TIM_Base_SetConfig+0x10c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00f      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a28      	ldr	r2, [pc, #160]	; (8006284 <TIM_Base_SetConfig+0x110>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00b      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a27      	ldr	r2, [pc, #156]	; (8006288 <TIM_Base_SetConfig+0x114>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d007      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a26      	ldr	r2, [pc, #152]	; (800628c <TIM_Base_SetConfig+0x118>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_Base_SetConfig+0x8a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a25      	ldr	r2, [pc, #148]	; (8006290 <TIM_Base_SetConfig+0x11c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a10      	ldr	r2, [pc, #64]	; (8006278 <TIM_Base_SetConfig+0x104>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00f      	beq.n	800625c <TIM_Base_SetConfig+0xe8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a11      	ldr	r2, [pc, #68]	; (8006284 <TIM_Base_SetConfig+0x110>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_Base_SetConfig+0xe8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a10      	ldr	r2, [pc, #64]	; (8006288 <TIM_Base_SetConfig+0x114>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_Base_SetConfig+0xe8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a0f      	ldr	r2, [pc, #60]	; (800628c <TIM_Base_SetConfig+0x118>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0xe8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a0e      	ldr	r2, [pc, #56]	; (8006290 <TIM_Base_SetConfig+0x11c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d103      	bne.n	8006264 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	615a      	str	r2, [r3, #20]
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40012c00 	.word	0x40012c00
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40014400 	.word	0x40014400
 8006290:	40014800 	.word	0x40014800

08006294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f023 0201 	bic.w	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 030a 	bic.w	r3, r3, #10
 80062d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b087      	sub	sp, #28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	f023 0210 	bic.w	r2, r3, #16
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800631c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800632e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006352:	b480      	push	{r7}
 8006354:	b085      	sub	sp, #20
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	f043 0307 	orr.w	r3, r3, #7
 8006374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	021a      	lsls	r2, r3, #8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	431a      	orrs	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063dc:	2302      	movs	r3, #2
 80063de:	e063      	b.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2b      	ldr	r2, [pc, #172]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2a      	ldr	r2, [pc, #168]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800641a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d018      	beq.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006452:	d013      	beq.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a18      	ldr	r2, [pc, #96]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00e      	beq.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d009      	beq.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d10c      	bne.n	8006496 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006482:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	4313      	orrs	r3, r2
 800648c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40013400 	.word	0x40013400
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40014000 	.word	0x40014000

080064c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <memset>:
 8006504:	4402      	add	r2, r0
 8006506:	4603      	mov	r3, r0
 8006508:	4293      	cmp	r3, r2
 800650a:	d100      	bne.n	800650e <memset+0xa>
 800650c:	4770      	bx	lr
 800650e:	f803 1b01 	strb.w	r1, [r3], #1
 8006512:	e7f9      	b.n	8006508 <memset+0x4>

08006514 <__libc_init_array>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	4d0d      	ldr	r5, [pc, #52]	; (800654c <__libc_init_array+0x38>)
 8006518:	4c0d      	ldr	r4, [pc, #52]	; (8006550 <__libc_init_array+0x3c>)
 800651a:	1b64      	subs	r4, r4, r5
 800651c:	10a4      	asrs	r4, r4, #2
 800651e:	2600      	movs	r6, #0
 8006520:	42a6      	cmp	r6, r4
 8006522:	d109      	bne.n	8006538 <__libc_init_array+0x24>
 8006524:	4d0b      	ldr	r5, [pc, #44]	; (8006554 <__libc_init_array+0x40>)
 8006526:	4c0c      	ldr	r4, [pc, #48]	; (8006558 <__libc_init_array+0x44>)
 8006528:	f000 f826 	bl	8006578 <_init>
 800652c:	1b64      	subs	r4, r4, r5
 800652e:	10a4      	asrs	r4, r4, #2
 8006530:	2600      	movs	r6, #0
 8006532:	42a6      	cmp	r6, r4
 8006534:	d105      	bne.n	8006542 <__libc_init_array+0x2e>
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	f855 3b04 	ldr.w	r3, [r5], #4
 800653c:	4798      	blx	r3
 800653e:	3601      	adds	r6, #1
 8006540:	e7ee      	b.n	8006520 <__libc_init_array+0xc>
 8006542:	f855 3b04 	ldr.w	r3, [r5], #4
 8006546:	4798      	blx	r3
 8006548:	3601      	adds	r6, #1
 800654a:	e7f2      	b.n	8006532 <__libc_init_array+0x1e>
 800654c:	080065c0 	.word	0x080065c0
 8006550:	080065c0 	.word	0x080065c0
 8006554:	080065c0 	.word	0x080065c0
 8006558:	080065c4 	.word	0x080065c4

0800655c <memcpy>:
 800655c:	440a      	add	r2, r1
 800655e:	4291      	cmp	r1, r2
 8006560:	f100 33ff 	add.w	r3, r0, #4294967295
 8006564:	d100      	bne.n	8006568 <memcpy+0xc>
 8006566:	4770      	bx	lr
 8006568:	b510      	push	{r4, lr}
 800656a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800656e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006572:	4291      	cmp	r1, r2
 8006574:	d1f9      	bne.n	800656a <memcpy+0xe>
 8006576:	bd10      	pop	{r4, pc}

08006578 <_init>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	bf00      	nop
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr

08006584 <_fini>:
 8006584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006586:	bf00      	nop
 8006588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800658a:	bc08      	pop	{r3}
 800658c:	469e      	mov	lr, r3
 800658e:	4770      	bx	lr
