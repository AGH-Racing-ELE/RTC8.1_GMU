
GMU_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006080  08006080  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006080  08006080  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006080  08006080  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006080  08006080  00016080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000444  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000450  20000450  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010fa7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034f6  00000000  00000000  00031026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001108  00000000  00000000  00034520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ce4  00000000  00000000  00035628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fbd6  00000000  00000000  0003630c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001799c  00000000  00000000  00055ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000beaa9  00000000  00000000  0006d87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000450c  00000000  00000000  0012c328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00130834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006038 	.word	0x08006038

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006038 	.word	0x08006038

080001c8 <ADC_Init>:
#include "ADC_Handler.h"

uint16_t adcValue;

void ADC_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_OPAMP_Start(&hopamp1);
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <ADC_Init+0x1c>)
 80001ce:	f004 f827 	bl	8004220 <HAL_OPAMP_Start>
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80001d2:	2100      	movs	r1, #0
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <ADC_Init+0x20>)
 80001d6:	f002 f9e1 	bl	800259c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <ADC_Init+0x20>)
 80001dc:	f001 fdaa 	bl	8001d34 <HAL_ADC_Start_IT>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000178 	.word	0x20000178
 80001e8:	20000100 	.word	0x20000100

080001ec <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80001fc:	d106      	bne.n	800020c <HAL_ADC_ConvCpltCallback+0x20>
	{
		adcValue = HAL_ADC_GetValue(hadc);
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f001 fed8 	bl	8001fb4 <HAL_ADC_GetValue>
 8000204:	4603      	mov	r3, r0
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b02      	ldr	r3, [pc, #8]	; (8000214 <HAL_ADC_ConvCpltCallback+0x28>)
 800020a:	801a      	strh	r2, [r3, #0]
	}
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000028 	.word	0x20000028

08000218 <getADCValue>:

uint16_t getADCValue(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	return adcValue;
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <getADCValue+0x14>)
 800021e:	881b      	ldrh	r3, [r3, #0]
}
 8000220:	4618      	mov	r0, r3
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000028 	.word	0x20000028

08000230 <AppInit>:


Gearbox_t gearbox;

void AppInit(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	gearboxInit(&gearbox);
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <AppInit+0x18>)
 8000236:	f000 f9af 	bl	8000598 <gearboxInit>
	ADC_Init();
 800023a:	f7ff ffc5 	bl	80001c8 <ADC_Init>
	CAN_Handler_Init();
 800023e:	f000 f8ad 	bl	800039c <CAN_Handler_Init>

}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	2000002c 	.word	0x2000002c

0800024c <canRxProcess>:

void canRxProcess()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	static uint8_t clutch_data;

	if(CAN_Handler_IsGearUpCommanded())
 8000250:	f000 f8d2 	bl	80003f8 <CAN_Handler_IsGearUpCommanded>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d003      	beq.n	8000262 <canRxProcess+0x16>
	{
		startUpshift(&gearbox);
 800025a:	4812      	ldr	r0, [pc, #72]	; (80002a4 <canRxProcess+0x58>)
 800025c:	f000 fca6 	bl	8000bac <startUpshift>
		return;
 8000260:	e01e      	b.n	80002a0 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsGearDownCommanded())
 8000262:	f000 f8e5 	bl	8000430 <CAN_Handler_IsGearDownCommanded>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d003      	beq.n	8000274 <canRxProcess+0x28>
	{
		startDownshift(&gearbox);
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <canRxProcess+0x58>)
 800026e:	f000 fcae 	bl	8000bce <startDownshift>
		return;
 8000272:	e015      	b.n	80002a0 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsClutchCommanded(&clutch_data))
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <canRxProcess+0x5c>)
 8000276:	f000 f8f9 	bl	800046c <CAN_Handler_IsClutchCommanded>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d00f      	beq.n	80002a0 <canRxProcess+0x54>
	{
		if(clutch_data == 255)
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <canRxProcess+0x5c>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2bff      	cmp	r3, #255	; 0xff
 8000286:	d103      	bne.n	8000290 <canRxProcess+0x44>
			{
				clutch(true);
 8000288:	2001      	movs	r0, #1
 800028a:	f000 fcb1 	bl	8000bf0 <clutch>
			}
			else if(clutch_data == 0)
			{
				clutch(false);
			}
				return;
 800028e:	e006      	b.n	800029e <canRxProcess+0x52>
			else if(clutch_data == 0)
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <canRxProcess+0x5c>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d102      	bne.n	800029e <canRxProcess+0x52>
				clutch(false);
 8000298:	2000      	movs	r0, #0
 800029a:	f000 fca9 	bl	8000bf0 <clutch>
				return;
 800029e:	bf00      	nop
	}

}
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	20000050 	.word	0x20000050

080002ac <sendCANFrame>:

void sendCANFrame(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af04      	add	r7, sp, #16

	CAN_Handler_SendGmu1Frame(gearbox.actual_gear, HAL_GPIO_ReadPin(CLUTCH_GPIO_Port, CLUTCH_Pin), gearbox.gearPosADC, gearbox._state, 0, 0, gearbox.gear_cut);
 80002b2:	4b13      	ldr	r3, [pc, #76]	; (8000300 <sendCANFrame+0x54>)
 80002b4:	7b5c      	ldrb	r4, [r3, #13]
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4812      	ldr	r0, [pc, #72]	; (8000304 <sendCANFrame+0x58>)
 80002bc:	f003 fec2 	bl	8004044 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4618      	mov	r0, r3
 80002c4:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <sendCANFrame+0x54>)
 80002c6:	881a      	ldrh	r2, [r3, #0]
 80002c8:	4b0d      	ldr	r3, [pc, #52]	; (8000300 <sendCANFrame+0x54>)
 80002ca:	7b19      	ldrb	r1, [r3, #12]
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <sendCANFrame+0x54>)
 80002ce:	7edb      	ldrb	r3, [r3, #27]
 80002d0:	9302      	str	r3, [sp, #8]
 80002d2:	2300      	movs	r3, #0
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2300      	movs	r3, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	460b      	mov	r3, r1
 80002dc:	4601      	mov	r1, r0
 80002de:	4620      	mov	r0, r4
 80002e0:	f000 f8e4 	bl	80004ac <CAN_Handler_SendGmu1Frame>
	CAN_Handler_SendGmu2Frame(0, 0, gearbox.upshiftTime, gearbox.downshiftTime);
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <sendCANFrame+0x54>)
 80002e6:	69db      	ldr	r3, [r3, #28]
 80002e8:	b29a      	uxth	r2, r3
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <sendCANFrame+0x54>)
 80002ec:	6a1b      	ldr	r3, [r3, #32]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 f910 	bl	8000518 <CAN_Handler_SendGmu2Frame>
}
 80002f8:	bf00      	nop
 80002fa:	3704      	adds	r7, #4
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd90      	pop	{r4, r7, pc}
 8000300:	2000002c 	.word	0x2000002c
 8000304:	48000400 	.word	0x48000400

08000308 <statusLED>:

void statusLED(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 800030c:	2180      	movs	r1, #128	; 0x80
 800030e:	4802      	ldr	r0, [pc, #8]	; (8000318 <statusLED+0x10>)
 8000310:	f003 fec8 	bl	80040a4 <HAL_GPIO_TogglePin>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	48000400 	.word	0x48000400

0800031c <AppProcess>:
void AppProcess(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
	uint32_t CANRXtick = HAL_GetTick();
 8000322:	f001 fb07 	bl	8001934 <HAL_GetTick>
 8000326:	60f8      	str	r0, [r7, #12]
	uint32_t CANSendFrameTick = HAL_GetTick();
 8000328:	f001 fb04 	bl	8001934 <HAL_GetTick>
 800032c:	60b8      	str	r0, [r7, #8]
	uint32_t StatusLEDTick = HAL_GetTick();
 800032e:	f001 fb01 	bl	8001934 <HAL_GetTick>
 8000332:	6078      	str	r0, [r7, #4]

	while(1)
	{
		gearbox.gearPosADC = getADCValue();
 8000334:	f7ff ff70 	bl	8000218 <getADCValue>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	4b16      	ldr	r3, [pc, #88]	; (8000398 <AppProcess+0x7c>)
 800033e:	801a      	strh	r2, [r3, #0]
		updateGear(&gearbox);
 8000340:	4815      	ldr	r0, [pc, #84]	; (8000398 <AppProcess+0x7c>)
 8000342:	f000 f955 	bl	80005f0 <updateGear>
		processCallback(&gearbox);
 8000346:	4814      	ldr	r0, [pc, #80]	; (8000398 <AppProcess+0x7c>)
 8000348:	f000 f9bc 	bl	80006c4 <processCallback>

		if((HAL_GetTick() - CANRXtick) > 1)
 800034c:	f001 faf2 	bl	8001934 <HAL_GetTick>
 8000350:	4602      	mov	r2, r0
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	2b01      	cmp	r3, #1
 8000358:	d904      	bls.n	8000364 <AppProcess+0x48>
		{
			canRxProcess();
 800035a:	f7ff ff77 	bl	800024c <canRxProcess>
			CANRXtick = HAL_GetTick();
 800035e:	f001 fae9 	bl	8001934 <HAL_GetTick>
 8000362:	60f8      	str	r0, [r7, #12]
		}
		if((HAL_GetTick() - CANSendFrameTick) > 2)
 8000364:	f001 fae6 	bl	8001934 <HAL_GetTick>
 8000368:	4602      	mov	r2, r0
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	2b02      	cmp	r3, #2
 8000370:	d904      	bls.n	800037c <AppProcess+0x60>
		{
			sendCANFrame();
 8000372:	f7ff ff9b 	bl	80002ac <sendCANFrame>
			CANSendFrameTick = HAL_GetTick();
 8000376:	f001 fadd 	bl	8001934 <HAL_GetTick>
 800037a:	60b8      	str	r0, [r7, #8]
		}
		if((HAL_GetTick() - StatusLEDTick) > 1000)
 800037c:	f001 fada 	bl	8001934 <HAL_GetTick>
 8000380:	4602      	mov	r2, r0
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800038a:	d9d3      	bls.n	8000334 <AppProcess+0x18>
		{
			statusLED();
 800038c:	f7ff ffbc 	bl	8000308 <statusLED>
			StatusLEDTick = HAL_GetTick();
 8000390:	f001 fad0 	bl	8001934 <HAL_GetTick>
 8000394:	6078      	str	r0, [r7, #4]
		gearbox.gearPosADC = getADCValue();
 8000396:	e7cd      	b.n	8000334 <AppProcess+0x18>
 8000398:	2000002c 	.word	0x2000002c

0800039c <CAN_Handler_Init>:

struct can_frame cf_gear_up, cf_gear_down, cf_clutch;
struct can_frame cf_gmu1, cf_gmu2;


void CAN_Handler_Init(){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

	CAN_Init();
 80003a0:	f001 f87e 	bl	80014a0 <CAN_Init>

	CAN_InitFrame(&cf_gear_up, 0x000, 0, 1);
 80003a4:	2301      	movs	r3, #1
 80003a6:	2200      	movs	r2, #0
 80003a8:	2100      	movs	r1, #0
 80003aa:	480e      	ldr	r0, [pc, #56]	; (80003e4 <CAN_Handler_Init+0x48>)
 80003ac:	f001 f884 	bl	80014b8 <CAN_InitFrame>
	CAN_InitFrame(&cf_gear_down, 0x001, 0, 1);
 80003b0:	2301      	movs	r3, #1
 80003b2:	2200      	movs	r2, #0
 80003b4:	2101      	movs	r1, #1
 80003b6:	480c      	ldr	r0, [pc, #48]	; (80003e8 <CAN_Handler_Init+0x4c>)
 80003b8:	f001 f87e 	bl	80014b8 <CAN_InitFrame>
	CAN_InitFrame(&cf_clutch, 0x002, 0, 1);
 80003bc:	2301      	movs	r3, #1
 80003be:	2200      	movs	r2, #0
 80003c0:	2102      	movs	r1, #2
 80003c2:	480a      	ldr	r0, [pc, #40]	; (80003ec <CAN_Handler_Init+0x50>)
 80003c4:	f001 f878 	bl	80014b8 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu1, 0x080, 10, 8);
 80003c8:	2308      	movs	r3, #8
 80003ca:	220a      	movs	r2, #10
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	4808      	ldr	r0, [pc, #32]	; (80003f0 <CAN_Handler_Init+0x54>)
 80003d0:	f001 f872 	bl	80014b8 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu2, 0x081, 100, 8);
 80003d4:	2308      	movs	r3, #8
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	2181      	movs	r1, #129	; 0x81
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <CAN_Handler_Init+0x58>)
 80003dc:	f001 f86c 	bl	80014b8 <CAN_InitFrame>

}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000054 	.word	0x20000054
 80003e8:	20000074 	.word	0x20000074
 80003ec:	20000094 	.word	0x20000094
 80003f0:	200000b4 	.word	0x200000b4
 80003f4:	200000d4 	.word	0x200000d4

080003f8 <CAN_Handler_IsGearUpCommanded>:

uint8_t CAN_Handler_IsGearUpCommanded(){
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

	static uint32_t last_tick = 0;

	if(cf_gear_up.tick_ms != last_tick && cf_gear_up.core.data[0] == 255){
 80003fc:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <CAN_Handler_IsGearUpCommanded+0x30>)
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <CAN_Handler_IsGearUpCommanded+0x34>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d009      	beq.n	800041c <CAN_Handler_IsGearUpCommanded+0x24>
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <CAN_Handler_IsGearUpCommanded+0x30>)
 800040a:	7b1b      	ldrb	r3, [r3, #12]
 800040c:	2bff      	cmp	r3, #255	; 0xff
 800040e:	d105      	bne.n	800041c <CAN_Handler_IsGearUpCommanded+0x24>
		last_tick = cf_gear_up.tick_ms;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <CAN_Handler_IsGearUpCommanded+0x30>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a05      	ldr	r2, [pc, #20]	; (800042c <CAN_Handler_IsGearUpCommanded+0x34>)
 8000416:	6013      	str	r3, [r2, #0]
		return 1;
 8000418:	2301      	movs	r3, #1
 800041a:	e000      	b.n	800041e <CAN_Handler_IsGearUpCommanded+0x26>
	}
	else{
		return 0;
 800041c:	2300      	movs	r3, #0
	}


}
 800041e:	4618      	mov	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	20000054 	.word	0x20000054
 800042c:	200000f4 	.word	0x200000f4

08000430 <CAN_Handler_IsGearDownCommanded>:

uint8_t CAN_Handler_IsGearDownCommanded(){
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

	static uint32_t last_tick = 0;

	if(cf_gear_up.tick_ms != last_tick && cf_gear_down.core.data[0] == 255){
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <CAN_Handler_IsGearDownCommanded+0x30>)
 8000436:	699a      	ldr	r2, [r3, #24]
 8000438:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <CAN_Handler_IsGearDownCommanded+0x34>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	429a      	cmp	r2, r3
 800043e:	d009      	beq.n	8000454 <CAN_Handler_IsGearDownCommanded+0x24>
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <CAN_Handler_IsGearDownCommanded+0x38>)
 8000442:	7b1b      	ldrb	r3, [r3, #12]
 8000444:	2bff      	cmp	r3, #255	; 0xff
 8000446:	d105      	bne.n	8000454 <CAN_Handler_IsGearDownCommanded+0x24>
		last_tick = cf_gear_down.tick_ms;
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <CAN_Handler_IsGearDownCommanded+0x38>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <CAN_Handler_IsGearDownCommanded+0x34>)
 800044e:	6013      	str	r3, [r2, #0]
		return 1;
 8000450:	2301      	movs	r3, #1
 8000452:	e000      	b.n	8000456 <CAN_Handler_IsGearDownCommanded+0x26>
	}
	else{
		return 0;
 8000454:	2300      	movs	r3, #0
	}


}
 8000456:	4618      	mov	r0, r3
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	20000054 	.word	0x20000054
 8000464:	200000f8 	.word	0x200000f8
 8000468:	20000074 	.word	0x20000074

0800046c <CAN_Handler_IsClutchCommanded>:

uint8_t CAN_Handler_IsClutchCommanded(uint8_t* data){
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

	static uint32_t last_tick = 0;

	if(cf_clutch.tick_ms != last_tick){
 8000474:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <CAN_Handler_IsClutchCommanded+0x38>)
 8000476:	699a      	ldr	r2, [r3, #24]
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <CAN_Handler_IsClutchCommanded+0x3c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	429a      	cmp	r2, r3
 800047e:	d009      	beq.n	8000494 <CAN_Handler_IsClutchCommanded+0x28>
		last_tick = cf_clutch.tick_ms;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <CAN_Handler_IsClutchCommanded+0x38>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a08      	ldr	r2, [pc, #32]	; (80004a8 <CAN_Handler_IsClutchCommanded+0x3c>)
 8000486:	6013      	str	r3, [r2, #0]
		*data = cf_clutch.core.data[0];
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <CAN_Handler_IsClutchCommanded+0x38>)
 800048a:	7b1a      	ldrb	r2, [r3, #12]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000490:	2301      	movs	r3, #1
 8000492:	e000      	b.n	8000496 <CAN_Handler_IsClutchCommanded+0x2a>
	}
	else{
		return 0;
 8000494:	2300      	movs	r3, #0
	}


}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	20000094 	.word	0x20000094
 80004a8:	200000fc 	.word	0x200000fc

080004ac <CAN_Handler_SendGmu1Frame>:

void CAN_Handler_SendGmu1Frame(uint8_t gear, uint8_t clutch, uint16_t gear_pos_adc, uint8_t state, uint8_t air_preas, uint8_t reset_det, uint8_t gear_cut){
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4604      	mov	r4, r0
 80004b4:	4608      	mov	r0, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	461a      	mov	r2, r3
 80004ba:	4623      	mov	r3, r4
 80004bc:	71fb      	strb	r3, [r7, #7]
 80004be:	4603      	mov	r3, r0
 80004c0:	71bb      	strb	r3, [r7, #6]
 80004c2:	460b      	mov	r3, r1
 80004c4:	80bb      	strh	r3, [r7, #4]
 80004c6:	4613      	mov	r3, r2
 80004c8:	70fb      	strb	r3, [r7, #3]

	cf_gmu1.core.data[0] = gear;
 80004ca:	4a12      	ldr	r2, [pc, #72]	; (8000514 <CAN_Handler_SendGmu1Frame+0x68>)
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	7313      	strb	r3, [r2, #12]
	cf_gmu1.core.data[1] = clutch;
 80004d0:	4a10      	ldr	r2, [pc, #64]	; (8000514 <CAN_Handler_SendGmu1Frame+0x68>)
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	7353      	strb	r3, [r2, #13]
	cf_gmu1.core.data[2] = (uint8_t)((gear_pos_adc >> 8) & 0xFF);
 80004d6:	88bb      	ldrh	r3, [r7, #4]
 80004d8:	0a1b      	lsrs	r3, r3, #8
 80004da:	b29b      	uxth	r3, r3
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <CAN_Handler_SendGmu1Frame+0x68>)
 80004e0:	739a      	strb	r2, [r3, #14]
	cf_gmu1.core.data[3] = (uint8_t)(gear_pos_adc & 0xFF);
 80004e2:	88bb      	ldrh	r3, [r7, #4]
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <CAN_Handler_SendGmu1Frame+0x68>)
 80004e8:	73da      	strb	r2, [r3, #15]
	cf_gmu1.core.data[4] = state;
 80004ea:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <CAN_Handler_SendGmu1Frame+0x68>)
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	7413      	strb	r3, [r2, #16]
	cf_gmu1.core.data[5] = air_preas;
 80004f0:	4a08      	ldr	r2, [pc, #32]	; (8000514 <CAN_Handler_SendGmu1Frame+0x68>)
 80004f2:	7e3b      	ldrb	r3, [r7, #24]
 80004f4:	7453      	strb	r3, [r2, #17]
	cf_gmu1.core.data[6] = (uint8_t)((gear_cut)&0xFF);
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <CAN_Handler_SendGmu1Frame+0x68>)
 80004f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80004fc:	7493      	strb	r3, [r2, #18]
	cf_gmu1.core.data[7] = reset_det;
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <CAN_Handler_SendGmu1Frame+0x68>)
 8000500:	7f3b      	ldrb	r3, [r7, #28]
 8000502:	74d3      	strb	r3, [r2, #19]

	CAN_SendFrame(&cf_gmu1);
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <CAN_Handler_SendGmu1Frame+0x68>)
 8000506:	f001 f82f 	bl	8001568 <CAN_SendFrame>
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bd90      	pop	{r4, r7, pc}
 8000512:	bf00      	nop
 8000514:	200000b4 	.word	0x200000b4

08000518 <CAN_Handler_SendGmu2Frame>:

void CAN_Handler_SendGmu2Frame(uint16_t partial_upshift_t, uint16_t partial_downshift_t, uint16_t upshift_t, uint16_t downshift_t){
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4604      	mov	r4, r0
 8000520:	4608      	mov	r0, r1
 8000522:	4611      	mov	r1, r2
 8000524:	461a      	mov	r2, r3
 8000526:	4623      	mov	r3, r4
 8000528:	80fb      	strh	r3, [r7, #6]
 800052a:	4603      	mov	r3, r0
 800052c:	80bb      	strh	r3, [r7, #4]
 800052e:	460b      	mov	r3, r1
 8000530:	807b      	strh	r3, [r7, #2]
 8000532:	4613      	mov	r3, r2
 8000534:	803b      	strh	r3, [r7, #0]

	cf_gmu2.core.data[0] = (uint8_t)((partial_upshift_t >> 8) & 0xFF);
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	b29b      	uxth	r3, r3
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000540:	731a      	strb	r2, [r3, #12]
	cf_gmu2.core.data[1] = (uint8_t)(partial_upshift_t & 0xFF);
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000548:	735a      	strb	r2, [r3, #13]
	cf_gmu2.core.data[2] = (uint8_t)((partial_downshift_t >> 8) & 0xFF);
 800054a:	88bb      	ldrh	r3, [r7, #4]
 800054c:	0a1b      	lsrs	r3, r3, #8
 800054e:	b29b      	uxth	r3, r3
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b10      	ldr	r3, [pc, #64]	; (8000594 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000554:	739a      	strb	r2, [r3, #14]
	cf_gmu2.core.data[3] = (uint8_t)(partial_downshift_t & 0xFF);
 8000556:	88bb      	ldrh	r3, [r7, #4]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <CAN_Handler_SendGmu2Frame+0x7c>)
 800055c:	73da      	strb	r2, [r3, #15]
	cf_gmu2.core.data[4] = (uint8_t)((upshift_t >> 8) & 0xFF);
 800055e:	887b      	ldrh	r3, [r7, #2]
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	b29b      	uxth	r3, r3
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000568:	741a      	strb	r2, [r3, #16]
	cf_gmu2.core.data[5] = (uint8_t)(upshift_t & 0xFF);
 800056a:	887b      	ldrh	r3, [r7, #2]
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000570:	745a      	strb	r2, [r3, #17]
	cf_gmu2.core.data[6] = (uint8_t)((downshift_t >> 8) & 0xFF);
 8000572:	883b      	ldrh	r3, [r7, #0]
 8000574:	0a1b      	lsrs	r3, r3, #8
 8000576:	b29b      	uxth	r3, r3
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <CAN_Handler_SendGmu2Frame+0x7c>)
 800057c:	749a      	strb	r2, [r3, #18]
	cf_gmu2.core.data[7] = (uint8_t)(downshift_t & 0xFF);
 800057e:	883b      	ldrh	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000584:	74da      	strb	r2, [r3, #19]

	CAN_SendFrame(&cf_gmu2);
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000588:	f000 ffee 	bl	8001568 <CAN_SendFrame>
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bd90      	pop	{r4, r7, pc}
 8000594:	200000d4 	.word	0x200000d4

08000598 <gearboxInit>:
#include "main.h"

static bool getTimeout(uint32_t dupa, uint32_t anus);

void gearboxInit(Gearbox_t* gearbox)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	gearbox->neutral_adc = 100;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2264      	movs	r2, #100	; 0x64
 80005a4:	805a      	strh	r2, [r3, #2]
	gearbox->gear1_adc = 1500;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80005ac:	809a      	strh	r2, [r3, #4]
	gearbox->gear2_adc = 1800;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80005b4:	80da      	strh	r2, [r3, #6]
	gearbox->gear3_adc = 2200;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f640 0298 	movw	r2, #2200	; 0x898
 80005bc:	811a      	strh	r2, [r3, #8]
	gearbox->gear4_adc = 2800;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80005c4:	815a      	strh	r2, [r3, #10]

	gearbox->_state = Idle;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	731a      	strb	r2, [r3, #12]

	gearbox->shift_start_tick = 0;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
	gearbox->timestamp_tick = 0;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
	gearbox->start_gear_sens = 0;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	831a      	strh	r2, [r3, #24]
	gearbox->start_gear = 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	769a      	strb	r2, [r3, #26]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <updateGear>:
{
	gearbox->gearPosADC = ADCValue;
}

void updateGear(Gearbox_t* gearbox)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if((gearbox->gearPosADC>=(gearbox->neutral_adc-150))&&(gearbox->gearPosADC<=(gearbox->neutral_adc+150)))
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	885b      	ldrh	r3, [r3, #2]
 8000602:	3b96      	subs	r3, #150	; 0x96
 8000604:	429a      	cmp	r2, r3
 8000606:	db0a      	blt.n	800061e <updateGear+0x2e>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	885b      	ldrh	r3, [r3, #2]
 8000612:	3396      	adds	r3, #150	; 0x96
 8000614:	429a      	cmp	r2, r3
 8000616:	dc02      	bgt.n	800061e <updateGear+0x2e>
	{
		gearbox->actual_gear = 0;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	735a      	strb	r2, [r3, #13]
	}
	if((gearbox->gearPosADC>=(gearbox->gear1_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear1_adc+150)))
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	889b      	ldrh	r3, [r3, #4]
 8000628:	3b96      	subs	r3, #150	; 0x96
 800062a:	429a      	cmp	r2, r3
 800062c:	db0a      	blt.n	8000644 <updateGear+0x54>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	889b      	ldrh	r3, [r3, #4]
 8000638:	3396      	adds	r3, #150	; 0x96
 800063a:	429a      	cmp	r2, r3
 800063c:	dc02      	bgt.n	8000644 <updateGear+0x54>
	{
		gearbox->actual_gear = 1;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	735a      	strb	r2, [r3, #13]
	}
	if((gearbox->gearPosADC>=(gearbox->gear2_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear2_adc+150)))
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	88db      	ldrh	r3, [r3, #6]
 800064e:	3b96      	subs	r3, #150	; 0x96
 8000650:	429a      	cmp	r2, r3
 8000652:	db0a      	blt.n	800066a <updateGear+0x7a>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	88db      	ldrh	r3, [r3, #6]
 800065e:	3396      	adds	r3, #150	; 0x96
 8000660:	429a      	cmp	r2, r3
 8000662:	dc02      	bgt.n	800066a <updateGear+0x7a>
	{
		gearbox->actual_gear = 2;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2202      	movs	r2, #2
 8000668:	735a      	strb	r2, [r3, #13]
	}
	if((gearbox->gearPosADC>=(gearbox->gear3_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear3_adc+150)))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	891b      	ldrh	r3, [r3, #8]
 8000674:	3b96      	subs	r3, #150	; 0x96
 8000676:	429a      	cmp	r2, r3
 8000678:	db0a      	blt.n	8000690 <updateGear+0xa0>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	891b      	ldrh	r3, [r3, #8]
 8000684:	3396      	adds	r3, #150	; 0x96
 8000686:	429a      	cmp	r2, r3
 8000688:	dc02      	bgt.n	8000690 <updateGear+0xa0>
		{
			gearbox->actual_gear = 3;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2203      	movs	r2, #3
 800068e:	735a      	strb	r2, [r3, #13]
		}
	if((gearbox->gearPosADC>=(gearbox->gear4_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear4_adc+150)))
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	895b      	ldrh	r3, [r3, #10]
 800069a:	3b96      	subs	r3, #150	; 0x96
 800069c:	429a      	cmp	r2, r3
 800069e:	db0a      	blt.n	80006b6 <updateGear+0xc6>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	895b      	ldrh	r3, [r3, #10]
 80006aa:	3396      	adds	r3, #150	; 0x96
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dc02      	bgt.n	80006b6 <updateGear+0xc6>
		{
			gearbox->actual_gear = 4;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2204      	movs	r2, #4
 80006b4:	735a      	strb	r2, [r3, #13]
		}
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <processCallback>:
{
	return gearbox->gear_cut;
}

void processCallback(Gearbox_t* gearbox)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	switch(gearbox->_state)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7b1b      	ldrb	r3, [r3, #12]
 80006d0:	2b0c      	cmp	r3, #12
 80006d2:	d84d      	bhi.n	8000770 <processCallback+0xac>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <processCallback+0x18>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	08000779 	.word	0x08000779
 80006e0:	08000711 	.word	0x08000711
 80006e4:	08000719 	.word	0x08000719
 80006e8:	08000721 	.word	0x08000721
 80006ec:	08000729 	.word	0x08000729
 80006f0:	08000731 	.word	0x08000731
 80006f4:	08000739 	.word	0x08000739
 80006f8:	08000741 	.word	0x08000741
 80006fc:	08000749 	.word	0x08000749
 8000700:	08000751 	.word	0x08000751
 8000704:	08000759 	.word	0x08000759
 8000708:	08000761 	.word	0x08000761
 800070c:	08000769 	.word	0x08000769
	{
		case Idle:
		break;

		case StartUpshift:
			startUpshiftCallback(gearbox);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 f837 	bl	8000784 <startUpshiftCallback>
		break;
 8000716:	e030      	b.n	800077a <processCallback+0xb6>

		case UpshiftFromNeutral:
			upshiftFromNeutral(gearbox);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f876 	bl	800080a <upshiftFromNeutral>
		break;
 800071e:	e02c      	b.n	800077a <processCallback+0xb6>

		case UpshiftGearCut:
			upshiftGearCut(gearbox);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f891 	bl	8000848 <upshiftGearCut>
		break;
 8000726:	e028      	b.n	800077a <processCallback+0xb6>

		case UpshiftFinish:
			upshiftFinish(gearbox);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 f8af 	bl	800088c <upshiftFinish>
		break;
 800072e:	e024      	b.n	800077a <processCallback+0xb6>

		case StartDownshift:
			startDownshiftCallback(gearbox);
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 f8df 	bl	80008f4 <startDownshiftCallback>
		break;
 8000736:	e020      	b.n	800077a <processCallback+0xb6>

		case DownshiftToNeutral:
			downshiftToNeutral(gearbox);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f91f 	bl	800097c <downshiftToNeutral>
		break;
 800073e:	e01c      	b.n	800077a <processCallback+0xb6>

		case DownshiftRevMatch:
			downshiftRevMatch(gearbox);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 f93d 	bl	80009c0 <downshiftRevMatch>
		break;
 8000746:	e018      	b.n	800077a <processCallback+0xb6>

		case DownshiftFinish:
			downshiftFinish(gearbox);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f95d 	bl	8000a08 <downshiftFinish>
		break;
 800074e:	e014      	b.n	800077a <processCallback+0xb6>

		case OL_US_GearCut:
			openLoop_upshift_gearCut(gearbox);
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f98d 	bl	8000a70 <openLoop_upshift_gearCut>
		break;
 8000756:	e010      	b.n	800077a <processCallback+0xb6>

		case OL_US_Finish:
			openLoop_upshift_finish(gearbox);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f9ab 	bl	8000ab4 <openLoop_upshift_finish>
		break;
 800075e:	e00c      	b.n	800077a <processCallback+0xb6>

		case OL_DS_Clutch:
			openLoop_downshift_clutch(gearbox);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f9d3 	bl	8000b0c <openLoop_downshift_clutch>
		break;
 8000766:	e008      	b.n	800077a <processCallback+0xb6>

		case OL_DS_Finish:
			openLoop_downshift_finish(gearbox);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f9f3 	bl	8000b54 <openLoop_downshift_finish>
		break;
 800076e:	e004      	b.n	800077a <processCallback+0xb6>

		default:
			gearbox->_state = Idle;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	731a      	strb	r2, [r3, #12]
		break;
 8000776:	e000      	b.n	800077a <processCallback+0xb6>
		break;
 8000778:	bf00      	nop

	}
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop

08000784 <startUpshiftCallback>:

void startUpshiftCallback(Gearbox_t* gearbox)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	gearbox->start_gear = gearbox->actual_gear;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7b5a      	ldrb	r2, [r3, #13]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	769a      	strb	r2, [r3, #26]
	gearbox->shift_start_tick = HAL_GetTick();
 8000794:	f001 f8ce 	bl	8001934 <HAL_GetTick>
 8000798:	4602      	mov	r2, r0
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	611a      	str	r2, [r3, #16]
	if(gearbox->start_gear > 5)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7e9b      	ldrb	r3, [r3, #26]
 80007a2:	2b05      	cmp	r3, #5
 80007a4:	d90f      	bls.n	80007c6 <startUpshiftCallback+0x42>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f003 fc60 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80007b4:	f001 f8be 	bl	8001934 <HAL_GetTick>
 80007b8:	4602      	mov	r2, r0
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_US_GearCut;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2209      	movs	r2, #9
 80007c2:	731a      	strb	r2, [r3, #12]
		return;
 80007c4:	e01e      	b.n	8000804 <startUpshiftCallback+0x80>
	}
	if(gearbox->start_gear == 4)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7e9b      	ldrb	r3, [r3, #26]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d103      	bne.n	80007d6 <startUpshiftCallback+0x52>
	{
		gearbox->_state = Idle;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	731a      	strb	r2, [r3, #12]
		return;
 80007d4:	e016      	b.n	8000804 <startUpshiftCallback+0x80>
	}
	HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f003 fc48 	bl	8004074 <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 80007e4:	f001 f8a6 	bl	8001934 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	615a      	str	r2, [r3, #20]

	if(gearbox->start_gear == 0)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7e9b      	ldrb	r3, [r3, #26]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d103      	bne.n	80007fe <startUpshiftCallback+0x7a>
	{
		gearbox->_state = UpshiftFromNeutral;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2202      	movs	r2, #2
 80007fa:	731a      	strb	r2, [r3, #12]
 80007fc:	e002      	b.n	8000804 <startUpshiftCallback+0x80>
	}
	else
	{
		gearbox->_state = UpshiftGearCut;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2203      	movs	r2, #3
 8000802:	731a      	strb	r2, [r3, #12]
	}
}
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <upshiftFromNeutral>:
void upshiftFromNeutral(Gearbox_t* gearbox)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == 1) || (getTimeout(gearbox->timestamp_tick,US_FINISH_TIMEOUT)))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	7b5b      	ldrb	r3, [r3, #13]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d008      	beq.n	800082c <upshiftFromNeutral+0x22>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	21c8      	movs	r1, #200	; 0xc8
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f9f7 	bl	8000c14 <getTimeout>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d009      	beq.n	8000840 <upshiftFromNeutral+0x36>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f003 fc1d 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->_state = Idle;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	731a      	strb	r2, [r3, #12]
	}
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <upshiftGearCut>:

void upshiftGearCut(Gearbox_t* gearbox)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, US_ACTUATOR_DELAY))
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	2114      	movs	r1, #20
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f9dc 	bl	8000c14 <getTimeout>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d010      	beq.n	8000884 <upshiftGearCut+0x3c>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2110      	movs	r1, #16
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f003 fc03 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	22ff      	movs	r2, #255	; 0xff
 8000872:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000874:	f001 f85e 	bl	8001934 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	615a      	str	r2, [r3, #20]
		gearbox->_state = UpshiftFinish;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2204      	movs	r2, #4
 8000882:	731a      	strb	r2, [r3, #12]
	}
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <upshiftFinish>:

void upshiftFinish(Gearbox_t* gearbox)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear+1)||(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT)))
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7b5b      	ldrb	r3, [r3, #13]
 8000898:	461a      	mov	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7e9b      	ldrb	r3, [r3, #26]
 800089e:	3301      	adds	r3, #1
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d008      	beq.n	80008b6 <upshiftFinish+0x2a>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	21c8      	movs	r1, #200	; 0xc8
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f9b2 	bl	8000c14 <getTimeout>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d019      	beq.n	80008ea <upshiftFinish+0x5e>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2110      	movs	r1, #16
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f003 fbd9 	bl	8004074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f003 fbd2 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	227f      	movs	r2, #127	; 0x7f
 80008d4:	76da      	strb	r2, [r3, #27]
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	691b      	ldr	r3, [r3, #16]
 80008de:	1ad2      	subs	r2, r2, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	61da      	str	r2, [r3, #28]
		gearbox->_state = Idle;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	731a      	strb	r2, [r3, #12]
	}
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <startDownshiftCallback>:

void startDownshiftCallback(Gearbox_t* gearbox)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	gearbox->shift_start_tick = HAL_GetTick();
 80008fc:	f001 f81a 	bl	8001934 <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	611a      	str	r2, [r3, #16]
	gearbox->start_gear = gearbox->actual_gear;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7b5a      	ldrb	r2, [r3, #13]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	769a      	strb	r2, [r3, #26]
	//pobranie wartosci z adc

	if(gearbox->start_gear > 4)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7e9b      	ldrb	r3, [r3, #26]
 8000912:	2b04      	cmp	r3, #4
 8000914:	d90e      	bls.n	8000934 <startDownshiftCallback+0x40>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091c:	4816      	ldr	r0, [pc, #88]	; (8000978 <startDownshiftCallback+0x84>)
 800091e:	f003 fba9 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000922:	f001 f807 	bl	8001934 <HAL_GetTick>
 8000926:	4602      	mov	r2, r0
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_DS_Clutch;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	220b      	movs	r2, #11
 8000930:	731a      	strb	r2, [r3, #12]
		return;
 8000932:	e01d      	b.n	8000970 <startDownshiftCallback+0x7c>
	}
	else if(gearbox->start_gear == 0)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7e9b      	ldrb	r3, [r3, #26]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d103      	bne.n	8000944 <startDownshiftCallback+0x50>
	{
		gearbox->_state = Idle;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	731a      	strb	r2, [r3, #12]
		return;
 8000942:	e015      	b.n	8000970 <startDownshiftCallback+0x7c>
	}

	HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <startDownshiftCallback+0x84>)
 800094c:	f003 fb92 	bl	8004074 <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 8000950:	f000 fff0 	bl	8001934 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	615a      	str	r2, [r3, #20]

	if(gearbox->start_gear == 1)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7e9b      	ldrb	r3, [r3, #26]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d103      	bne.n	800096a <startDownshiftCallback+0x76>
	{
		gearbox->_state = DownshiftToNeutral;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2206      	movs	r2, #6
 8000966:	731a      	strb	r2, [r3, #12]
 8000968:	e002      	b.n	8000970 <startDownshiftCallback+0x7c>
	}
	else
	{
		gearbox->_state = DownshiftRevMatch;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2207      	movs	r2, #7
 800096e:	731a      	strb	r2, [r3, #12]
	}
}
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	48000400 	.word	0x48000400

0800097c <downshiftToNeutral>:

void downshiftToNeutral(Gearbox_t* gearbox)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	2128      	movs	r1, #40	; 0x28
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f942 	bl	8000c14 <getTimeout>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00d      	beq.n	80009b2 <downshiftToNeutral+0x36>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <downshiftToNeutral+0x40>)
 800099e:	f003 fb69 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80009a2:	f000 ffc7 	bl	8001934 <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	615a      	str	r2, [r3, #20]
		gearbox->_state = DownshiftFinish;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2208      	movs	r2, #8
 80009b0:	731a      	strb	r2, [r3, #12]
	}
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	48000400 	.word	0x48000400

080009c0 <downshiftRevMatch>:

void downshiftRevMatch(Gearbox_t* gearbox)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	2128      	movs	r1, #40	; 0x28
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f920 	bl	8000c14 <getTimeout>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d010      	beq.n	80009fc <downshiftRevMatch+0x3c>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <downshiftRevMatch+0x44>)
 80009e2:	f003 fb47 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80009e6:	f000 ffa5 	bl	8001934 <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	615a      	str	r2, [r3, #20]
		gearbox->gear_cut = 0;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	76da      	strb	r2, [r3, #27]
		gearbox->_state = DownshiftFinish;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2208      	movs	r2, #8
 80009fa:	731a      	strb	r2, [r3, #12]
	}
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	48000400 	.word	0x48000400

08000a08 <downshiftFinish>:

void downshiftFinish(Gearbox_t* gearbox)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear -1 )|| (getTimeout(gearbox->timestamp_tick, DS_FINISH_TIMEOUT)))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7b5b      	ldrb	r3, [r3, #13]
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7e9b      	ldrb	r3, [r3, #26]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d008      	beq.n	8000a32 <downshiftFinish+0x2a>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	21fa      	movs	r1, #250	; 0xfa
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f8f4 	bl	8000c14 <getTimeout>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d018      	beq.n	8000a64 <downshiftFinish+0x5c>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <downshiftFinish+0x64>)
 8000a3a:	f003 fb1b 	bl	8004074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <downshiftFinish+0x64>)
 8000a46:	f003 fb15 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	227f      	movs	r2, #127	; 0x7f
 8000a4e:	76da      	strb	r2, [r3, #27]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	691b      	ldr	r3, [r3, #16]
 8000a58:	1ad2      	subs	r2, r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	621a      	str	r2, [r3, #32]
		gearbox->_state = Idle;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	731a      	strb	r2, [r3, #12]
	}
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	48000400 	.word	0x48000400

08000a70 <openLoop_upshift_gearCut>:

void openLoop_upshift_gearCut(Gearbox_t* gearbox)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_US_GEARCUT_DEALAY))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	2164      	movs	r1, #100	; 0x64
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f8c8 	bl	8000c14 <getTimeout>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d010      	beq.n	8000aac <openLoop_upshift_gearCut+0x3c>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f003 faef 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000a9c:	f000 ff4a 	bl	8001934 <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_US_Finish;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	220a      	movs	r2, #10
 8000aaa:	731a      	strb	r2, [r3, #12]
	}
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <openLoop_upshift_finish>:

void openLoop_upshift_finish(Gearbox_t* gearbox)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	21c8      	movs	r1, #200	; 0xc8
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f8a6 	bl	8000c14 <getTimeout>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d019      	beq.n	8000b02 <openLoop_upshift_finish+0x4e>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f003 facd 	bl	8004074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f003 fac6 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	227f      	movs	r2, #127	; 0x7f
 8000aec:	76da      	strb	r2, [r3, #27]
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	695a      	ldr	r2, [r3, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	1ad2      	subs	r2, r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	61da      	str	r2, [r3, #28]
		gearbox->_state = Idle;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	731a      	strb	r2, [r3, #12]
	}
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <openLoop_downshift_clutch>:

void openLoop_downshift_clutch(Gearbox_t* gearbox)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	2128      	movs	r1, #40	; 0x28
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f87a 	bl	8000c14 <getTimeout>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d010      	beq.n	8000b48 <openLoop_downshift_clutch+0x3c>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <openLoop_downshift_clutch+0x44>)
 8000b2e:	f003 faa1 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000b32:	f000 feff 	bl	8001934 <HAL_GetTick>
 8000b36:	4602      	mov	r2, r0
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	615a      	str	r2, [r3, #20]
		gearbox->gear_cut = 0;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	76da      	strb	r2, [r3, #27]
		gearbox->_state = OL_DS_Finish;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	220c      	movs	r2, #12
 8000b46:	731a      	strb	r2, [r3, #12]
	}
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	48000400 	.word	0x48000400

08000b54 <openLoop_downshift_finish>:

void openLoop_downshift_finish(Gearbox_t* gearbox)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_DS_CLUTCH_DELAY))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	2164      	movs	r1, #100	; 0x64
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f856 	bl	8000c14 <getTimeout>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d018      	beq.n	8000ba0 <openLoop_downshift_finish+0x4c>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <openLoop_downshift_finish+0x54>)
 8000b76:	f003 fa7d 	bl	8004074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <openLoop_downshift_finish+0x54>)
 8000b82:	f003 fa77 	bl	8004074 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	227f      	movs	r2, #127	; 0x7f
 8000b8a:	76da      	strb	r2, [r3, #27]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	1ad2      	subs	r2, r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	621a      	str	r2, [r3, #32]
		gearbox->_state = Idle;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	731a      	strb	r2, [r3, #12]
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	48000400 	.word	0x48000400

08000bac <startUpshift>:

void startUpshift(Gearbox_t* gearbox)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7b1b      	ldrb	r3, [r3, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <startUpshift+0x16>
		gearbox->_state = StartUpshift;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	731a      	strb	r2, [r3, #12]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <startDownshift>:
void startDownshift(Gearbox_t* gearbox)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	7b1b      	ldrb	r3, [r3, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <startDownshift+0x16>
		gearbox->_state = StartDownshift;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2205      	movs	r2, #5
 8000be2:	731a      	strb	r2, [r3, #12]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <clutch>:

void clutch(bool ON)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <clutch+0x20>)
 8000c04:	f003 fa36 	bl	8004074 <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	48000400 	.word	0x48000400

08000c14 <getTimeout>:
{
	return gearbox->_state;
}

static bool getTimeout(uint32_t dupa, uint32_t anus)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	if((HAL_GetTick() - dupa) > anus)
 8000c1e:	f000 fe89 	bl	8001934 <HAL_GetTick>
 8000c22:	4602      	mov	r2, r0
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d201      	bcs.n	8000c32 <getTimeout+0x1e>
	{
		return true;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <getTimeout+0x20>
	}
	else
		return false;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c66:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c72:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c78:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c86:	4b24      	ldr	r3, [pc, #144]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb8:	4817      	ldr	r0, [pc, #92]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000cba:	f000 fe5b 	bl	8001974 <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000cc4:	f000 f9d8 	bl	8001078 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4811      	ldr	r0, [pc, #68]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000cd4:	f001 ffe6 	bl	8002ca4 <HAL_ADCEx_MultiModeConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cde:	f000 f9cb 	bl	8001078 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <MX_ADC1_Init+0xdc>)
 8000d00:	f001 fce6 	bl	80026d0 <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d0a:	f000 f9b5 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000100 	.word	0x20000100

08000d1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d2c:	d113      	bne.n	8000d56 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_ADC_MspInit+0x44>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_ADC_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6153      	str	r3, [r2, #20]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_ADC_MspInit+0x44>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2012      	movs	r0, #18
 8000d4c:	f002 ffc9 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d50:	2012      	movs	r0, #18
 8000d52:	f002 ffe2 	bl	8003d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000d6a:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <MX_CAN_Init+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000d70:	2204      	movs	r2, #4
 8000d72:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000d82:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000d86:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000d8a:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000d8e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_CAN_Init+0x64>)
 8000db6:	f002 f931 	bl	800301c <HAL_CAN_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000dc0:	f000 f95a 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000150 	.word	0x20000150
 8000dcc:	40006400 	.word	0x40006400

08000dd0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a28      	ldr	r2, [pc, #160]	; (8000e90 <HAL_CAN_MspInit+0xc0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d149      	bne.n	8000e86 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_CAN_MspInit+0xc4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <HAL_CAN_MspInit+0xc4>)
 8000df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <HAL_CAN_MspInit+0xc4>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <HAL_CAN_MspInit+0xc4>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <HAL_CAN_MspInit+0xc4>)
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_CAN_MspInit+0xc4>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000e34:	2309      	movs	r3, #9
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f002 ff85 	bl	8003d50 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2013      	movs	r0, #19
 8000e4c:	f002 ff49 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000e50:	2013      	movs	r0, #19
 8000e52:	f002 ff62 	bl	8003d1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2014      	movs	r0, #20
 8000e5c:	f002 ff41 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000e60:	2014      	movs	r0, #20
 8000e62:	f002 ff5a 	bl	8003d1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2015      	movs	r0, #21
 8000e6c:	f002 ff39 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000e70:	2015      	movs	r0, #21
 8000e72:	f002 ff52 	bl	8003d1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2016      	movs	r0, #22
 8000e7c:	f002 ff31 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000e80:	2016      	movs	r0, #22
 8000e82:	f002 ff4a 	bl	8003d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40006400 	.word	0x40006400
 8000e94:	40021000 	.word	0x40021000

08000e98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eae:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <MX_GPIO_Init+0xf8>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	4a37      	ldr	r2, [pc, #220]	; (8000f90 <MX_GPIO_Init+0xf8>)
 8000eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb8:	6153      	str	r3, [r2, #20]
 8000eba:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <MX_GPIO_Init+0xf8>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <MX_GPIO_Init+0xf8>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a31      	ldr	r2, [pc, #196]	; (8000f90 <MX_GPIO_Init+0xf8>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <MX_GPIO_Init+0xf8>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <MX_GPIO_Init+0xf8>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a2b      	ldr	r2, [pc, #172]	; (8000f90 <MX_GPIO_Init+0xf8>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b29      	ldr	r3, [pc, #164]	; (8000f90 <MX_GPIO_Init+0xf8>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEAR_CUT_Pin|GEAR_UP_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f003 f8b8 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLUTCH_Pin|GEAR_DOWN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8000f0a:	4822      	ldr	r0, [pc, #136]	; (8000f94 <MX_GPIO_Init+0xfc>)
 8000f0c:	f003 f8b2 	bl	8004074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_CUT_Pin;
 8000f10:	2310      	movs	r3, #16
 8000f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_CUT_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f002 ff11 	bl	8003d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CLUTCH_Pin|GEAR_DOWN_Pin;
 8000f2e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <MX_GPIO_Init+0xfc>)
 8000f48:	f002 ff02 	bl	8003d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_UP_Pin;
 8000f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_UP_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4619      	mov	r1, r3
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f002 fef2 	bl	8003d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_GPIO_Init+0xfc>)
 8000f84:	f002 fee4 	bl	8003d50 <HAL_GPIO_Init>

}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48000400 	.word	0x48000400

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f000 fc70 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f80f 	bl	8000fc2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f7ff ff78 	bl	8000e98 <MX_GPIO_Init>
  MX_CAN_Init();
 8000fa8:	f7ff fedc 	bl	8000d64 <MX_CAN_Init>
  MX_OPAMP1_Init();
 8000fac:	f000 f86a 	bl	8001084 <MX_OPAMP1_Init>
  MX_ADC1_Init();
 8000fb0:	f7ff fe44 	bl	8000c3c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fb4:	f000 f948 	bl	8001248 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 8000fb8:	f7ff f93a 	bl	8000230 <AppInit>
  AppProcess();
 8000fbc:	f7ff f9ae 	bl	800031c <AppProcess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <main+0x28>

08000fc2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b09e      	sub	sp, #120	; 0x78
 8000fc6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fcc:	2228      	movs	r2, #40	; 0x28
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 fff7 	bl	8005fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	223c      	movs	r2, #60	; 0x3c
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f004 ffe9 	bl	8005fc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ff6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ffa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800100e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001012:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001018:	4618      	mov	r0, r3
 800101a:	f003 f933 	bl	8004284 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001024:	f000 f828 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001038:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001042:	2102      	movs	r1, #2
 8001044:	4618      	mov	r0, r3
 8001046:	f004 f95b 	bl	8005300 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001050:	f000 f812 	bl	8001078 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fb35 	bl	80056d0 <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800106c:	f000 f804 	bl	8001078 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3778      	adds	r7, #120	; 0x78
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_OPAMP1_Init+0x38>)
 800108a:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <MX_OPAMP1_Init+0x3c>)
 800108c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_OPAMP1_Init+0x38>)
 8001090:	2260      	movs	r2, #96	; 0x60
 8001092:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_OPAMP1_Init+0x38>)
 8001096:	220c      	movs	r2, #12
 8001098:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_OPAMP1_Init+0x38>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_OPAMP1_Init+0x38>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_OPAMP1_Init+0x38>)
 80010a8:	f003 f816 	bl	80040d8 <HAL_OPAMP_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 80010b2:	f7ff ffe1 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000178 	.word	0x20000178
 80010c0:	40010038 	.word	0x40010038

080010c4 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_OPAMP_MspInit+0x5c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d118      	bne.n	8001118 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_OPAMP_MspInit+0x60>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_OPAMP_MspInit+0x60>)
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_OPAMP_MspInit+0x60>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GEAR_POS_Pin|GPIO_PIN_2;
 80010fe:	2306      	movs	r3, #6
 8001100:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001102:	2303      	movs	r3, #3
 8001104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f002 fe1c 	bl	8003d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40010038 	.word	0x40010038
 8001124:	40021000 	.word	0x40021000

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x44>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_MspInit+0x44>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_MspInit+0x44>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x44>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x44>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x44>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40021000 	.word	0x40021000

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011bc:	f000 fba6 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <ADC1_2_IRQHandler+0x10>)
 80011ca:	f000 ff01 	bl	8001fd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000100 	.word	0x20000100

080011d8 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80011de:	f002 fa6e 	bl	80036be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000150 	.word	0x20000150

080011ec <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80011f2:	f002 fa64 	bl	80036be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000150 	.word	0x20000150

08001200 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <CAN_RX1_IRQHandler+0x10>)
 8001206:	f002 fa5a 	bl	80036be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000150 	.word	0x20000150

08001214 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END CAN_SCE_IRQn 0 */
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_TIM2_Init+0x98>)
 8001268:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800126c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_TIM2_Init+0x98>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_TIM2_Init+0x98>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_TIM2_Init+0x98>)
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_TIM2_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_TIM2_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800128e:	4814      	ldr	r0, [pc, #80]	; (80012e0 <MX_TIM2_Init+0x98>)
 8001290:	f004 fbce 	bl	8005a30 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800129a:	f7ff feed 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_TIM2_Init+0x98>)
 80012ac:	f004 fc17 	bl	8005ade <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012b6:	f7ff fedf 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_TIM2_Init+0x98>)
 80012c8:	f004 fdfc 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012d2:	f7ff fed1 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200001ac 	.word	0x200001ac

080012e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f4:	d10b      	bne.n	800130e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_TIM_Base_MspInit+0x38>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a08      	ldr	r2, [pc, #32]	; (800131c <HAL_TIM_Base_MspInit+0x38>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_TIM_Base_MspInit+0x38>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800130e:	bf00      	nop
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001324:	f7ff ff7e 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <LoopForever+0x6>)
  ldr r1, =_edata
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <LoopForever+0xe>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001340:	4c0a      	ldr	r4, [pc, #40]	; (800136c <LoopForever+0x16>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134e:	f004 fe41 	bl	8005fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001352:	f7ff fe21 	bl	8000f98 <main>

08001356 <LoopForever>:

LoopForever:
    b LoopForever
 8001356:	e7fe      	b.n	8001356 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001358:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001364:	08006088 	.word	0x08006088
  ldr r2, =_sbss
 8001368:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800136c:	20000450 	.word	0x20000450

08001370 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC3_IRQHandler>
	...

08001374 <CAN_FIFO_Add>:

#include "CAN_FIFO.h"



void CAN_FIFO_Add(struct CAN_FIFO *fifo, uint8_t *data_ptr){
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]

	if(fifo->empty){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00b      	beq.n	80013a0 <CAN_FIFO_Add+0x2c>
		fifo->data_ptr[fifo->last_element]=data_ptr;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	785b      	ldrb	r3, [r3, #1]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	605a      	str	r2, [r3, #4]
		fifo->empty=0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return;
 800139e:	e02c      	b.n	80013fa <CAN_FIFO_Add+0x86>
	}
	fifo->last_element=(fifo->last_element+1)%CAN_FIFO_SIZE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	3301      	adds	r3, #1
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <CAN_FIFO_Add+0x90>)
 80013a8:	fb82 1203 	smull	r1, r2, r2, r3
 80013ac:	1151      	asrs	r1, r2, #5
 80013ae:	17da      	asrs	r2, r3, #31
 80013b0:	1a8a      	subs	r2, r1, r2
 80013b2:	2164      	movs	r1, #100	; 0x64
 80013b4:	fb01 f202 	mul.w	r2, r1, r2
 80013b8:	1a9a      	subs	r2, r3, r2
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	705a      	strb	r2, [r3, #1]
	if(fifo->last_element==fifo->first_element){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	785a      	ldrb	r2, [r3, #1]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d10f      	bne.n	80013ec <CAN_FIFO_Add+0x78>
		fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <CAN_FIFO_Add+0x90>)
 80013d4:	fb82 1203 	smull	r1, r2, r2, r3
 80013d8:	1151      	asrs	r1, r2, #5
 80013da:	17da      	asrs	r2, r3, #31
 80013dc:	1a8a      	subs	r2, r1, r2
 80013de:	2164      	movs	r1, #100	; 0x64
 80013e0:	fb01 f202 	mul.w	r2, r1, r2
 80013e4:	1a9a      	subs	r2, r3, r2
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	701a      	strb	r2, [r3, #0]
	}
	fifo->data_ptr[fifo->last_element]=data_ptr;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	605a      	str	r2, [r3, #4]


}
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	51eb851f 	.word	0x51eb851f

08001408 <CAN_FIFO_Get>:

/* return 0 if FIFO is empty */
uint8_t* CAN_FIFO_Get(struct CAN_FIFO *fifo){
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

	uint8_t *temp;
	if(fifo->empty){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <CAN_FIFO_Get+0x16>
		return 0;
 800141a:	2300      	movs	r3, #0
 800141c:	e023      	b.n	8001466 <CAN_FIFO_Get+0x5e>
	}
	temp=fifo->data_ptr[fifo->first_element];
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]
	if(fifo->first_element==fifo->last_element){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	785b      	ldrb	r3, [r3, #1]
 8001434:	429a      	cmp	r2, r3
 8001436:	d105      	bne.n	8001444 <CAN_FIFO_Get+0x3c>
		fifo->empty=1;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return temp;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	e010      	b.n	8001466 <CAN_FIFO_Get+0x5e>
	}
	fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <CAN_FIFO_Get+0x6c>)
 800144c:	fb82 1203 	smull	r1, r2, r2, r3
 8001450:	1151      	asrs	r1, r2, #5
 8001452:	17da      	asrs	r2, r3, #31
 8001454:	1a8a      	subs	r2, r1, r2
 8001456:	2164      	movs	r1, #100	; 0x64
 8001458:	fb01 f202 	mul.w	r2, r1, r2
 800145c:	1a9a      	subs	r2, r3, r2
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	701a      	strb	r2, [r3, #0]
	return temp;
 8001464:	68fb      	ldr	r3, [r7, #12]

}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	51eb851f 	.word	0x51eb851f

08001478 <CAN_FIFO_Flush>:
uint8_t CAN_FIFO_Empty(struct CAN_FIFO *fifo){

	return fifo->empty;
}

void CAN_FIFO_Flush(struct CAN_FIFO *fifo){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

	fifo->first_element=0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
	fifo->last_element=0;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	705a      	strb	r2, [r3, #1]
	fifo->empty=1;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <CAN_Init>:
	struct can_frame* pFrames[CAN_MAX_FRAME_NUM];
	uint8_t values_num;
}_can_info;


void CAN_Init(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	CAN_HW_Init();
 80014a4:	f000 f8c6 	bl	8001634 <CAN_HW_Init>
	CAN_FIFO_Flush(&FIFO_CAN_TX);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <CAN_Init+0x14>)
 80014aa:	f7ff ffe5 	bl	8001478 <CAN_FIFO_Flush>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200001fc 	.word	0x200001fc

080014b8 <CAN_InitFrame>:

void CAN_InitFrame(struct can_frame* pFrame, uint16_t id, uint16_t period, uint8_t dlc) {
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	4608      	mov	r0, r1
 80014c2:	4611      	mov	r1, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	817b      	strh	r3, [r7, #10]
 80014ca:	460b      	mov	r3, r1
 80014cc:	813b      	strh	r3, [r7, #8]
 80014ce:	4613      	mov	r3, r2
 80014d0:	71fb      	strb	r3, [r7, #7]
	
	pFrame->core.id = id;
 80014d2:	897a      	ldrh	r2, [r7, #10]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	605a      	str	r2, [r3, #4]
	pFrame->period = period;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	893a      	ldrh	r2, [r7, #8]
 80014dc:	829a      	strh	r2, [r3, #20]
	pFrame->core.dlc = dlc;
 80014de:	79fa      	ldrb	r2, [r7, #7]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	609a      	str	r2, [r3, #8]
	_can_info.pFrames[_can_info.frames_num] = pFrame;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <CAN_InitFrame+0x54>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4a08      	ldr	r2, [pc, #32]	; (800150c <CAN_InitFrame+0x54>)
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	605a      	str	r2, [r3, #4]
	_can_info.frames_num++;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <CAN_InitFrame+0x54>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <CAN_InitFrame+0x54>)
 80014fc:	701a      	strb	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000394 	.word	0x20000394

08001510 <FilterFrame>:
	_can_info.values_num++;
}

/* returns index of frame in _can_info or
   returns 255 if didn't found matching frame*/
uint8_t FilterFrame(uint16_t id){
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
	
	uint8_t i;
	for(i = 0; i < _can_info.frames_num; i++){
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e00d      	b.n	800153c <FilterFrame+0x2c>
		if(_can_info.pFrames[i]->core.id == id){
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	4a0c      	ldr	r2, [pc, #48]	; (8001554 <FilterFrame+0x44>)
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	429a      	cmp	r2, r3
 8001530:	d101      	bne.n	8001536 <FilterFrame+0x26>
			return i;
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	e008      	b.n	8001548 <FilterFrame+0x38>
	for(i = 0; i < _can_info.frames_num; i++){
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3301      	adds	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <FilterFrame+0x44>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3ec      	bcc.n	8001520 <FilterFrame+0x10>
		}
	}
	return 255;
 8001546:	23ff      	movs	r3, #255	; 0xff
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	20000394 	.word	0x20000394

08001558 <CAN_GetTickMs>:
	
	value = (value + pCan_value->ofs)*pCan_value->mult/pCan_value->div;
	return value;
}

inline uint32_t CAN_GetTickMs(){
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	return CAN_HW_GetTickMs();
 800155c:	f000 f8ac 	bl	80016b8 <CAN_HW_GetTickMs>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <CAN_SendFrame>:
	if(!pFrame->tick_ms) return 0;
	if(CAN_GetTickMs() - pFrame->tick_ms > pFrame->period*10) return 0;
	return 1;
}

inline uint8_t CAN_SendFrame(struct can_frame* pFrame) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	if(!CAN_HW_SendFrame(pFrame)){
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f8a9 	bl	80016c8 <CAN_HW_SendFrame>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d103      	bne.n	8001584 <CAN_SendFrame+0x1c>
		CAN_FIFO_Add(&FIFO_CAN_TX, (uint8_t*)pFrame);
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4804      	ldr	r0, [pc, #16]	; (8001590 <CAN_SendFrame+0x28>)
 8001580:	f7ff fef8 	bl	8001374 <CAN_FIFO_Add>
	}
	return 1;
 8001584:	2301      	movs	r3, #1
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001fc 	.word	0x200001fc

08001594 <CAN_ReceiveCallback>:
void CAN_SetRxCallback(void (*callback)(struct can_frame* frame))
{
	CAN_RxCallback = callback;
}

inline void CAN_ReceiveCallback(struct can_msg* msg){
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	uint8_t index;
	index = FilterFrame(msg->id);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ffb4 	bl	8001510 <FilterFrame>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
	if(index==255) return;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	2bff      	cmp	r3, #255	; 0xff
 80015b0:	d023      	beq.n	80015fa <CAN_ReceiveCallback+0x66>
	memcpy(_can_info.pFrames[index]->core.data, msg->data, 8);
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <CAN_ReceiveCallback+0x70>)
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f103 000c 	add.w	r0, r3, #12
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	330c      	adds	r3, #12
 80015c4:	2208      	movs	r2, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	f004 fd28 	bl	800601c <memcpy>
	_can_info.pFrames[index]->tick_ms = CAN_GetTickMs();
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <CAN_ReceiveCallback+0x70>)
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	685c      	ldr	r4, [r3, #4]
 80015d6:	f7ff ffbf 	bl	8001558 <CAN_GetTickMs>
 80015da:	4603      	mov	r3, r0
 80015dc:	61a3      	str	r3, [r4, #24]
	if(CAN_RxCallback != NULL) CAN_RxCallback(_can_info.pFrames[index]);
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <CAN_ReceiveCallback+0x74>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00a      	beq.n	80015fc <CAN_ReceiveCallback+0x68>
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <CAN_ReceiveCallback+0x74>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	4905      	ldr	r1, [pc, #20]	; (8001604 <CAN_ReceiveCallback+0x70>)
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	4790      	blx	r2
 80015f8:	e000      	b.n	80015fc <CAN_ReceiveCallback+0x68>
	if(index==255) return;
 80015fa:	bf00      	nop
}
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	bf00      	nop
 8001604:	20000394 	.word	0x20000394
 8001608:	200001f8 	.word	0x200001f8

0800160c <CAN_TxCompleteCallback>:

void CAN_TxCompleteCallback(){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0

	uint8_t* pFrame;


	pFrame = CAN_FIFO_Get(&FIFO_CAN_TX);
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <CAN_TxCompleteCallback+0x24>)
 8001614:	f7ff fef8 	bl	8001408 <CAN_FIFO_Get>
 8001618:	6078      	str	r0, [r7, #4]
	if(!pFrame) return;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <CAN_TxCompleteCallback+0x1c>
	CAN_SendFrame((struct can_frame*)pFrame);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffa1 	bl	8001568 <CAN_SendFrame>
 8001626:	e000      	b.n	800162a <CAN_TxCompleteCallback+0x1e>
	if(!pFrame) return;
 8001628:	bf00      	nop
}
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200001fc 	.word	0x200001fc

08001634 <CAN_HW_Init>:
#include "CAN_LIB_HW.h"

uint8_t retransmision_counter;

void CAN_HW_Init(){
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

	static CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <CAN_HW_Init+0x7c>)
 800163a:	2200      	movs	r2, #0
 800163c:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <CAN_HW_Init+0x7c>)
 8001640:	2200      	movs	r2, #0
 8001642:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <CAN_HW_Init+0x7c>)
 8001646:	2201      	movs	r2, #1
 8001648:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <CAN_HW_Init+0x7c>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <CAN_HW_Init+0x7c>)
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <CAN_HW_Init+0x7c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <CAN_HW_Init+0x7c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <CAN_HW_Init+0x7c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <CAN_HW_Init+0x7c>)
 800166a:	2201      	movs	r2, #1
 800166c:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <CAN_HW_Init+0x7c>)
 8001670:	220e      	movs	r2, #14
 8001672:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&CAN_HANDLE, &sFilterConfig) != HAL_OK)
 8001674:	490e      	ldr	r1, [pc, #56]	; (80016b0 <CAN_HW_Init+0x7c>)
 8001676:	480f      	ldr	r0, [pc, #60]	; (80016b4 <CAN_HW_Init+0x80>)
 8001678:	f001 fdcb 	bl	8003212 <HAL_CAN_ConfigFilter>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <CAN_HW_Init+0x52>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001682:	f7ff fcf9 	bl	8001078 <Error_Handler>
	}

	if (HAL_CAN_Start(&CAN_HANDLE) != HAL_OK)
 8001686:	480b      	ldr	r0, [pc, #44]	; (80016b4 <CAN_HW_Init+0x80>)
 8001688:	f001 fe8d 	bl	80033a6 <HAL_CAN_Start>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <CAN_HW_Init+0x62>
	{
		/* Start Error */
		Error_Handler();
 8001692:	f7ff fcf1 	bl	8001078 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&CAN_HANDLE, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN
 8001696:	f248 010f 	movw	r1, #32783	; 0x800f
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <CAN_HW_Init+0x80>)
 800169c:	f001 ffe9 	bl	8003672 <HAL_CAN_ActivateNotification>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <CAN_HW_Init+0x76>
			| CAN_IT_RX_FIFO0_FULL | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 80016a6:	f7ff fce7 	bl	8001078 <Error_Handler>
	}

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200003f0 	.word	0x200003f0
 80016b4:	20000150 	.word	0x20000150

080016b8 <CAN_HW_GetTickMs>:

inline uint32_t CAN_HW_GetTickMs(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80016bc:	f000 f93a 	bl	8001934 <HAL_GetTick>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <CAN_HW_SendFrame>:

uint8_t CAN_HW_SendFrame(struct can_frame* pFrame){
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

	/* Check if mailbox is free */
    if ((CAN_HANDLE.Instance->TSR & CAN_TSR_TME0) == 0U) return 0;
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <CAN_HW_SendFrame+0xc0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <CAN_HW_SendFrame+0x1a>
 80016de:	2300      	movs	r3, #0
 80016e0:	e04b      	b.n	800177a <CAN_HW_SendFrame+0xb2>

    /* Set up the Id */
    if(pFrame->core.isExtId){
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <CAN_HW_SendFrame+0x36>
    	CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_EXID_Pos) | CAN_ID_EXT | CAN_RTR_DATA);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	00da      	lsls	r2, r3, #3
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <CAN_HW_SendFrame+0xc0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0204 	orr.w	r2, r2, #4
 80016f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 80016fc:	e006      	b.n	800170c <CAN_HW_SendFrame+0x44>
    }
    else{
        CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_STID_Pos) | CAN_RTR_DATA);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <CAN_HW_SendFrame+0xc0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0552      	lsls	r2, r2, #21
 8001708:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    }

    /* Set up the DLC */
    CAN_HANDLE.Instance->sTxMailBox[0].TDTR = pFrame->core.dlc;
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <CAN_HW_SendFrame+0xc0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6892      	ldr	r2, [r2, #8]
 8001714:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    /* Set up the data field */
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDHR,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7cdb      	ldrb	r3, [r3, #19]
 800171c:	061a      	lsls	r2, r3, #24
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7c9b      	ldrb	r3, [r3, #18]
 8001722:	041b      	lsls	r3, r3, #16
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7c5b      	ldrb	r3, [r3, #17]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7c1b      	ldrb	r3, [r3, #16]
 8001732:	4619      	mov	r1, r3
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <CAN_HW_SendFrame+0xc0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
              ((uint32_t)pFrame->core.data[7] << CAN_TDH0R_DATA7_Pos) |
              ((uint32_t)pFrame->core.data[6] << CAN_TDH0R_DATA6_Pos) |
              ((uint32_t)pFrame->core.data[5] << CAN_TDH0R_DATA5_Pos) |
              ((uint32_t)pFrame->core.data[4] << CAN_TDH0R_DATA4_Pos));
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDLR,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7bdb      	ldrb	r3, [r3, #15]
 8001742:	061a      	lsls	r2, r3, #24
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7b9b      	ldrb	r3, [r3, #14]
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7b5b      	ldrb	r3, [r3, #13]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7b1b      	ldrb	r3, [r3, #12]
 8001758:	4619      	mov	r1, r3
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <CAN_HW_SendFrame+0xc0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
              ((uint32_t)pFrame->core.data[2] << CAN_TDL0R_DATA2_Pos) |
              ((uint32_t)pFrame->core.data[1] << CAN_TDL0R_DATA1_Pos) |
              ((uint32_t)pFrame->core.data[0] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(CAN_HANDLE.Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <CAN_HW_SendFrame+0xc0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <CAN_HW_SendFrame+0xc0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    return 1;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000150 	.word	0x20000150

0800178c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 8001794:	f7ff ff3a 	bl	800160c <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200003ec 	.word	0x200003ec

080017ac <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 80017b4:	f7ff ff2a 	bl	800160c <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_CAN_TxMailbox0AbortCallback+0x1c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200003ec 	.word	0x200003ec

080017cc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

	static struct can_msg msg;
	static CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data);
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80017d8:	2100      	movs	r1, #0
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f001 fe27 	bl	800342e <HAL_CAN_GetRxMessage>
	msg.dlc = RxHeader.DLC;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80017e6:	6093      	str	r3, [r2, #8]
	msg.id = RxHeader.StdId;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80017ee:	6053      	str	r3, [r2, #4]
	CAN_ReceiveCallback(&msg);
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80017f2:	f7ff fecf 	bl	8001594 <CAN_ReceiveCallback>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000440 	.word	0x20000440
 8001804:	20000418 	.word	0x20000418
 8001808:	20000434 	.word	0x20000434

0800180c <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

	static uint32_t errorcode;
	errorcode = HAL_CAN_GetError(hcan);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f002 f94f 	bl	8003acc <HAL_CAN_GetError>
 800182e:	4603      	mov	r3, r0
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <HAL_CAN_ErrorCallback+0x58>)
 8001832:	6013      	str	r3, [r2, #0]
	HAL_CAN_ResetError(hcan);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f002 f955 	bl	8003ae4 <HAL_CAN_ResetError>

	/* arbitration lost, retransmit */
	if(errorcode & HAL_CAN_ERROR_TX_ALST0){
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_CAN_ErrorCallback+0x58>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001842:	2b00      	cmp	r3, #0
 8001844:	d013      	beq.n	800186e <HAL_CAN_ErrorCallback+0x4e>

		if(retransmision_counter < CAN_ARB_LOST_RETR){
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_CAN_ErrorCallback+0x5c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b13      	cmp	r3, #19
 800184c:	d80f      	bhi.n	800186e <HAL_CAN_ErrorCallback+0x4e>
		    SET_BIT(CAN_HANDLE->Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			retransmision_counter++;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_CAN_ErrorCallback+0x5c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_CAN_ErrorCallback+0x5c>)
 800186c:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000448 	.word	0x20000448
 800187c:	200003ec 	.word	0x200003ec

08001880 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_Init+0x28>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_Init+0x28>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f002 fa1b 	bl	8003ccc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	200f      	movs	r0, #15
 8001898:	f000 f808 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff fc44 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40022000 	.word	0x40022000

080018ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fa33 	bl	8003d36 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f002 f9fb 	bl	8003ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	20000008 	.word	0x20000008
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	2000044c 	.word	0x2000044c

08001934 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;  
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	2000044c 	.word	0x2000044c

0800194c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b09a      	sub	sp, #104	; 0x68
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e1c9      	b.n	8001d28 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d176      	bne.n	8001a94 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d152      	bne.n	8001a54 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff f9a7 	bl	8000d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d13b      	bne.n	8001a54 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f001 fab7 	bl	8002f50 <ADC_Disable>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d12f      	bne.n	8001a54 <HAL_ADC_Init+0xe0>
 80019f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d12b      	bne.n	8001a54 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a04:	f023 0302 	bic.w	r3, r3, #2
 8001a08:	f043 0202 	orr.w	r2, r3, #2
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a1e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a2e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a30:	4b86      	ldr	r3, [pc, #536]	; (8001c4c <HAL_ADC_Init+0x2d8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a86      	ldr	r2, [pc, #536]	; (8001c50 <HAL_ADC_Init+0x2dc>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	0c9a      	lsrs	r2, r3, #18
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a46:	e002      	b.n	8001a4e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f9      	bne.n	8001a48 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a70:	d110      	bne.n	8001a94 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f023 0312 	bic.w	r3, r3, #18
 8001a7a:	f043 0210 	orr.w	r2, r3, #16
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f040 8136 	bne.w	8001d0e <HAL_ADC_Init+0x39a>
 8001aa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 8131 	bne.w	8001d0e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 8129 	bne.w	8001d0e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ac4:	f043 0202 	orr.w	r2, r3, #2
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad4:	d004      	beq.n	8001ae0 <HAL_ADC_Init+0x16c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a5e      	ldr	r2, [pc, #376]	; (8001c54 <HAL_ADC_Init+0x2e0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_Init+0x170>
 8001ae0:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_ADC_Init+0x2e4>)
 8001ae2:	e000      	b.n	8001ae6 <HAL_ADC_Init+0x172>
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_ADC_Init+0x2e8>)
 8001ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af0:	d102      	bne.n	8001af8 <HAL_ADC_Init+0x184>
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_ADC_Init+0x2e0>)
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e01a      	b.n	8001b2e <HAL_ADC_Init+0x1ba>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a55      	ldr	r2, [pc, #340]	; (8001c54 <HAL_ADC_Init+0x2e0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d103      	bne.n	8001b0a <HAL_ADC_Init+0x196>
 8001b02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e011      	b.n	8001b2e <HAL_ADC_Init+0x1ba>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a54      	ldr	r2, [pc, #336]	; (8001c60 <HAL_ADC_Init+0x2ec>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d102      	bne.n	8001b1a <HAL_ADC_Init+0x1a6>
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_ADC_Init+0x2f0>)
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e009      	b.n	8001b2e <HAL_ADC_Init+0x1ba>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a51      	ldr	r2, [pc, #324]	; (8001c64 <HAL_ADC_Init+0x2f0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d102      	bne.n	8001b2a <HAL_ADC_Init+0x1b6>
 8001b24:	4b4e      	ldr	r3, [pc, #312]	; (8001c60 <HAL_ADC_Init+0x2ec>)
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	e001      	b.n	8001b2e <HAL_ADC_Init+0x1ba>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d108      	bne.n	8001b4e <HAL_ADC_Init+0x1da>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Init+0x1da>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_ADC_Init+0x1dc>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d11c      	bne.n	8001b8e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d010      	beq.n	8001b7c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_ADC_Init+0x202>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Init+0x202>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_ADC_Init+0x204>
 8001b76:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d108      	bne.n	8001b8e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b8c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7e5b      	ldrb	r3, [r3, #25]
 8001b92:	035b      	lsls	r3, r3, #13
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b98:	2a01      	cmp	r2, #1
 8001b9a:	d002      	beq.n	8001ba2 <HAL_ADC_Init+0x22e>
 8001b9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADC_Init+0x230>
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d11b      	bne.n	8001bfa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7e5b      	ldrb	r3, [r3, #25]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	045a      	lsls	r2, r3, #17
 8001bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bda:	663b      	str	r3, [r7, #96]	; 0x60
 8001bdc:	e00d      	b.n	8001bfa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d03a      	beq.n	8001c78 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_ADC_Init+0x2ec>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d004      	beq.n	8001c16 <HAL_ADC_Init+0x2a2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_ADC_Init+0x2f0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d128      	bne.n	8001c68 <HAL_ADC_Init+0x2f4>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001c1e:	d012      	beq.n	8001c46 <HAL_ADC_Init+0x2d2>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c28:	d00a      	beq.n	8001c40 <HAL_ADC_Init+0x2cc>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001c32:	d002      	beq.n	8001c3a <HAL_ADC_Init+0x2c6>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	e018      	b.n	8001c6c <HAL_ADC_Init+0x2f8>
 8001c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3e:	e015      	b.n	8001c6c <HAL_ADC_Init+0x2f8>
 8001c40:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001c44:	e012      	b.n	8001c6c <HAL_ADC_Init+0x2f8>
 8001c46:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c4a:	e00f      	b.n	8001c6c <HAL_ADC_Init+0x2f8>
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	431bde83 	.word	0x431bde83
 8001c54:	50000100 	.word	0x50000100
 8001c58:	50000300 	.word	0x50000300
 8001c5c:	50000700 	.word	0x50000700
 8001c60:	50000400 	.word	0x50000400
 8001c64:	50000500 	.word	0x50000500
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c70:	4313      	orrs	r3, r2
 8001c72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c74:	4313      	orrs	r3, r2
 8001c76:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d114      	bne.n	8001cb0 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c94:	f023 0302 	bic.w	r3, r3, #2
 8001c98:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7e1b      	ldrb	r3, [r3, #24]
 8001c9e:	039a      	lsls	r2, r3, #14
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cac:	4313      	orrs	r3, r2
 8001cae:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_ADC_Init+0x3bc>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d10c      	bne.n	8001ce6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f023 010f 	bic.w	r1, r3, #15
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	1e5a      	subs	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce4:	e007      	b.n	8001cf6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 020f 	bic.w	r2, r2, #15
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f023 0303 	bic.w	r3, r3, #3
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d0c:	e00a      	b.n	8001d24 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f023 0312 	bic.w	r3, r3, #18
 8001d16:	f043 0210 	orr.w	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3768      	adds	r7, #104	; 0x68
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	fff0c007 	.word	0xfff0c007

08001d34 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 8123 	bne.w	8001f96 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Start_IT+0x2a>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e11e      	b.n	8001f9c <HAL_ADC_Start_IT+0x268>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f001 f88e 	bl	8002e88 <ADC_Enable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 810a 	bne.w	8001f8c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d94:	d004      	beq.n	8001da0 <HAL_ADC_Start_IT+0x6c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a82      	ldr	r2, [pc, #520]	; (8001fa4 <HAL_ADC_Start_IT+0x270>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d106      	bne.n	8001dae <HAL_ADC_Start_IT+0x7a>
 8001da0:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_ADC_Start_IT+0x274>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <HAL_ADC_Start_IT+0x9a>
 8001dac:	e005      	b.n	8001dba <HAL_ADC_Start_IT+0x86>
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <HAL_ADC_Start_IT+0x278>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_ADC_Start_IT+0x9a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dc2:	d004      	beq.n	8001dce <HAL_ADC_Start_IT+0x9a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a79      	ldr	r2, [pc, #484]	; (8001fb0 <HAL_ADC_Start_IT+0x27c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d115      	bne.n	8001dfa <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d036      	beq.n	8001e56 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001df8:	e02d      	b.n	8001e56 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e0e:	d004      	beq.n	8001e1a <HAL_ADC_Start_IT+0xe6>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a63      	ldr	r2, [pc, #396]	; (8001fa4 <HAL_ADC_Start_IT+0x270>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10a      	bne.n	8001e30 <HAL_ADC_Start_IT+0xfc>
 8001e1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e008      	b.n	8001e42 <HAL_ADC_Start_IT+0x10e>
 8001e30:	4b5f      	ldr	r3, [pc, #380]	; (8001fb0 <HAL_ADC_Start_IT+0x27c>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e62:	d106      	bne.n	8001e72 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	f023 0206 	bic.w	r2, r3, #6
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e70:	e002      	b.n	8001e78 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	221c      	movs	r2, #28
 8001e86:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d110      	bne.n	8001eb2 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0204 	bic.w	r2, r2, #4
 8001e9e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0208 	orr.w	r2, r2, #8
 8001eae:	605a      	str	r2, [r3, #4]
          break;
 8001eb0:	e008      	b.n	8001ec4 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 020c 	orr.w	r2, r2, #12
 8001ec0:	605a      	str	r2, [r3, #4]
          break;
 8001ec2:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d107      	bne.n	8001edc <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0210 	bic.w	r2, r2, #16
 8001eda:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ee4:	d004      	beq.n	8001ef0 <HAL_ADC_Start_IT+0x1bc>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2e      	ldr	r2, [pc, #184]	; (8001fa4 <HAL_ADC_Start_IT+0x270>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d106      	bne.n	8001efe <HAL_ADC_Start_IT+0x1ca>
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_ADC_Start_IT+0x274>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d03e      	beq.n	8001f7a <HAL_ADC_Start_IT+0x246>
 8001efc:	e005      	b.n	8001f0a <HAL_ADC_Start_IT+0x1d6>
 8001efe:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_ADC_Start_IT+0x278>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d037      	beq.n	8001f7a <HAL_ADC_Start_IT+0x246>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f12:	d004      	beq.n	8001f1e <HAL_ADC_Start_IT+0x1ea>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a22      	ldr	r2, [pc, #136]	; (8001fa4 <HAL_ADC_Start_IT+0x270>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d106      	bne.n	8001f2c <HAL_ADC_Start_IT+0x1f8>
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_ADC_Start_IT+0x274>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d027      	beq.n	8001f7a <HAL_ADC_Start_IT+0x246>
 8001f2a:	e005      	b.n	8001f38 <HAL_ADC_Start_IT+0x204>
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <HAL_ADC_Start_IT+0x278>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d020      	beq.n	8001f7a <HAL_ADC_Start_IT+0x246>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f40:	d004      	beq.n	8001f4c <HAL_ADC_Start_IT+0x218>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <HAL_ADC_Start_IT+0x270>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d106      	bne.n	8001f5a <HAL_ADC_Start_IT+0x226>
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_ADC_Start_IT+0x274>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	d010      	beq.n	8001f7a <HAL_ADC_Start_IT+0x246>
 8001f58:	e005      	b.n	8001f66 <HAL_ADC_Start_IT+0x232>
 8001f5a:	4b14      	ldr	r3, [pc, #80]	; (8001fac <HAL_ADC_Start_IT+0x278>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	2b09      	cmp	r3, #9
 8001f64:	d009      	beq.n	8001f7a <HAL_ADC_Start_IT+0x246>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f6e:	d004      	beq.n	8001f7a <HAL_ADC_Start_IT+0x246>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <HAL_ADC_Start_IT+0x27c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10f      	bne.n	8001f9a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0204 	orr.w	r2, r2, #4
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	e006      	b.n	8001f9a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f94:	e001      	b.n	8001f9a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
 8001f98:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	50000100 	.word	0x50000100
 8001fa8:	50000300 	.word	0x50000300
 8001fac:	50000700 	.word	0x50000700
 8001fb0:	50000400 	.word	0x50000400

08001fb4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
	...

08001fd0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <HAL_ADC_IRQHandler+0x38>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10b      	bne.n	8002020 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80bc 	beq.w	800218c <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80b6 	beq.w	800218c <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002040:	d004      	beq.n	800204c <HAL_ADC_IRQHandler+0x7c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a90      	ldr	r2, [pc, #576]	; (8002288 <HAL_ADC_IRQHandler+0x2b8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d106      	bne.n	800205a <HAL_ADC_IRQHandler+0x8a>
 800204c:	4b8f      	ldr	r3, [pc, #572]	; (800228c <HAL_ADC_IRQHandler+0x2bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03e      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x106>
 8002058:	e005      	b.n	8002066 <HAL_ADC_IRQHandler+0x96>
 800205a:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_ADC_IRQHandler+0x2c0>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2b00      	cmp	r3, #0
 8002064:	d037      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x106>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800206e:	d004      	beq.n	800207a <HAL_ADC_IRQHandler+0xaa>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a84      	ldr	r2, [pc, #528]	; (8002288 <HAL_ADC_IRQHandler+0x2b8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d106      	bne.n	8002088 <HAL_ADC_IRQHandler+0xb8>
 800207a:	4b84      	ldr	r3, [pc, #528]	; (800228c <HAL_ADC_IRQHandler+0x2bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2b05      	cmp	r3, #5
 8002084:	d027      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x106>
 8002086:	e005      	b.n	8002094 <HAL_ADC_IRQHandler+0xc4>
 8002088:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_ADC_IRQHandler+0x2c0>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2b05      	cmp	r3, #5
 8002092:	d020      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x106>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800209c:	d004      	beq.n	80020a8 <HAL_ADC_IRQHandler+0xd8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a79      	ldr	r2, [pc, #484]	; (8002288 <HAL_ADC_IRQHandler+0x2b8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d106      	bne.n	80020b6 <HAL_ADC_IRQHandler+0xe6>
 80020a8:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_ADC_IRQHandler+0x2bc>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	2b09      	cmp	r3, #9
 80020b2:	d010      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x106>
 80020b4:	e005      	b.n	80020c2 <HAL_ADC_IRQHandler+0xf2>
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_ADC_IRQHandler+0x2c0>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	2b09      	cmp	r3, #9
 80020c0:	d009      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x106>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ca:	d004      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x106>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a70      	ldr	r2, [pc, #448]	; (8002294 <HAL_ADC_IRQHandler+0x2c4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d104      	bne.n	80020e0 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	e00f      	b.n	8002100 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020e8:	d004      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x124>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a66      	ldr	r2, [pc, #408]	; (8002288 <HAL_ADC_IRQHandler+0x2b8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d102      	bne.n	80020fa <HAL_ADC_IRQHandler+0x12a>
 80020f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020f8:	e000      	b.n	80020fc <HAL_ADC_IRQHandler+0x12c>
 80020fa:	4b66      	ldr	r3, [pc, #408]	; (8002294 <HAL_ADC_IRQHandler+0x2c4>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800210a:	2b00      	cmp	r3, #0
 800210c:	d137      	bne.n	800217e <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002114:	2b00      	cmp	r3, #0
 8002116:	d132      	bne.n	800217e <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d02d      	beq.n	800217e <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11a      	bne.n	8002166 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 020c 	bic.w	r2, r2, #12
 800213e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d112      	bne.n	800217e <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
 8002164:	e00b      	b.n	800217e <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f043 0210 	orr.w	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe f834 	bl	80001ec <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	220c      	movs	r2, #12
 800218a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <HAL_ADC_IRQHandler+0x1d0>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8138 	beq.w	800241c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8132 	beq.w	800241c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021cc:	d004      	beq.n	80021d8 <HAL_ADC_IRQHandler+0x208>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <HAL_ADC_IRQHandler+0x2b8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d106      	bne.n	80021e6 <HAL_ADC_IRQHandler+0x216>
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_ADC_IRQHandler+0x2bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d03e      	beq.n	8002262 <HAL_ADC_IRQHandler+0x292>
 80021e4:	e005      	b.n	80021f2 <HAL_ADC_IRQHandler+0x222>
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <HAL_ADC_IRQHandler+0x2c0>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d037      	beq.n	8002262 <HAL_ADC_IRQHandler+0x292>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021fa:	d004      	beq.n	8002206 <HAL_ADC_IRQHandler+0x236>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a21      	ldr	r2, [pc, #132]	; (8002288 <HAL_ADC_IRQHandler+0x2b8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d106      	bne.n	8002214 <HAL_ADC_IRQHandler+0x244>
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_ADC_IRQHandler+0x2bc>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2b05      	cmp	r3, #5
 8002210:	d027      	beq.n	8002262 <HAL_ADC_IRQHandler+0x292>
 8002212:	e005      	b.n	8002220 <HAL_ADC_IRQHandler+0x250>
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <HAL_ADC_IRQHandler+0x2c0>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	2b05      	cmp	r3, #5
 800221e:	d020      	beq.n	8002262 <HAL_ADC_IRQHandler+0x292>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002228:	d004      	beq.n	8002234 <HAL_ADC_IRQHandler+0x264>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_ADC_IRQHandler+0x2b8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d106      	bne.n	8002242 <HAL_ADC_IRQHandler+0x272>
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_ADC_IRQHandler+0x2bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2b09      	cmp	r3, #9
 800223e:	d010      	beq.n	8002262 <HAL_ADC_IRQHandler+0x292>
 8002240:	e005      	b.n	800224e <HAL_ADC_IRQHandler+0x27e>
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_ADC_IRQHandler+0x2c0>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2b09      	cmp	r3, #9
 800224c:	d009      	beq.n	8002262 <HAL_ADC_IRQHandler+0x292>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002256:	d004      	beq.n	8002262 <HAL_ADC_IRQHandler+0x292>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <HAL_ADC_IRQHandler+0x2c4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d104      	bne.n	800226c <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	e018      	b.n	800229e <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002274:	d004      	beq.n	8002280 <HAL_ADC_IRQHandler+0x2b0>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a03      	ldr	r2, [pc, #12]	; (8002288 <HAL_ADC_IRQHandler+0x2b8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d10b      	bne.n	8002298 <HAL_ADC_IRQHandler+0x2c8>
 8002280:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002284:	e009      	b.n	800229a <HAL_ADC_IRQHandler+0x2ca>
 8002286:	bf00      	nop
 8002288:	50000100 	.word	0x50000100
 800228c:	50000300 	.word	0x50000300
 8002290:	50000700 	.word	0x50000700
 8002294:	50000400 	.word	0x50000400
 8002298:	4b92      	ldr	r3, [pc, #584]	; (80024e4 <HAL_ADC_IRQHandler+0x514>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 80b0 	bne.w	800240e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 80a3 	bne.w	800240e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f040 809d 	bne.w	800240e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8097 	beq.w	800240e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e8:	d004      	beq.n	80022f4 <HAL_ADC_IRQHandler+0x324>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7e      	ldr	r2, [pc, #504]	; (80024e8 <HAL_ADC_IRQHandler+0x518>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d106      	bne.n	8002302 <HAL_ADC_IRQHandler+0x332>
 80022f4:	4b7d      	ldr	r3, [pc, #500]	; (80024ec <HAL_ADC_IRQHandler+0x51c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03e      	beq.n	800237e <HAL_ADC_IRQHandler+0x3ae>
 8002300:	e005      	b.n	800230e <HAL_ADC_IRQHandler+0x33e>
 8002302:	4b7b      	ldr	r3, [pc, #492]	; (80024f0 <HAL_ADC_IRQHandler+0x520>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2b00      	cmp	r3, #0
 800230c:	d037      	beq.n	800237e <HAL_ADC_IRQHandler+0x3ae>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002316:	d004      	beq.n	8002322 <HAL_ADC_IRQHandler+0x352>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a72      	ldr	r2, [pc, #456]	; (80024e8 <HAL_ADC_IRQHandler+0x518>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d106      	bne.n	8002330 <HAL_ADC_IRQHandler+0x360>
 8002322:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_ADC_IRQHandler+0x51c>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2b06      	cmp	r3, #6
 800232c:	d027      	beq.n	800237e <HAL_ADC_IRQHandler+0x3ae>
 800232e:	e005      	b.n	800233c <HAL_ADC_IRQHandler+0x36c>
 8002330:	4b6f      	ldr	r3, [pc, #444]	; (80024f0 <HAL_ADC_IRQHandler+0x520>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	2b06      	cmp	r3, #6
 800233a:	d020      	beq.n	800237e <HAL_ADC_IRQHandler+0x3ae>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002344:	d004      	beq.n	8002350 <HAL_ADC_IRQHandler+0x380>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a67      	ldr	r2, [pc, #412]	; (80024e8 <HAL_ADC_IRQHandler+0x518>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d106      	bne.n	800235e <HAL_ADC_IRQHandler+0x38e>
 8002350:	4b66      	ldr	r3, [pc, #408]	; (80024ec <HAL_ADC_IRQHandler+0x51c>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2b07      	cmp	r3, #7
 800235a:	d010      	beq.n	800237e <HAL_ADC_IRQHandler+0x3ae>
 800235c:	e005      	b.n	800236a <HAL_ADC_IRQHandler+0x39a>
 800235e:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <HAL_ADC_IRQHandler+0x520>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 031f 	and.w	r3, r3, #31
 8002366:	2b07      	cmp	r3, #7
 8002368:	d009      	beq.n	800237e <HAL_ADC_IRQHandler+0x3ae>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002372:	d004      	beq.n	800237e <HAL_ADC_IRQHandler+0x3ae>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <HAL_ADC_IRQHandler+0x514>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d104      	bne.n	8002388 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e00f      	b.n	80023a8 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002390:	d004      	beq.n	800239c <HAL_ADC_IRQHandler+0x3cc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a54      	ldr	r2, [pc, #336]	; (80024e8 <HAL_ADC_IRQHandler+0x518>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d102      	bne.n	80023a2 <HAL_ADC_IRQHandler+0x3d2>
 800239c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023a0:	e000      	b.n	80023a4 <HAL_ADC_IRQHandler+0x3d4>
 80023a2:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_ADC_IRQHandler+0x514>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d12d      	bne.n	800240e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11a      	bne.n	80023f6 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023ce:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d112      	bne.n	800240e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
 80023f4:	e00b      	b.n	800240e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f936 	bl	8002680 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2260      	movs	r2, #96	; 0x60
 800241a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <HAL_ADC_IRQHandler+0x47a>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00c      	beq.n	800244a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fa85 	bl	800194c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d012      	beq.n	800247a <HAL_ADC_IRQHandler+0x4aa>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f91c 	bl	80026a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002478:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002480:	2b00      	cmp	r3, #0
 8002482:	d012      	beq.n	80024aa <HAL_ADC_IRQHandler+0x4da>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00d      	beq.n	80024aa <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f90e 	bl	80026bc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d04f      	beq.n	8002554 <HAL_ADC_IRQHandler+0x584>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d04a      	beq.n	8002554 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e02d      	b.n	8002528 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024d4:	d004      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x510>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a03      	ldr	r2, [pc, #12]	; (80024e8 <HAL_ADC_IRQHandler+0x518>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d109      	bne.n	80024f4 <HAL_ADC_IRQHandler+0x524>
 80024e0:	4b02      	ldr	r3, [pc, #8]	; (80024ec <HAL_ADC_IRQHandler+0x51c>)
 80024e2:	e008      	b.n	80024f6 <HAL_ADC_IRQHandler+0x526>
 80024e4:	50000400 	.word	0x50000400
 80024e8:	50000100 	.word	0x50000100
 80024ec:	50000300 	.word	0x50000300
 80024f0:	50000700 	.word	0x50000700
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_ADC_IRQHandler+0x5c8>)
 80024f6:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d10a      	bne.n	8002528 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002512:	2301      	movs	r3, #1
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e007      	b.n	8002528 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002524:	2301      	movs	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10e      	bne.n	800254c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f043 0202 	orr.w	r2, r3, #2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fa0a 	bl	8001960 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2210      	movs	r2, #16
 8002552:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d018      	beq.n	8002590 <HAL_ADC_IRQHandler+0x5c0>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f043 0208 	orr.w	r2, r3, #8
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002588:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f882 	bl	8002694 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	50000700 	.word	0x50000700

0800259c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_ADCEx_Calibration_Start+0x1c>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e05f      	b.n	8002678 <HAL_ADCEx_Calibration_Start+0xdc>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fcc5 	bl	8002f50 <ADC_Disable>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d14e      	bne.n	800266e <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80025e4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025fa:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800260a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800260c:	f7ff f992 	bl	8001934 <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002612:	e01c      	b.n	800264e <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002614:	f7ff f98e 	bl	8001934 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b0a      	cmp	r3, #10
 8002620:	d915      	bls.n	800264e <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800262c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002630:	d10d      	bne.n	800264e <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f023 0312 	bic.w	r3, r3, #18
 800263a:	f043 0210 	orr.w	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e014      	b.n	8002678 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800265c:	d0da      	beq.n	8002614 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b09b      	sub	sp, #108	; 0x6c
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_ADC_ConfigChannel+0x22>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e2c8      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x5b4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 82ac 	bne.w	8002c62 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d81c      	bhi.n	800274c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	461a      	mov	r2, r3
 8002726:	231f      	movs	r3, #31
 8002728:	4093      	lsls	r3, r2
 800272a:	43db      	mvns	r3, r3
 800272c:	4019      	ands	r1, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa00 f203 	lsl.w	r2, r0, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
 800274a:	e063      	b.n	8002814 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b09      	cmp	r3, #9
 8002752:	d81e      	bhi.n	8002792 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	3b1e      	subs	r3, #30
 8002768:	221f      	movs	r2, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	4019      	ands	r1, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	3b1e      	subs	r3, #30
 8002784:	fa00 f203 	lsl.w	r2, r0, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	635a      	str	r2, [r3, #52]	; 0x34
 8002790:	e040      	b.n	8002814 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b0e      	cmp	r3, #14
 8002798:	d81e      	bhi.n	80027d8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	3b3c      	subs	r3, #60	; 0x3c
 80027ae:	221f      	movs	r2, #31
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4019      	ands	r1, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	3b3c      	subs	r3, #60	; 0x3c
 80027ca:	fa00 f203 	lsl.w	r2, r0, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
 80027d6:	e01d      	b.n	8002814 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	3b5a      	subs	r3, #90	; 0x5a
 80027ec:	221f      	movs	r2, #31
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	4019      	ands	r1, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	3b5a      	subs	r3, #90	; 0x5a
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 80e5 	bne.w	80029ee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b09      	cmp	r3, #9
 800282a:	d91c      	bls.n	8002866 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6999      	ldr	r1, [r3, #24]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	4413      	add	r3, r2
 800283c:	3b1e      	subs	r3, #30
 800283e:	2207      	movs	r2, #7
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	4019      	ands	r1, r3
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6898      	ldr	r0, [r3, #8]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	3b1e      	subs	r3, #30
 8002858:	fa00 f203 	lsl.w	r2, r0, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	619a      	str	r2, [r3, #24]
 8002864:	e019      	b.n	800289a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6959      	ldr	r1, [r3, #20]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	2207      	movs	r2, #7
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	4019      	ands	r1, r3
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6898      	ldr	r0, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4413      	add	r3, r2
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	08db      	lsrs	r3, r3, #3
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d84f      	bhi.n	800295c <HAL_ADC_ConfigChannel+0x28c>
 80028bc:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <HAL_ADC_ConfigChannel+0x1f4>)
 80028be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c2:	bf00      	nop
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028f7 	.word	0x080028f7
 80028cc:	08002919 	.word	0x08002919
 80028d0:	0800293b 	.word	0x0800293b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028da:	4b99      	ldr	r3, [pc, #612]	; (8002b40 <HAL_ADC_ConfigChannel+0x470>)
 80028dc:	4013      	ands	r3, r2
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	0691      	lsls	r1, r2, #26
 80028e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028e6:	430a      	orrs	r2, r1
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028f2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028f4:	e07b      	b.n	80029ee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028fc:	4b90      	ldr	r3, [pc, #576]	; (8002b40 <HAL_ADC_ConfigChannel+0x470>)
 80028fe:	4013      	ands	r3, r2
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	0691      	lsls	r1, r2, #26
 8002906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002908:	430a      	orrs	r2, r1
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002914:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002916:	e06a      	b.n	80029ee <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800291e:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_ADC_ConfigChannel+0x470>)
 8002920:	4013      	ands	r3, r2
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	0691      	lsls	r1, r2, #26
 8002928:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800292a:	430a      	orrs	r2, r1
 800292c:	431a      	orrs	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002936:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002938:	e059      	b.n	80029ee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002940:	4b7f      	ldr	r3, [pc, #508]	; (8002b40 <HAL_ADC_ConfigChannel+0x470>)
 8002942:	4013      	ands	r3, r2
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	0691      	lsls	r1, r2, #26
 800294a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800294c:	430a      	orrs	r2, r1
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002958:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800295a:	e048      	b.n	80029ee <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	069b      	lsls	r3, r3, #26
 800296c:	429a      	cmp	r2, r3
 800296e:	d107      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800297e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	069b      	lsls	r3, r3, #26
 8002990:	429a      	cmp	r2, r3
 8002992:	d107      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029a2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	069b      	lsls	r3, r3, #26
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d107      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029c6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	069b      	lsls	r3, r3, #26
 80029d8:	429a      	cmp	r2, r3
 80029da:	d107      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029ea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80029ec:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d108      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x33e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x33e>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x340>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 8131 	bne.w	8002c78 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d00f      	beq.n	8002a3e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43da      	mvns	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	400a      	ands	r2, r1
 8002a38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a3c:	e049      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b09      	cmp	r3, #9
 8002a5e:	d91c      	bls.n	8002a9a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6999      	ldr	r1, [r3, #24]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b1b      	subs	r3, #27
 8002a72:	2207      	movs	r2, #7
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	4019      	ands	r1, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6898      	ldr	r0, [r3, #8]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b1b      	subs	r3, #27
 8002a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	619a      	str	r2, [r3, #24]
 8002a98:	e01b      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6959      	ldr	r1, [r3, #20]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	2207      	movs	r2, #7
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	4019      	ands	r1, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6898      	ldr	r0, [r3, #8]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ada:	d004      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x416>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a18      	ldr	r2, [pc, #96]	; (8002b44 <HAL_ADC_ConfigChannel+0x474>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x41a>
 8002ae6:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_ADC_ConfigChannel+0x478>)
 8002ae8:	e000      	b.n	8002aec <HAL_ADC_ConfigChannel+0x41c>
 8002aea:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_ADC_ConfigChannel+0x47c>)
 8002aec:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d105      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d015      	beq.n	8002b2e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b06:	2b11      	cmp	r3, #17
 8002b08:	d105      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b1a:	2b12      	cmp	r3, #18
 8002b1c:	f040 80ac 	bne.w	8002c78 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 80a5 	bne.w	8002c78 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b36:	d10b      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x480>
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <HAL_ADC_ConfigChannel+0x474>)
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e023      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x4b6>
 8002b3e:	bf00      	nop
 8002b40:	83fff000 	.word	0x83fff000
 8002b44:	50000100 	.word	0x50000100
 8002b48:	50000300 	.word	0x50000300
 8002b4c:	50000700 	.word	0x50000700
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a4e      	ldr	r2, [pc, #312]	; (8002c90 <HAL_ADC_ConfigChannel+0x5c0>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d103      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x492>
 8002b5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	e011      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x4b6>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4b      	ldr	r2, [pc, #300]	; (8002c94 <HAL_ADC_ConfigChannel+0x5c4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d102      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x4a2>
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e009      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x4b6>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a48      	ldr	r2, [pc, #288]	; (8002c98 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d102      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x4b2>
 8002b7c:	4b45      	ldr	r3, [pc, #276]	; (8002c94 <HAL_ADC_ConfigChannel+0x5c4>)
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e001      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x4b6>
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d108      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x4d6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x4d6>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x4d8>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d150      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bac:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d010      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d107      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x4fe>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x4fe>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x500>
 8002bce:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d13c      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d11d      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x548>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be4:	d118      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_ADC_ConfigChannel+0x5cc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a2a      	ldr	r2, [pc, #168]	; (8002ca0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9a      	lsrs	r2, r3, #18
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c08:	e002      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f9      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c16:	e02e      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b11      	cmp	r3, #17
 8002c1e:	d10b      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x568>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c28:	d106      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c34:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c36:	e01e      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d11a      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c4c:	e013      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f043 0220 	orr.w	r2, r3, #32
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c60:	e00a      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f043 0220 	orr.w	r2, r3, #32
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002c74:	e000      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c76:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	376c      	adds	r7, #108	; 0x6c
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	50000100 	.word	0x50000100
 8002c94:	50000400 	.word	0x50000400
 8002c98:	50000500 	.word	0x50000500
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b099      	sub	sp, #100	; 0x64
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbc:	d102      	bne.n	8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002cbe:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	e01a      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6a      	ldr	r2, [pc, #424]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d103      	bne.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002cce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	e011      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a67      	ldr	r2, [pc, #412]	; (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d102      	bne.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ce0:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	e009      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a64      	ldr	r2, [pc, #400]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d102      	bne.n	8002cf6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002cf0:	4b61      	ldr	r3, [pc, #388]	; (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	e001      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b0      	b.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e0a9      	b.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f040 808d 	bne.w	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 8086 	bne.w	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d40:	d004      	beq.n	8002d4c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a4b      	ldr	r2, [pc, #300]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002d4e:	e000      	b.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002d50:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002d52:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d040      	beq.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d6e:	035b      	lsls	r3, r3, #13
 8002d70:	430b      	orrs	r3, r1
 8002d72:	431a      	orrs	r2, r3
 8002d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d76:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d108      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d15c      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002dba:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d14b      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dc8:	f023 030f 	bic.w	r3, r3, #15
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	6811      	ldr	r1, [r2, #0]
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	6892      	ldr	r2, [r2, #8]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dda:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ddc:	e03c      	b.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d108      	bne.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d123      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d107      	bne.n	8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002e2c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d112      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e3a:	f023 030f 	bic.w	r3, r3, #15
 8002e3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e40:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e42:	e009      	b.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e56:	e000      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e58:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002e66:	4618      	mov	r0, r3
 8002e68:	3764      	adds	r7, #100	; 0x64
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	50000100 	.word	0x50000100
 8002e78:	50000400 	.word	0x50000400
 8002e7c:	50000500 	.word	0x50000500
 8002e80:	50000300 	.word	0x50000300
 8002e84:	50000700 	.word	0x50000700

08002e88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <ADC_Enable+0x2c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <ADC_Enable+0x2c>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <ADC_Enable+0x2e>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d143      	bne.n	8002f42 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b22      	ldr	r3, [pc, #136]	; (8002f4c <ADC_Enable+0xc4>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0210 	orr.w	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e02f      	b.n	8002f44 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002ef4:	f7fe fd1e 	bl	8001934 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002efa:	e01b      	b.n	8002f34 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002efc:	f7fe fd1a 	bl	8001934 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d914      	bls.n	8002f34 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d00d      	beq.n	8002f34 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f043 0210 	orr.w	r2, r3, #16
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e007      	b.n	8002f44 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d1dc      	bne.n	8002efc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	8000003f 	.word	0x8000003f

08002f50 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d108      	bne.n	8002f7c <ADC_Disable+0x2c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <ADC_Disable+0x2c>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <ADC_Disable+0x2e>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d047      	beq.n	8003012 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030d 	and.w	r3, r3, #13
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10f      	bne.n	8002fb0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0202 	orr.w	r2, r2, #2
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fcc4 	bl	8001934 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fae:	e029      	b.n	8003004 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f043 0210 	orr.w	r2, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e023      	b.n	8003014 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fcc:	f7fe fcb2 	bl	8001934 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d914      	bls.n	8003004 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d10d      	bne.n	8003004 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d0dc      	beq.n	8002fcc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0ed      	b.n	800320a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fec8 	bl	8000dd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003050:	f7fe fc70 	bl	8001934 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003056:	e012      	b.n	800307e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003058:	f7fe fc6c 	bl	8001934 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b0a      	cmp	r3, #10
 8003064:	d90b      	bls.n	800307e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2205      	movs	r2, #5
 8003076:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0c5      	b.n	800320a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0e5      	beq.n	8003058 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0202 	bic.w	r2, r2, #2
 800309a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800309c:	f7fe fc4a 	bl	8001934 <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030a2:	e012      	b.n	80030ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030a4:	f7fe fc46 	bl	8001934 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b0a      	cmp	r3, #10
 80030b0:	d90b      	bls.n	80030ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2205      	movs	r2, #5
 80030c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e09f      	b.n	800320a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e5      	bne.n	80030a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7e1b      	ldrb	r3, [r3, #24]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d108      	bne.n	80030f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e007      	b.n	8003102 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003100:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7e5b      	ldrb	r3, [r3, #25]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d108      	bne.n	800311c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e007      	b.n	800312c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7e9b      	ldrb	r3, [r3, #26]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d108      	bne.n	8003146 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0220 	orr.w	r2, r2, #32
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e007      	b.n	8003156 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0220 	bic.w	r2, r2, #32
 8003154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7edb      	ldrb	r3, [r3, #27]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0210 	bic.w	r2, r2, #16
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	e007      	b.n	8003180 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0210 	orr.w	r2, r2, #16
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7f1b      	ldrb	r3, [r3, #28]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d108      	bne.n	800319a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e007      	b.n	80031aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0208 	bic.w	r2, r2, #8
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7f5b      	ldrb	r3, [r3, #29]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0204 	orr.w	r2, r2, #4
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e007      	b.n	80031d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0204 	bic.w	r2, r2, #4
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	ea42 0103 	orr.w	r1, r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	1e5a      	subs	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003212:	b480      	push	{r7}
 8003214:	b087      	sub	sp, #28
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800322a:	7cfb      	ldrb	r3, [r7, #19]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d003      	beq.n	8003238 <HAL_CAN_ConfigFilter+0x26>
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	2b02      	cmp	r3, #2
 8003234:	f040 80aa 	bne.w	800338c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	2201      	movs	r2, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	43db      	mvns	r3, r3
 8003262:	401a      	ands	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d123      	bne.n	80032ba <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	43db      	mvns	r3, r3
 800327c:	401a      	ands	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003294:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3248      	adds	r2, #72	; 0x48
 800329a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032b0:	6979      	ldr	r1, [r7, #20]
 80032b2:	3348      	adds	r3, #72	; 0x48
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d122      	bne.n	8003308 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80032e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3248      	adds	r2, #72	; 0x48
 80032e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80032fe:	6979      	ldr	r1, [r7, #20]
 8003300:	3348      	adds	r3, #72	; 0x48
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003322:	e007      	b.n	8003334 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	431a      	orrs	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43db      	mvns	r3, r3
 8003346:	401a      	ands	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800334e:	e007      	b.n	8003360 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	431a      	orrs	r2, r3
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	431a      	orrs	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800337e:	f023 0201 	bic.w	r2, r3, #1
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e006      	b.n	800339a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b084      	sub	sp, #16
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d12e      	bne.n	8003418 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0201 	bic.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033d2:	f7fe faaf 	bl	8001934 <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80033d8:	e012      	b.n	8003400 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033da:	f7fe faab 	bl	8001934 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b0a      	cmp	r3, #10
 80033e6:	d90b      	bls.n	8003400 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2205      	movs	r2, #5
 80033f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e012      	b.n	8003426 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e5      	bne.n	80033da <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e006      	b.n	8003426 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800342e:	b480      	push	{r7}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003442:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d003      	beq.n	8003452 <HAL_CAN_GetRxMessage+0x24>
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	2b02      	cmp	r3, #2
 800344e:	f040 8103 	bne.w	8003658 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10e      	bne.n	8003476 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0f7      	b.n	8003666 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0e8      	b.n	8003666 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	331b      	adds	r3, #27
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	4413      	add	r3, r2
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0204 	and.w	r2, r3, #4
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10c      	bne.n	80034cc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	331b      	adds	r3, #27
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	4413      	add	r3, r2
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0d5b      	lsrs	r3, r3, #21
 80034c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e00b      	b.n	80034e4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	331b      	adds	r3, #27
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	4413      	add	r3, r2
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	08db      	lsrs	r3, r3, #3
 80034dc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	331b      	adds	r3, #27
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	4413      	add	r3, r2
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0202 	and.w	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	331b      	adds	r3, #27
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	4413      	add	r3, r2
 8003506:	3304      	adds	r3, #4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2208      	movs	r2, #8
 8003516:	611a      	str	r2, [r3, #16]
 8003518:	e00b      	b.n	8003532 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	331b      	adds	r3, #27
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	4413      	add	r3, r2
 8003526:	3304      	adds	r3, #4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	331b      	adds	r3, #27
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	4413      	add	r3, r2
 800353e:	3304      	adds	r3, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	b2da      	uxtb	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	331b      	adds	r3, #27
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	4413      	add	r3, r2
 8003556:	3304      	adds	r3, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	0c1b      	lsrs	r3, r3, #16
 800355c:	b29a      	uxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	4413      	add	r3, r2
 800356c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	4413      	add	r3, r2
 8003582:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0a1a      	lsrs	r2, r3, #8
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	4413      	add	r3, r2
 800359c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	0c1a      	lsrs	r2, r3, #16
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	3302      	adds	r3, #2
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0e1a      	lsrs	r2, r3, #24
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	3303      	adds	r3, #3
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	3304      	adds	r3, #4
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0a1a      	lsrs	r2, r3, #8
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	3305      	adds	r3, #5
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	4413      	add	r3, r2
 8003602:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0c1a      	lsrs	r2, r3, #16
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	3306      	adds	r3, #6
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	4413      	add	r3, r2
 800361c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0e1a      	lsrs	r2, r3, #24
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	3307      	adds	r3, #7
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d108      	bne.n	8003644 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	e007      	b.n	8003654 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0220 	orr.w	r2, r2, #32
 8003652:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e006      	b.n	8003666 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003682:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d002      	beq.n	8003690 <HAL_CAN_ActivateNotification+0x1e>
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b02      	cmp	r3, #2
 800368e:	d109      	bne.n	80036a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6959      	ldr	r1, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e006      	b.n	80036b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b08a      	sub	sp, #40	; 0x28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d07c      	beq.n	80037fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d023      	beq.n	8003756 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2201      	movs	r2, #1
 8003714:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fe f833 	bl	800178c <HAL_CAN_TxMailbox0CompleteCallback>
 8003726:	e016      	b.n	8003756 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	e00c      	b.n	8003756 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b00      	cmp	r3, #0
 8003744:	d004      	beq.n	8003750 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
 800374e:	e002      	b.n	8003756 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fe f82b 	bl	80017ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d024      	beq.n	80037aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003768:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f959 	bl	8003a2c <HAL_CAN_TxMailbox1CompleteCallback>
 800377a:	e016      	b.n	80037aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
 800378e:	e00c      	b.n	80037aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
 80037a2:	e002      	b.n	80037aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f955 	bl	8003a54 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d024      	beq.n	80037fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f939 	bl	8003a40 <HAL_CAN_TxMailbox2CompleteCallback>
 80037ce:	e016      	b.n	80037fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	e00c      	b.n	80037fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d004      	beq.n	80037f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
 80037f6:	e002      	b.n	80037fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f935 	bl	8003a68 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f003 0308 	and.w	r3, r3, #8
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00c      	beq.n	8003822 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003818:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2210      	movs	r2, #16
 8003820:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d006      	beq.n	8003844 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2208      	movs	r2, #8
 800383c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fd ffe4 	bl	800180c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7fd ffb5 	bl	80017cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00c      	beq.n	8003886 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800387c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2210      	movs	r2, #16
 8003884:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d006      	beq.n	80038a8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2208      	movs	r2, #8
 80038a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8f4 	bl	8003a90 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f8db 	bl	8003a7c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00b      	beq.n	80038e8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d006      	beq.n	80038e8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8de 	bl	8003aa4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d006      	beq.n	800390a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2208      	movs	r2, #8
 8003902:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8d7 	bl	8003ab8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d07b      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d072      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003978:	2b00      	cmp	r3, #0
 800397a:	d043      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003982:	2b00      	cmp	r3, #0
 8003984:	d03e      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800398c:	2b60      	cmp	r3, #96	; 0x60
 800398e:	d02b      	beq.n	80039e8 <HAL_CAN_IRQHandler+0x32a>
 8003990:	2b60      	cmp	r3, #96	; 0x60
 8003992:	d82e      	bhi.n	80039f2 <HAL_CAN_IRQHandler+0x334>
 8003994:	2b50      	cmp	r3, #80	; 0x50
 8003996:	d022      	beq.n	80039de <HAL_CAN_IRQHandler+0x320>
 8003998:	2b50      	cmp	r3, #80	; 0x50
 800399a:	d82a      	bhi.n	80039f2 <HAL_CAN_IRQHandler+0x334>
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d019      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x316>
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d826      	bhi.n	80039f2 <HAL_CAN_IRQHandler+0x334>
 80039a4:	2b30      	cmp	r3, #48	; 0x30
 80039a6:	d010      	beq.n	80039ca <HAL_CAN_IRQHandler+0x30c>
 80039a8:	2b30      	cmp	r3, #48	; 0x30
 80039aa:	d822      	bhi.n	80039f2 <HAL_CAN_IRQHandler+0x334>
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d002      	beq.n	80039b6 <HAL_CAN_IRQHandler+0x2f8>
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d005      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039b4:	e01d      	b.n	80039f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	f043 0308 	orr.w	r3, r3, #8
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039be:	e019      	b.n	80039f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	f043 0310 	orr.w	r3, r3, #16
 80039c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039c8:	e014      	b.n	80039f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f043 0320 	orr.w	r3, r3, #32
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039d2:	e00f      	b.n	80039f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039dc:	e00a      	b.n	80039f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039e6:	e005      	b.n	80039f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039f0:	e000      	b.n	80039f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80039f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a02:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd fefe 	bl	8001820 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a24:	bf00      	nop
 8003a26:	3728      	adds	r7, #40	; 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af6:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003af8:	7bbb      	ldrb	r3, [r7, #14]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d002      	beq.n	8003b04 <HAL_CAN_ResetError+0x20>
 8003afe:	7bbb      	ldrb	r3, [r7, #14]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d103      	bne.n	8003b0c <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
 8003b0a:	e007      	b.n	8003b1c <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <__NVIC_SetPriorityGrouping+0x44>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b5e:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <__NVIC_SetPriorityGrouping+0x44>)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	60d3      	str	r3, [r2, #12]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <__NVIC_GetPriorityGrouping+0x18>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	0a1b      	lsrs	r3, r3, #8
 8003b7e:	f003 0307 	and.w	r3, r3, #7
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	db0b      	blt.n	8003bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	f003 021f 	and.w	r2, r3, #31
 8003ba8:	4907      	ldr	r1, [pc, #28]	; (8003bc8 <__NVIC_EnableIRQ+0x38>)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	6039      	str	r1, [r7, #0]
 8003bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	db0a      	blt.n	8003bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	490c      	ldr	r1, [pc, #48]	; (8003c18 <__NVIC_SetPriority+0x4c>)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	440b      	add	r3, r1
 8003bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf4:	e00a      	b.n	8003c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	4908      	ldr	r1, [pc, #32]	; (8003c1c <__NVIC_SetPriority+0x50>)
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	3b04      	subs	r3, #4
 8003c04:	0112      	lsls	r2, r2, #4
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	440b      	add	r3, r1
 8003c0a:	761a      	strb	r2, [r3, #24]
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000e100 	.word	0xe000e100
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f1c3 0307 	rsb	r3, r3, #7
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	bf28      	it	cs
 8003c3e:	2304      	movcs	r3, #4
 8003c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3304      	adds	r3, #4
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d902      	bls.n	8003c50 <NVIC_EncodePriority+0x30>
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3b03      	subs	r3, #3
 8003c4e:	e000      	b.n	8003c52 <NVIC_EncodePriority+0x32>
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	401a      	ands	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c68:	f04f 31ff 	mov.w	r1, #4294967295
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	43d9      	mvns	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	4313      	orrs	r3, r2
         );
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3724      	adds	r7, #36	; 0x24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c98:	d301      	bcc.n	8003c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e00f      	b.n	8003cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <SysTick_Config+0x40>)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ca6:	210f      	movs	r1, #15
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	f7ff ff8e 	bl	8003bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <SysTick_Config+0x40>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <SysTick_Config+0x40>)
 8003cb8:	2207      	movs	r2, #7
 8003cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	e000e010 	.word	0xe000e010

08003ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ff29 	bl	8003b2c <__NVIC_SetPriorityGrouping>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	4603      	mov	r3, r0
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf4:	f7ff ff3e 	bl	8003b74 <__NVIC_GetPriorityGrouping>
 8003cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	6978      	ldr	r0, [r7, #20]
 8003d00:	f7ff ff8e 	bl	8003c20 <NVIC_EncodePriority>
 8003d04:	4602      	mov	r2, r0
 8003d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff5d 	bl	8003bcc <__NVIC_SetPriority>
}
 8003d12:	bf00      	nop
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	4603      	mov	r3, r0
 8003d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff31 	bl	8003b90 <__NVIC_EnableIRQ>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ffa2 	bl	8003c88 <SysTick_Config>
 8003d44:	4603      	mov	r3, r0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d5e:	e154      	b.n	800400a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2101      	movs	r1, #1
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8146 	beq.w	8004004 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d005      	beq.n	8003d90 <HAL_GPIO_Init+0x40>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d130      	bne.n	8003df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 0201 	and.w	r2, r3, #1
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d017      	beq.n	8003e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2203      	movs	r2, #3
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d123      	bne.n	8003e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	08da      	lsrs	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3208      	adds	r2, #8
 8003e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	220f      	movs	r2, #15
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	08da      	lsrs	r2, r3, #3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3208      	adds	r2, #8
 8003e7c:	6939      	ldr	r1, [r7, #16]
 8003e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 0203 	and.w	r2, r3, #3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80a0 	beq.w	8004004 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec4:	4b58      	ldr	r3, [pc, #352]	; (8004028 <HAL_GPIO_Init+0x2d8>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4a57      	ldr	r2, [pc, #348]	; (8004028 <HAL_GPIO_Init+0x2d8>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6193      	str	r3, [r2, #24]
 8003ed0:	4b55      	ldr	r3, [pc, #340]	; (8004028 <HAL_GPIO_Init+0x2d8>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003edc:	4a53      	ldr	r2, [pc, #332]	; (800402c <HAL_GPIO_Init+0x2dc>)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	220f      	movs	r2, #15
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f06:	d019      	beq.n	8003f3c <HAL_GPIO_Init+0x1ec>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a49      	ldr	r2, [pc, #292]	; (8004030 <HAL_GPIO_Init+0x2e0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d013      	beq.n	8003f38 <HAL_GPIO_Init+0x1e8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a48      	ldr	r2, [pc, #288]	; (8004034 <HAL_GPIO_Init+0x2e4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00d      	beq.n	8003f34 <HAL_GPIO_Init+0x1e4>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a47      	ldr	r2, [pc, #284]	; (8004038 <HAL_GPIO_Init+0x2e8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <HAL_GPIO_Init+0x1e0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a46      	ldr	r2, [pc, #280]	; (800403c <HAL_GPIO_Init+0x2ec>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d101      	bne.n	8003f2c <HAL_GPIO_Init+0x1dc>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	e008      	b.n	8003f3e <HAL_GPIO_Init+0x1ee>
 8003f2c:	2305      	movs	r3, #5
 8003f2e:	e006      	b.n	8003f3e <HAL_GPIO_Init+0x1ee>
 8003f30:	2303      	movs	r3, #3
 8003f32:	e004      	b.n	8003f3e <HAL_GPIO_Init+0x1ee>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e002      	b.n	8003f3e <HAL_GPIO_Init+0x1ee>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <HAL_GPIO_Init+0x1ee>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	f002 0203 	and.w	r2, r2, #3
 8003f44:	0092      	lsls	r2, r2, #2
 8003f46:	4093      	lsls	r3, r2
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f4e:	4937      	ldr	r1, [pc, #220]	; (800402c <HAL_GPIO_Init+0x2dc>)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	3302      	adds	r3, #2
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f5c:	4b38      	ldr	r3, [pc, #224]	; (8004040 <HAL_GPIO_Init+0x2f0>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f80:	4a2f      	ldr	r2, [pc, #188]	; (8004040 <HAL_GPIO_Init+0x2f0>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f86:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <HAL_GPIO_Init+0x2f0>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003faa:	4a25      	ldr	r2, [pc, #148]	; (8004040 <HAL_GPIO_Init+0x2f0>)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fb0:	4b23      	ldr	r3, [pc, #140]	; (8004040 <HAL_GPIO_Init+0x2f0>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003fd4:	4a1a      	ldr	r2, [pc, #104]	; (8004040 <HAL_GPIO_Init+0x2f0>)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fda:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_GPIO_Init+0x2f0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ffe:	4a10      	ldr	r2, [pc, #64]	; (8004040 <HAL_GPIO_Init+0x2f0>)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3301      	adds	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f aea3 	bne.w	8003d60 <HAL_GPIO_Init+0x10>
  }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40021000 	.word	0x40021000
 800402c:	40010000 	.word	0x40010000
 8004030:	48000400 	.word	0x48000400
 8004034:	48000800 	.word	0x48000800
 8004038:	48000c00 	.word	0x48000c00
 800403c:	48001000 	.word	0x48001000
 8004040:	40010400 	.word	0x40010400

08004044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	e001      	b.n	8004066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
 8004080:	4613      	mov	r3, r2
 8004082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004084:	787b      	ldrb	r3, [r7, #1]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004090:	e002      	b.n	8004098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004092:	887a      	ldrh	r2, [r7, #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4013      	ands	r3, r2
 80040bc:	041a      	lsls	r2, r3, #16
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	43d9      	mvns	r1, r3
 80040c2:	887b      	ldrh	r3, [r7, #2]
 80040c4:	400b      	ands	r3, r1
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	619a      	str	r2, [r3, #24]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e08f      	b.n	800420e <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d101      	bne.n	80040fe <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e087      	b.n	800420e <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d101      	bne.n	800410e <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e07f      	b.n	800420e <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004114:	4b40      	ldr	r3, [pc, #256]	; (8004218 <HAL_OPAMP_Init+0x140>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	4a3f      	ldr	r2, [pc, #252]	; (8004218 <HAL_OPAMP_Init+0x140>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6193      	str	r3, [r2, #24]
 8004120:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <HAL_OPAMP_Init+0x140>)
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d103      	bne.n	8004140 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7fc ffbf 	bl	80010c4 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d003      	beq.n	8004156 <HAL_OPAMP_Init+0x7e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b60      	cmp	r3, #96	; 0x60
 8004154:	d125      	bne.n	80041a2 <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4b2f      	ldr	r3, [pc, #188]	; (800421c <HAL_OPAMP_Init+0x144>)
 800415e:	4013      	ands	r3, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6851      	ldr	r1, [r2, #4]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68d2      	ldr	r2, [r2, #12]
 8004168:	4311      	orrs	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6912      	ldr	r2, [r2, #16]
 800416e:	4311      	orrs	r1, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6992      	ldr	r2, [r2, #24]
 8004174:	4311      	orrs	r1, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	69d2      	ldr	r2, [r2, #28]
 800417a:	4311      	orrs	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6a12      	ldr	r2, [r2, #32]
 8004180:	4311      	orrs	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800418c:	04d2      	lsls	r2, r2, #19
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004194:	0612      	lsls	r2, r2, #24
 8004196:	4311      	orrs	r1, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	430b      	orrs	r3, r1
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e02a      	b.n	80041f8 <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <HAL_OPAMP_Init+0x144>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6851      	ldr	r1, [r2, #4]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6892      	ldr	r2, [r2, #8]
 80041b4:	4311      	orrs	r1, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	68d2      	ldr	r2, [r2, #12]
 80041ba:	4311      	orrs	r1, r2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6912      	ldr	r2, [r2, #16]
 80041c0:	4311      	orrs	r1, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6952      	ldr	r2, [r2, #20]
 80041c6:	4311      	orrs	r1, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6992      	ldr	r2, [r2, #24]
 80041cc:	4311      	orrs	r1, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	69d2      	ldr	r2, [r2, #28]
 80041d2:	4311      	orrs	r1, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6a12      	ldr	r2, [r2, #32]
 80041d8:	4311      	orrs	r1, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041de:	4311      	orrs	r1, r2
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041e4:	04d2      	lsls	r2, r2, #19
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041ec:	0612      	lsls	r2, r2, #24
 80041ee:	4311      	orrs	r1, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	e0003811 	.word	0xe0003811

08004220 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	e01d      	b.n	8004274 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b05      	cmp	r3, #5
 8004242:	d102      	bne.n	800424a <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e014      	b.n	8004274 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d10c      	bne.n	8004270 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2204      	movs	r2, #4
 800426a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800426e:	e001      	b.n	8004274 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8004274:	7bfb      	ldrb	r3, [r7, #15]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800428a:	af00      	add	r7, sp, #0
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004294:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f001 b823 	b.w	80052f0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 817d 	beq.w	80045ba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80042c0:	4bbc      	ldr	r3, [pc, #752]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d00c      	beq.n	80042e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042cc:	4bb9      	ldr	r3, [pc, #740]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d15c      	bne.n	8004392 <HAL_RCC_OscConfig+0x10e>
 80042d8:	4bb6      	ldr	r3, [pc, #728]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d155      	bne.n	8004392 <HAL_RCC_OscConfig+0x10e>
 80042e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d102      	bne.n	8004318 <HAL_RCC_OscConfig+0x94>
 8004312:	4ba8      	ldr	r3, [pc, #672]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	e015      	b.n	8004344 <HAL_RCC_OscConfig+0xc0>
 8004318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800431c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004324:	fa93 f3a3 	rbit	r3, r3
 8004328:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800432c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004330:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004334:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004338:	fa93 f3a3 	rbit	r3, r3
 800433c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004340:	4b9c      	ldr	r3, [pc, #624]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004348:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800434c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004350:	fa92 f2a2 	rbit	r2, r2
 8004354:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004358:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800435c:	fab2 f282 	clz	r2, r2
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	f042 0220 	orr.w	r2, r2, #32
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	f002 021f 	and.w	r2, r2, #31
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 811f 	beq.w	80045b8 <HAL_RCC_OscConfig+0x334>
 800437a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f040 8116 	bne.w	80045b8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f000 bfaf 	b.w	80052f0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004396:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a2:	d106      	bne.n	80043b2 <HAL_RCC_OscConfig+0x12e>
 80043a4:	4b83      	ldr	r3, [pc, #524]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a82      	ldr	r2, [pc, #520]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80043aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	e036      	b.n	8004420 <HAL_RCC_OscConfig+0x19c>
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <HAL_RCC_OscConfig+0x158>
 80043c2:	4b7c      	ldr	r3, [pc, #496]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a7b      	ldr	r2, [pc, #492]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	4b79      	ldr	r3, [pc, #484]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a78      	ldr	r2, [pc, #480]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80043d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	e021      	b.n	8004420 <HAL_RCC_OscConfig+0x19c>
 80043dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x184>
 80043ee:	4b71      	ldr	r3, [pc, #452]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a70      	ldr	r2, [pc, #448]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b6e      	ldr	r3, [pc, #440]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6d      	ldr	r2, [pc, #436]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0x19c>
 8004408:	4b6a      	ldr	r3, [pc, #424]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b67      	ldr	r3, [pc, #412]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a66      	ldr	r2, [pc, #408]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004420:	4b64      	ldr	r3, [pc, #400]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	f023 020f 	bic.w	r2, r3, #15
 8004428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	495f      	ldr	r1, [pc, #380]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 8004436:	4313      	orrs	r3, r2
 8004438:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800443a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d059      	beq.n	80044fe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fd fa73 	bl	8001934 <HAL_GetTick>
 800444e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fd fa6e 	bl	8001934 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b64      	cmp	r3, #100	; 0x64
 8004462:	d902      	bls.n	800446a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	f000 bf43 	b.w	80052f0 <HAL_RCC_OscConfig+0x106c>
 800446a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800446e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800447e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	fab3 f383 	clz	r3, r3
 8004486:	b2db      	uxtb	r3, r3
 8004488:	095b      	lsrs	r3, r3, #5
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b01      	cmp	r3, #1
 8004494:	d102      	bne.n	800449c <HAL_RCC_OscConfig+0x218>
 8004496:	4b47      	ldr	r3, [pc, #284]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	e015      	b.n	80044c8 <HAL_RCC_OscConfig+0x244>
 800449c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044a0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80044b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80044b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80044c4:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044cc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80044d0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80044d4:	fa92 f2a2 	rbit	r2, r2
 80044d8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80044dc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80044e0:	fab2 f282 	clz	r2, r2
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	f042 0220 	orr.w	r2, r2, #32
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	f002 021f 	and.w	r2, r2, #31
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0ab      	beq.n	8004454 <HAL_RCC_OscConfig+0x1d0>
 80044fc:	e05d      	b.n	80045ba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fd fa19 	bl	8001934 <HAL_GetTick>
 8004502:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004506:	e00a      	b.n	800451e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004508:	f7fd fa14 	bl	8001934 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	; 0x64
 8004516:	d902      	bls.n	800451e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	f000 bee9 	b.w	80052f0 <HAL_RCC_OscConfig+0x106c>
 800451e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004522:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004532:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004536:	fab3 f383 	clz	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b01      	cmp	r3, #1
 8004548:	d102      	bne.n	8004550 <HAL_RCC_OscConfig+0x2cc>
 800454a:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	e015      	b.n	800457c <HAL_RCC_OscConfig+0x2f8>
 8004550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004554:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800455c:	fa93 f3a3 	rbit	r3, r3
 8004560:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004568:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800456c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <HAL_RCC_OscConfig+0x330>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004580:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004584:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004588:	fa92 f2a2 	rbit	r2, r2
 800458c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004590:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004594:	fab2 f282 	clz	r2, r2
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	f042 0220 	orr.w	r2, r2, #32
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	f002 021f 	and.w	r2, r2, #31
 80045a4:	2101      	movs	r1, #1
 80045a6:	fa01 f202 	lsl.w	r2, r1, r2
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ab      	bne.n	8004508 <HAL_RCC_OscConfig+0x284>
 80045b0:	e003      	b.n	80045ba <HAL_RCC_OscConfig+0x336>
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 817d 	beq.w	80048ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045d0:	4ba6      	ldr	r3, [pc, #664]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 030c 	and.w	r3, r3, #12
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00b      	beq.n	80045f4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045dc:	4ba3      	ldr	r3, [pc, #652]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d172      	bne.n	80046ce <HAL_RCC_OscConfig+0x44a>
 80045e8:	4ba0      	ldr	r3, [pc, #640]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d16c      	bne.n	80046ce <HAL_RCC_OscConfig+0x44a>
 80045f4:	2302      	movs	r3, #2
 80045f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004606:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d102      	bne.n	8004624 <HAL_RCC_OscConfig+0x3a0>
 800461e:	4b93      	ldr	r3, [pc, #588]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	e013      	b.n	800464c <HAL_RCC_OscConfig+0x3c8>
 8004624:	2302      	movs	r3, #2
 8004626:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004636:	2302      	movs	r3, #2
 8004638:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800463c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004648:	4b88      	ldr	r3, [pc, #544]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	2202      	movs	r2, #2
 800464e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004652:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004656:	fa92 f2a2 	rbit	r2, r2
 800465a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800465e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004662:	fab2 f282 	clz	r2, r2
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	f042 0220 	orr.w	r2, r2, #32
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	f002 021f 	and.w	r2, r2, #31
 8004672:	2101      	movs	r1, #1
 8004674:	fa01 f202 	lsl.w	r2, r1, r2
 8004678:	4013      	ands	r3, r2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCC_OscConfig+0x410>
 800467e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004682:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d002      	beq.n	8004694 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f000 be2e 	b.w	80052f0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b75      	ldr	r3, [pc, #468]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	21f8      	movs	r1, #248	; 0xf8
 80046aa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80046b2:	fa91 f1a1 	rbit	r1, r1
 80046b6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80046ba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80046be:	fab1 f181 	clz	r1, r1
 80046c2:	b2c9      	uxtb	r1, r1
 80046c4:	408b      	lsls	r3, r1
 80046c6:	4969      	ldr	r1, [pc, #420]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046cc:	e0fd      	b.n	80048ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 8088 	beq.w	80047f0 <HAL_RCC_OscConfig+0x56c>
 80046e0:	2301      	movs	r3, #1
 80046e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80046f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f6:	fab3 f383 	clz	r3, r3
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004700:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	461a      	mov	r2, r3
 8004708:	2301      	movs	r3, #1
 800470a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470c:	f7fd f912 	bl	8001934 <HAL_GetTick>
 8004710:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	e00a      	b.n	800472c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004716:	f7fd f90d 	bl	8001934 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d902      	bls.n	800472c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	f000 bde2 	b.w	80052f0 <HAL_RCC_OscConfig+0x106c>
 800472c:	2302      	movs	r3, #2
 800472e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004736:	fa93 f3a3 	rbit	r3, r3
 800473a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800473e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004742:	fab3 f383 	clz	r3, r3
 8004746:	b2db      	uxtb	r3, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d102      	bne.n	800475c <HAL_RCC_OscConfig+0x4d8>
 8004756:	4b45      	ldr	r3, [pc, #276]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	e013      	b.n	8004784 <HAL_RCC_OscConfig+0x500>
 800475c:	2302      	movs	r3, #2
 800475e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800476e:	2302      	movs	r3, #2
 8004770:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004774:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004778:	fa93 f3a3 	rbit	r3, r3
 800477c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004780:	4b3a      	ldr	r3, [pc, #232]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	2202      	movs	r2, #2
 8004786:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800478a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800478e:	fa92 f2a2 	rbit	r2, r2
 8004792:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004796:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800479a:	fab2 f282 	clz	r2, r2
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	f042 0220 	orr.w	r2, r2, #32
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	f002 021f 	and.w	r2, r2, #31
 80047aa:	2101      	movs	r1, #1
 80047ac:	fa01 f202 	lsl.w	r2, r1, r2
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0af      	beq.n	8004716 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b6:	4b2d      	ldr	r3, [pc, #180]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	21f8      	movs	r1, #248	; 0xf8
 80047cc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80047d4:	fa91 f1a1 	rbit	r1, r1
 80047d8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80047dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80047e0:	fab1 f181 	clz	r1, r1
 80047e4:	b2c9      	uxtb	r1, r1
 80047e6:	408b      	lsls	r3, r1
 80047e8:	4920      	ldr	r1, [pc, #128]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]
 80047ee:	e06c      	b.n	80048ca <HAL_RCC_OscConfig+0x646>
 80047f0:	2301      	movs	r3, #1
 80047f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004802:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004810:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	461a      	mov	r2, r3
 8004818:	2300      	movs	r3, #0
 800481a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7fd f88a 	bl	8001934 <HAL_GetTick>
 8004820:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004824:	e00a      	b.n	800483c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004826:	f7fd f885 	bl	8001934 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d902      	bls.n	800483c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	f000 bd5a 	b.w	80052f0 <HAL_RCC_OscConfig+0x106c>
 800483c:	2302      	movs	r3, #2
 800483e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004846:	fa93 f3a3 	rbit	r3, r3
 800484a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800484e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	d104      	bne.n	8004870 <HAL_RCC_OscConfig+0x5ec>
 8004866:	4b01      	ldr	r3, [pc, #4]	; (800486c <HAL_RCC_OscConfig+0x5e8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	e015      	b.n	8004898 <HAL_RCC_OscConfig+0x614>
 800486c:	40021000 	.word	0x40021000
 8004870:	2302      	movs	r3, #2
 8004872:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004882:	2302      	movs	r3, #2
 8004884:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004888:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004894:	4bc8      	ldr	r3, [pc, #800]	; (8004bb8 <HAL_RCC_OscConfig+0x934>)
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	2202      	movs	r2, #2
 800489a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800489e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80048a2:	fa92 f2a2 	rbit	r2, r2
 80048a6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80048aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80048ae:	fab2 f282 	clz	r2, r2
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	f042 0220 	orr.w	r2, r2, #32
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	f002 021f 	and.w	r2, r2, #31
 80048be:	2101      	movs	r1, #1
 80048c0:	fa01 f202 	lsl.w	r2, r1, r2
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1ad      	bne.n	8004826 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8110 	beq.w	8004b00 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d079      	beq.n	80049e4 <HAL_RCC_OscConfig+0x760>
 80048f0:	2301      	movs	r3, #1
 80048f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	4bab      	ldr	r3, [pc, #684]	; (8004bbc <HAL_RCC_OscConfig+0x938>)
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	461a      	mov	r2, r3
 8004916:	2301      	movs	r3, #1
 8004918:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800491a:	f7fd f80b 	bl	8001934 <HAL_GetTick>
 800491e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004922:	e00a      	b.n	800493a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004924:	f7fd f806 	bl	8001934 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d902      	bls.n	800493a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	f000 bcdb 	b.w	80052f0 <HAL_RCC_OscConfig+0x106c>
 800493a:	2302      	movs	r3, #2
 800493c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004954:	2202      	movs	r2, #2
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	fa93 f2a3 	rbit	r2, r3
 8004966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004978:	2202      	movs	r2, #2
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	fa93 f2a3 	rbit	r2, r3
 800498a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004992:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004994:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCC_OscConfig+0x934>)
 8004996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049a0:	2102      	movs	r1, #2
 80049a2:	6019      	str	r1, [r3, #0]
 80049a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	fa93 f1a3 	rbit	r1, r3
 80049b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049ba:	6019      	str	r1, [r3, #0]
  return result;
 80049bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	fab3 f383 	clz	r3, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0a0      	beq.n	8004924 <HAL_RCC_OscConfig+0x6a0>
 80049e2:	e08d      	b.n	8004b00 <HAL_RCC_OscConfig+0x87c>
 80049e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049ec:	2201      	movs	r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	fa93 f2a3 	rbit	r2, r3
 80049fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a06:	601a      	str	r2, [r3, #0]
  return result;
 8004a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a10:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_OscConfig+0x938>)
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	461a      	mov	r2, r3
 8004a22:	2300      	movs	r3, #0
 8004a24:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a26:	f7fc ff85 	bl	8001934 <HAL_GetTick>
 8004a2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a30:	f7fc ff80 	bl	8001934 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d902      	bls.n	8004a46 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	f000 bc55 	b.w	80052f0 <HAL_RCC_OscConfig+0x106c>
 8004a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a4e:	2202      	movs	r2, #2
 8004a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	fa93 f2a3 	rbit	r2, r3
 8004a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a72:	2202      	movs	r2, #2
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	fa93 f2a3 	rbit	r2, r3
 8004a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a96:	2202      	movs	r2, #2
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	fa93 f2a3 	rbit	r2, r3
 8004aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004ab0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab2:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <HAL_RCC_OscConfig+0x934>)
 8004ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004abe:	2102      	movs	r1, #2
 8004ac0:	6019      	str	r1, [r3, #0]
 8004ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	fa93 f1a3 	rbit	r1, r3
 8004ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004ad8:	6019      	str	r1, [r3, #0]
  return result;
 8004ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ade:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	2101      	movs	r1, #1
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d197      	bne.n	8004a30 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 81a1 	beq.w	8004e58 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1c:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <HAL_RCC_OscConfig+0x934>)
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d116      	bne.n	8004b56 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b28:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <HAL_RCC_OscConfig+0x934>)
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	4a22      	ldr	r2, [pc, #136]	; (8004bb8 <HAL_RCC_OscConfig+0x934>)
 8004b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b32:	61d3      	str	r3, [r2, #28]
 8004b34:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <HAL_RCC_OscConfig+0x934>)
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b40:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b4e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004b50:	2301      	movs	r3, #1
 8004b52:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <HAL_RCC_OscConfig+0x93c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d11a      	bne.n	8004b98 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <HAL_RCC_OscConfig+0x93c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a16      	ldr	r2, [pc, #88]	; (8004bc0 <HAL_RCC_OscConfig+0x93c>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6e:	f7fc fee1 	bl	8001934 <HAL_GetTick>
 8004b72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b76:	e009      	b.n	8004b8c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b78:	f7fc fedc 	bl	8001934 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b64      	cmp	r3, #100	; 0x64
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e3b1      	b.n	80052f0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <HAL_RCC_OscConfig+0x93c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ef      	beq.n	8004b78 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d10d      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x940>
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <HAL_RCC_OscConfig+0x934>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	4a02      	ldr	r2, [pc, #8]	; (8004bb8 <HAL_RCC_OscConfig+0x934>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6213      	str	r3, [r2, #32]
 8004bb4:	e03c      	b.n	8004c30 <HAL_RCC_OscConfig+0x9ac>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	10908120 	.word	0x10908120
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10c      	bne.n	8004bee <HAL_RCC_OscConfig+0x96a>
 8004bd4:	4bc1      	ldr	r3, [pc, #772]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4ac0      	ldr	r2, [pc, #768]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	6213      	str	r3, [r2, #32]
 8004be0:	4bbe      	ldr	r3, [pc, #760]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	4abd      	ldr	r2, [pc, #756]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004be6:	f023 0304 	bic.w	r3, r3, #4
 8004bea:	6213      	str	r3, [r2, #32]
 8004bec:	e020      	b.n	8004c30 <HAL_RCC_OscConfig+0x9ac>
 8004bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x994>
 8004bfe:	4bb7      	ldr	r3, [pc, #732]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	4ab6      	ldr	r2, [pc, #728]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004c04:	f043 0304 	orr.w	r3, r3, #4
 8004c08:	6213      	str	r3, [r2, #32]
 8004c0a:	4bb4      	ldr	r3, [pc, #720]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	4ab3      	ldr	r2, [pc, #716]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	6213      	str	r3, [r2, #32]
 8004c16:	e00b      	b.n	8004c30 <HAL_RCC_OscConfig+0x9ac>
 8004c18:	4bb0      	ldr	r3, [pc, #704]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	4aaf      	ldr	r2, [pc, #700]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	6213      	str	r3, [r2, #32]
 8004c24:	4bad      	ldr	r3, [pc, #692]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	4aac      	ldr	r2, [pc, #688]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004c2a:	f023 0304 	bic.w	r3, r3, #4
 8004c2e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8081 	beq.w	8004d44 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c42:	f7fc fe77 	bl	8001934 <HAL_GetTick>
 8004c46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	e00b      	b.n	8004c64 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c4c:	f7fc fe72 	bl	8001934 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e345      	b.n	80052f0 <HAL_RCC_OscConfig+0x106c>
 8004c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c68:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	fa93 f2a3 	rbit	r2, r3
 8004c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c8c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c90:	2202      	movs	r2, #2
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	fa93 f2a3 	rbit	r2, r3
 8004ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004caa:	601a      	str	r2, [r3, #0]
  return result;
 8004cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004cb4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb6:	fab3 f383 	clz	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d102      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xa4c>
 8004cca:	4b84      	ldr	r3, [pc, #528]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	e013      	b.n	8004cf8 <HAL_RCC_OscConfig+0xa74>
 8004cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004cd8:	2202      	movs	r2, #2
 8004cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	fa93 f2a3 	rbit	r2, r3
 8004cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	4b79      	ldr	r3, [pc, #484]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cfc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d00:	2102      	movs	r1, #2
 8004d02:	6011      	str	r1, [r2, #0]
 8004d04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d08:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	fa92 f1a2 	rbit	r1, r2
 8004d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d16:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d1a:	6011      	str	r1, [r2, #0]
  return result;
 8004d1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d20:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	fab2 f282 	clz	r2, r2
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	f002 021f 	and.w	r2, r2, #31
 8004d36:	2101      	movs	r1, #1
 8004d38:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d084      	beq.n	8004c4c <HAL_RCC_OscConfig+0x9c8>
 8004d42:	e07f      	b.n	8004e44 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d44:	f7fc fdf6 	bl	8001934 <HAL_GetTick>
 8004d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d4c:	e00b      	b.n	8004d66 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fc fdf1 	bl	8001934 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e2c4      	b.n	80052f0 <HAL_RCC_OscConfig+0x106c>
 8004d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d6e:	2202      	movs	r2, #2
 8004d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d76:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	fa93 f2a3 	rbit	r2, r3
 8004d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d84:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d92:	2202      	movs	r2, #2
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	fa93 f2a3 	rbit	r2, r3
 8004da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004dac:	601a      	str	r2, [r3, #0]
  return result;
 8004dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004db6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db8:	fab3 f383 	clz	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	f043 0302 	orr.w	r3, r3, #2
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d102      	bne.n	8004dd2 <HAL_RCC_OscConfig+0xb4e>
 8004dcc:	4b43      	ldr	r3, [pc, #268]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	e013      	b.n	8004dfa <HAL_RCC_OscConfig+0xb76>
 8004dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004dda:	2202      	movs	r2, #2
 8004ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	fa93 f2a3 	rbit	r2, r3
 8004dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	4b39      	ldr	r3, [pc, #228]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dfe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e02:	2102      	movs	r1, #2
 8004e04:	6011      	str	r1, [r2, #0]
 8004e06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e0a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	fa92 f1a2 	rbit	r1, r2
 8004e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e18:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e1c:	6011      	str	r1, [r2, #0]
  return result;
 8004e1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e22:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	fab2 f282 	clz	r2, r2
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	f002 021f 	and.w	r2, r2, #31
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d184      	bne.n	8004d4e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e44:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4c:	4b23      	ldr	r3, [pc, #140]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	4a22      	ldr	r2, [pc, #136]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e56:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8242 	beq.w	80052ee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e6a:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <HAL_RCC_OscConfig+0xc58>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	f000 8213 	beq.w	800529e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	f040 8162 	bne.w	800514e <HAL_RCC_OscConfig+0xeca>
 8004e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e9c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	fa93 f2a3 	rbit	r2, r3
 8004ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eaa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004eae:	601a      	str	r2, [r3, #0]
  return result;
 8004eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004eb8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eba:	fab3 f383 	clz	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ec4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed0:	f7fc fd30 	bl	8001934 <HAL_GetTick>
 8004ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed8:	e00c      	b.n	8004ef4 <HAL_RCC_OscConfig+0xc70>
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fc fd28 	bl	8001934 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1fd      	b.n	80052f0 <HAL_RCC_OscConfig+0x106c>
 8004ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004efc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f06:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	fa93 f2a3 	rbit	r2, r3
 8004f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f14:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f18:	601a      	str	r2, [r3, #0]
  return result;
 8004f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f24:	fab3 f383 	clz	r3, r3
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d102      	bne.n	8004f3e <HAL_RCC_OscConfig+0xcba>
 8004f38:	4bb0      	ldr	r3, [pc, #704]	; (80051fc <HAL_RCC_OscConfig+0xf78>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	e027      	b.n	8004f8e <HAL_RCC_OscConfig+0xd0a>
 8004f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f42:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004f46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f50:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	fa93 f2a3 	rbit	r2, r3
 8004f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f68:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fa93 f2a3 	rbit	r2, r3
 8004f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f84:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	4b9c      	ldr	r3, [pc, #624]	; (80051fc <HAL_RCC_OscConfig+0xf78>)
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f92:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f96:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f9a:	6011      	str	r1, [r2, #0]
 8004f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fa0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	fa92 f1a2 	rbit	r1, r2
 8004faa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004fb2:	6011      	str	r1, [r2, #0]
  return result;
 8004fb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fb8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	fab2 f282 	clz	r2, r2
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	f042 0220 	orr.w	r2, r2, #32
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	f002 021f 	and.w	r2, r2, #31
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d182      	bne.n	8004ee0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fda:	4b88      	ldr	r3, [pc, #544]	; (80051fc <HAL_RCC_OscConfig+0xf78>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	497f      	ldr	r1, [pc, #508]	; (80051fc <HAL_RCC_OscConfig+0xf78>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	604b      	str	r3, [r1, #4]
 8005002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005006:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800500a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800500e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005014:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	fa93 f2a3 	rbit	r2, r3
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005026:	601a      	str	r2, [r3, #0]
  return result;
 8005028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005030:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005032:	fab3 f383 	clz	r3, r3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800503c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	461a      	mov	r2, r3
 8005044:	2301      	movs	r3, #1
 8005046:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005048:	f7fc fc74 	bl	8001934 <HAL_GetTick>
 800504c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005050:	e009      	b.n	8005066 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005052:	f7fc fc6f 	bl	8001934 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e144      	b.n	80052f0 <HAL_RCC_OscConfig+0x106c>
 8005066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800506e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	fa93 f2a3 	rbit	r2, r3
 8005082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005086:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800508a:	601a      	str	r2, [r3, #0]
  return result;
 800508c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005090:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005094:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d102      	bne.n	80050b0 <HAL_RCC_OscConfig+0xe2c>
 80050aa:	4b54      	ldr	r3, [pc, #336]	; (80051fc <HAL_RCC_OscConfig+0xf78>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	e027      	b.n	8005100 <HAL_RCC_OscConfig+0xe7c>
 80050b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80050b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	fa93 f2a3 	rbit	r2, r3
 80050cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80050de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	fa93 f2a3 	rbit	r2, r3
 80050f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	4b3f      	ldr	r3, [pc, #252]	; (80051fc <HAL_RCC_OscConfig+0xf78>)
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005104:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005108:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800510c:	6011      	str	r1, [r2, #0]
 800510e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005112:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	fa92 f1a2 	rbit	r1, r2
 800511c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005120:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005124:	6011      	str	r1, [r2, #0]
  return result;
 8005126:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800512a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800512e:	6812      	ldr	r2, [r2, #0]
 8005130:	fab2 f282 	clz	r2, r2
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	f042 0220 	orr.w	r2, r2, #32
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	f002 021f 	and.w	r2, r2, #31
 8005140:	2101      	movs	r1, #1
 8005142:	fa01 f202 	lsl.w	r2, r1, r2
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d082      	beq.n	8005052 <HAL_RCC_OscConfig+0xdce>
 800514c:	e0cf      	b.n	80052ee <HAL_RCC_OscConfig+0x106a>
 800514e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005152:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005156:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800515a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005160:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	fa93 f2a3 	rbit	r2, r3
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005172:	601a      	str	r2, [r3, #0]
  return result;
 8005174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005178:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800517c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800517e:	fab3 f383 	clz	r3, r3
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005188:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	461a      	mov	r2, r3
 8005190:	2300      	movs	r3, #0
 8005192:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005194:	f7fc fbce 	bl	8001934 <HAL_GetTick>
 8005198:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800519c:	e009      	b.n	80051b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800519e:	f7fc fbc9 	bl	8001934 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e09e      	b.n	80052f0 <HAL_RCC_OscConfig+0x106c>
 80051b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80051ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	fa93 f2a3 	rbit	r2, r3
 80051ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80051d6:	601a      	str	r2, [r3, #0]
  return result;
 80051d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80051e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e2:	fab3 f383 	clz	r3, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d104      	bne.n	8005200 <HAL_RCC_OscConfig+0xf7c>
 80051f6:	4b01      	ldr	r3, [pc, #4]	; (80051fc <HAL_RCC_OscConfig+0xf78>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	e029      	b.n	8005250 <HAL_RCC_OscConfig+0xfcc>
 80051fc:	40021000 	.word	0x40021000
 8005200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005204:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005208:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800520c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005212:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	fa93 f2a3 	rbit	r2, r3
 800521c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005220:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800522a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800522e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005238:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	fa93 f2a3 	rbit	r2, r3
 8005242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005246:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	4b2b      	ldr	r3, [pc, #172]	; (80052fc <HAL_RCC_OscConfig+0x1078>)
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005254:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005258:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800525c:	6011      	str	r1, [r2, #0]
 800525e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005262:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	fa92 f1a2 	rbit	r1, r2
 800526c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005270:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005274:	6011      	str	r1, [r2, #0]
  return result;
 8005276:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800527a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	fab2 f282 	clz	r2, r2
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	f042 0220 	orr.w	r2, r2, #32
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	f002 021f 	and.w	r2, r2, #31
 8005290:	2101      	movs	r1, #1
 8005292:	fa01 f202 	lsl.w	r2, r1, r2
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d180      	bne.n	800519e <HAL_RCC_OscConfig+0xf1a>
 800529c:	e027      	b.n	80052ee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800529e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e01e      	b.n	80052f0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_RCC_OscConfig+0x1078>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80052be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d10b      	bne.n	80052ea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80052d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80052d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d001      	beq.n	80052ee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40021000 	.word	0x40021000

08005300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b09e      	sub	sp, #120	; 0x78
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e162      	b.n	80055de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005318:	4b90      	ldr	r3, [pc, #576]	; (800555c <HAL_RCC_ClockConfig+0x25c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d910      	bls.n	8005348 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005326:	4b8d      	ldr	r3, [pc, #564]	; (800555c <HAL_RCC_ClockConfig+0x25c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f023 0207 	bic.w	r2, r3, #7
 800532e:	498b      	ldr	r1, [pc, #556]	; (800555c <HAL_RCC_ClockConfig+0x25c>)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	4313      	orrs	r3, r2
 8005334:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005336:	4b89      	ldr	r3, [pc, #548]	; (800555c <HAL_RCC_ClockConfig+0x25c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e14a      	b.n	80055de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b82      	ldr	r3, [pc, #520]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	497f      	ldr	r1, [pc, #508]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 80dc 	beq.w	800552c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d13c      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xf6>
 800537c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005380:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005384:	fa93 f3a3 	rbit	r3, r3
 8005388:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800538a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538c:	fab3 f383 	clz	r3, r3
 8005390:	b2db      	uxtb	r3, r3
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	d102      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xa6>
 80053a0:	4b6f      	ldr	r3, [pc, #444]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	e00f      	b.n	80053c6 <HAL_RCC_ClockConfig+0xc6>
 80053a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ae:	fa93 f3a3 	rbit	r3, r3
 80053b2:	667b      	str	r3, [r7, #100]	; 0x64
 80053b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053b8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053bc:	fa93 f3a3 	rbit	r3, r3
 80053c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c2:	4b67      	ldr	r3, [pc, #412]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80053cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053ce:	fa92 f2a2 	rbit	r2, r2
 80053d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80053d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053d6:	fab2 f282 	clz	r2, r2
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	f042 0220 	orr.w	r2, r2, #32
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	f002 021f 	and.w	r2, r2, #31
 80053e6:	2101      	movs	r1, #1
 80053e8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d17b      	bne.n	80054ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e0f3      	b.n	80055de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d13c      	bne.n	8005478 <HAL_RCC_ClockConfig+0x178>
 80053fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005402:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005406:	fa93 f3a3 	rbit	r3, r3
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800540c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540e:	fab3 f383 	clz	r3, r3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b01      	cmp	r3, #1
 8005420:	d102      	bne.n	8005428 <HAL_RCC_ClockConfig+0x128>
 8005422:	4b4f      	ldr	r3, [pc, #316]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	e00f      	b.n	8005448 <HAL_RCC_ClockConfig+0x148>
 8005428:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800542c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005430:	fa93 f3a3 	rbit	r3, r3
 8005434:	647b      	str	r3, [r7, #68]	; 0x44
 8005436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800543a:	643b      	str	r3, [r7, #64]	; 0x40
 800543c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543e:	fa93 f3a3 	rbit	r3, r3
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005444:	4b46      	ldr	r3, [pc, #280]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800544c:	63ba      	str	r2, [r7, #56]	; 0x38
 800544e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005450:	fa92 f2a2 	rbit	r2, r2
 8005454:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005458:	fab2 f282 	clz	r2, r2
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	f042 0220 	orr.w	r2, r2, #32
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	f002 021f 	and.w	r2, r2, #31
 8005468:	2101      	movs	r1, #1
 800546a:	fa01 f202 	lsl.w	r2, r1, r2
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d13a      	bne.n	80054ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e0b2      	b.n	80055de <HAL_RCC_ClockConfig+0x2de>
 8005478:	2302      	movs	r3, #2
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	fa93 f3a3 	rbit	r3, r3
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005486:	fab3 f383 	clz	r3, r3
 800548a:	b2db      	uxtb	r3, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x1a0>
 800549a:	4b31      	ldr	r3, [pc, #196]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	e00d      	b.n	80054bc <HAL_RCC_ClockConfig+0x1bc>
 80054a0:	2302      	movs	r3, #2
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	fa93 f3a3 	rbit	r3, r3
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
 80054ac:	2302      	movs	r3, #2
 80054ae:	623b      	str	r3, [r7, #32]
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	fa93 f3a3 	rbit	r3, r3
 80054b6:	61fb      	str	r3, [r7, #28]
 80054b8:	4b29      	ldr	r3, [pc, #164]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	2202      	movs	r2, #2
 80054be:	61ba      	str	r2, [r7, #24]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	fa92 f2a2 	rbit	r2, r2
 80054c6:	617a      	str	r2, [r7, #20]
  return result;
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	fab2 f282 	clz	r2, r2
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	f042 0220 	orr.w	r2, r2, #32
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	f002 021f 	and.w	r2, r2, #31
 80054da:	2101      	movs	r1, #1
 80054dc:	fa01 f202 	lsl.w	r2, r1, r2
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e079      	b.n	80055de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ea:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f023 0203 	bic.w	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	491a      	ldr	r1, [pc, #104]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054fc:	f7fc fa1a 	bl	8001934 <HAL_GetTick>
 8005500:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005502:	e00a      	b.n	800551a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005504:	f7fc fa16 	bl	8001934 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e061      	b.n	80055de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551a:	4b11      	ldr	r3, [pc, #68]	; (8005560 <HAL_RCC_ClockConfig+0x260>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 020c 	and.w	r2, r3, #12
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	429a      	cmp	r2, r3
 800552a:	d1eb      	bne.n	8005504 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <HAL_RCC_ClockConfig+0x25c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d214      	bcs.n	8005564 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <HAL_RCC_ClockConfig+0x25c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 0207 	bic.w	r2, r3, #7
 8005542:	4906      	ldr	r1, [pc, #24]	; (800555c <HAL_RCC_ClockConfig+0x25c>)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b04      	ldr	r3, [pc, #16]	; (800555c <HAL_RCC_ClockConfig+0x25c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e040      	b.n	80055de <HAL_RCC_ClockConfig+0x2de>
 800555c:	40022000 	.word	0x40022000
 8005560:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <HAL_RCC_ClockConfig+0x2e8>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	491a      	ldr	r1, [pc, #104]	; (80055e8 <HAL_RCC_ClockConfig+0x2e8>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800558e:	4b16      	ldr	r3, [pc, #88]	; (80055e8 <HAL_RCC_ClockConfig+0x2e8>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4912      	ldr	r1, [pc, #72]	; (80055e8 <HAL_RCC_ClockConfig+0x2e8>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055a2:	f000 f829 	bl	80055f8 <HAL_RCC_GetSysClockFreq>
 80055a6:	4601      	mov	r1, r0
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <HAL_RCC_ClockConfig+0x2e8>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055b0:	22f0      	movs	r2, #240	; 0xf0
 80055b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	fa92 f2a2 	rbit	r2, r2
 80055ba:	60fa      	str	r2, [r7, #12]
  return result;
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	fab2 f282 	clz	r2, r2
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	40d3      	lsrs	r3, r2
 80055c6:	4a09      	ldr	r2, [pc, #36]	; (80055ec <HAL_RCC_ClockConfig+0x2ec>)
 80055c8:	5cd3      	ldrb	r3, [r2, r3]
 80055ca:	fa21 f303 	lsr.w	r3, r1, r3
 80055ce:	4a08      	ldr	r2, [pc, #32]	; (80055f0 <HAL_RCC_ClockConfig+0x2f0>)
 80055d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <HAL_RCC_ClockConfig+0x2f4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fc f968 	bl	80018ac <HAL_InitTick>
  
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3778      	adds	r7, #120	; 0x78
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40021000 	.word	0x40021000
 80055ec:	08006050 	.word	0x08006050
 80055f0:	20000000 	.word	0x20000000
 80055f4:	20000004 	.word	0x20000004

080055f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b08b      	sub	sp, #44	; 0x2c
 80055fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	61fb      	str	r3, [r7, #28]
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	2300      	movs	r3, #0
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005612:	4b29      	ldr	r3, [pc, #164]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f003 030c 	and.w	r3, r3, #12
 800561e:	2b04      	cmp	r3, #4
 8005620:	d002      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x30>
 8005622:	2b08      	cmp	r3, #8
 8005624:	d003      	beq.n	800562e <HAL_RCC_GetSysClockFreq+0x36>
 8005626:	e03c      	b.n	80056a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800562a:	623b      	str	r3, [r7, #32]
      break;
 800562c:	e03c      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005634:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005638:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	fa92 f2a2 	rbit	r2, r2
 8005640:	607a      	str	r2, [r7, #4]
  return result;
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	fab2 f282 	clz	r2, r2
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	40d3      	lsrs	r3, r2
 800564c:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005652:	4b19      	ldr	r3, [pc, #100]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	220f      	movs	r2, #15
 800565c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	fa92 f2a2 	rbit	r2, r2
 8005664:	60fa      	str	r2, [r7, #12]
  return result;
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	fab2 f282 	clz	r2, r2
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	40d3      	lsrs	r3, r2
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005672:	5cd3      	ldrb	r3, [r2, r3]
 8005674:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005680:	4a0e      	ldr	r2, [pc, #56]	; (80056bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	fbb2 f2f3 	udiv	r2, r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
 8005690:	e004      	b.n	800569c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4a0c      	ldr	r2, [pc, #48]	; (80056c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	623b      	str	r3, [r7, #32]
      break;
 80056a0:	e002      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056a2:	4b0a      	ldr	r3, [pc, #40]	; (80056cc <HAL_RCC_GetSysClockFreq+0xd4>)
 80056a4:	623b      	str	r3, [r7, #32]
      break;
 80056a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056a8:	6a3b      	ldr	r3, [r7, #32]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	372c      	adds	r7, #44	; 0x2c
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	00f42400 	.word	0x00f42400
 80056c0:	08006060 	.word	0x08006060
 80056c4:	08006070 	.word	0x08006070
 80056c8:	003d0900 	.word	0x003d0900
 80056cc:	007a1200 	.word	0x007a1200

080056d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b092      	sub	sp, #72	; 0x48
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80d4 	beq.w	800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f4:	4b4e      	ldr	r3, [pc, #312]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10e      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005700:	4b4b      	ldr	r3, [pc, #300]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	4a4a      	ldr	r2, [pc, #296]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570a:	61d3      	str	r3, [r2, #28]
 800570c:	4b48      	ldr	r3, [pc, #288]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005718:	2301      	movs	r3, #1
 800571a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571e:	4b45      	ldr	r3, [pc, #276]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005726:	2b00      	cmp	r3, #0
 8005728:	d118      	bne.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572a:	4b42      	ldr	r3, [pc, #264]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a41      	ldr	r2, [pc, #260]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005734:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005736:	f7fc f8fd 	bl	8001934 <HAL_GetTick>
 800573a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573c:	e008      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573e:	f7fc f8f9 	bl	8001934 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b64      	cmp	r3, #100	; 0x64
 800574a:	d901      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e169      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005750:	4b38      	ldr	r3, [pc, #224]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800575c:	4b34      	ldr	r3, [pc, #208]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8084 	beq.w	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005778:	429a      	cmp	r2, r3
 800577a:	d07c      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800577c:	4b2c      	ldr	r3, [pc, #176]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800578a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	fa93 f3a3 	rbit	r3, r3
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005796:	fab3 f383 	clz	r3, r3
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	4b26      	ldr	r3, [pc, #152]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	461a      	mov	r2, r3
 80057a6:	2301      	movs	r3, #1
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	fa93 f3a3 	rbit	r3, r3
 80057b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ba:	fab3 f383 	clz	r3, r3
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	4b1d      	ldr	r3, [pc, #116]	; (8005838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	461a      	mov	r2, r3
 80057ca:	2300      	movs	r3, #0
 80057cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80057d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d04b      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057de:	f7fc f8a9 	bl	8001934 <HAL_GetTick>
 80057e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e4:	e00a      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fc f8a5 	bl	8001934 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e113      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80057fc:	2302      	movs	r3, #2
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	fa93 f3a3 	rbit	r3, r3
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	2302      	movs	r3, #2
 800580a:	623b      	str	r3, [r7, #32]
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	fa93 f3a3 	rbit	r3, r3
 8005812:	61fb      	str	r3, [r7, #28]
  return result;
 8005814:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005816:	fab3 f383 	clz	r3, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	b2db      	uxtb	r3, r3
 8005820:	f043 0302 	orr.w	r3, r3, #2
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d108      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800582a:	4b01      	ldr	r3, [pc, #4]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	e00d      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005830:	40021000 	.word	0x40021000
 8005834:	40007000 	.word	0x40007000
 8005838:	10908100 	.word	0x10908100
 800583c:	2302      	movs	r3, #2
 800583e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	fa93 f3a3 	rbit	r3, r3
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	4b78      	ldr	r3, [pc, #480]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	2202      	movs	r2, #2
 800584e:	613a      	str	r2, [r7, #16]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	fa92 f2a2 	rbit	r2, r2
 8005856:	60fa      	str	r2, [r7, #12]
  return result;
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	fab2 f282 	clz	r2, r2
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	f002 021f 	and.w	r2, r2, #31
 800586a:	2101      	movs	r1, #1
 800586c:	fa01 f202 	lsl.w	r2, r1, r2
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0b7      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005876:	4b6d      	ldr	r3, [pc, #436]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	496a      	ldr	r1, [pc, #424]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005884:	4313      	orrs	r3, r2
 8005886:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005888:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800588c:	2b01      	cmp	r3, #1
 800588e:	d105      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005890:	4b66      	ldr	r3, [pc, #408]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	4a65      	ldr	r2, [pc, #404]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800589a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058a8:	4b60      	ldr	r3, [pc, #384]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	f023 0203 	bic.w	r2, r3, #3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	495d      	ldr	r1, [pc, #372]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058c6:	4b59      	ldr	r3, [pc, #356]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	4956      	ldr	r1, [pc, #344]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058e4:	4b51      	ldr	r3, [pc, #324]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	494e      	ldr	r1, [pc, #312]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005902:	4b4a      	ldr	r3, [pc, #296]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f023 0210 	bic.w	r2, r3, #16
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	4947      	ldr	r1, [pc, #284]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005910:	4313      	orrs	r3, r2
 8005912:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005920:	4b42      	ldr	r3, [pc, #264]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	493f      	ldr	r1, [pc, #252]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f023 0220 	bic.w	r2, r3, #32
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	4938      	ldr	r1, [pc, #224]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800594c:	4313      	orrs	r3, r2
 800594e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800595c:	4b33      	ldr	r3, [pc, #204]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	4930      	ldr	r1, [pc, #192]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800596a:	4313      	orrs	r3, r2
 800596c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800597a:	4b2c      	ldr	r3, [pc, #176]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	4929      	ldr	r1, [pc, #164]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005988:	4313      	orrs	r3, r2
 800598a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005998:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	4921      	ldr	r1, [pc, #132]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059b6:	4b1d      	ldr	r3, [pc, #116]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	491a      	ldr	r1, [pc, #104]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80059d4:	4b15      	ldr	r3, [pc, #84]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	4912      	ldr	r1, [pc, #72]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d008      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80059f2:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fe:	490b      	ldr	r1, [pc, #44]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	4903      	ldr	r1, [pc, #12]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3748      	adds	r7, #72	; 0x48
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40021000 	.word	0x40021000

08005a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e049      	b.n	8005ad6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fb fc44 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f000 f8fe 	bl	8005c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_ConfigClockSource+0x1c>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e0b6      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x18a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b24:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b36:	d03e      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0xd8>
 8005b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3c:	f200 8087 	bhi.w	8005c4e <HAL_TIM_ConfigClockSource+0x170>
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	f000 8086 	beq.w	8005c54 <HAL_TIM_ConfigClockSource+0x176>
 8005b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4c:	d87f      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x170>
 8005b4e:	2b70      	cmp	r3, #112	; 0x70
 8005b50:	d01a      	beq.n	8005b88 <HAL_TIM_ConfigClockSource+0xaa>
 8005b52:	2b70      	cmp	r3, #112	; 0x70
 8005b54:	d87b      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x170>
 8005b56:	2b60      	cmp	r3, #96	; 0x60
 8005b58:	d050      	beq.n	8005bfc <HAL_TIM_ConfigClockSource+0x11e>
 8005b5a:	2b60      	cmp	r3, #96	; 0x60
 8005b5c:	d877      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x170>
 8005b5e:	2b50      	cmp	r3, #80	; 0x50
 8005b60:	d03c      	beq.n	8005bdc <HAL_TIM_ConfigClockSource+0xfe>
 8005b62:	2b50      	cmp	r3, #80	; 0x50
 8005b64:	d873      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x170>
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d058      	beq.n	8005c1c <HAL_TIM_ConfigClockSource+0x13e>
 8005b6a:	2b40      	cmp	r3, #64	; 0x40
 8005b6c:	d86f      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x170>
 8005b6e:	2b30      	cmp	r3, #48	; 0x30
 8005b70:	d064      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x15e>
 8005b72:	2b30      	cmp	r3, #48	; 0x30
 8005b74:	d86b      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x170>
 8005b76:	2b20      	cmp	r3, #32
 8005b78:	d060      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x15e>
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d867      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x170>
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d05c      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x15e>
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d05a      	beq.n	8005c3c <HAL_TIM_ConfigClockSource+0x15e>
 8005b86:	e062      	b.n	8005c4e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	f000 f974 	bl	8005e84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005baa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	609a      	str	r2, [r3, #8]
      break;
 8005bb4:	e04f      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bc6:	f000 f95d 	bl	8005e84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bd8:	609a      	str	r2, [r3, #8]
      break;
 8005bda:	e03c      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be8:	461a      	mov	r2, r3
 8005bea:	f000 f8d1 	bl	8005d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2150      	movs	r1, #80	; 0x50
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f92a 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005bfa:	e02c      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f000 f8f0 	bl	8005dee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2160      	movs	r1, #96	; 0x60
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 f91a 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005c1a:	e01c      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f000 f8b1 	bl	8005d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2140      	movs	r1, #64	; 0x40
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 f90a 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005c3a:	e00c      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 f901 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005c4c:	e003      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
      break;
 8005c52:	e000      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3c      	ldr	r2, [pc, #240]	; (8005d74 <TIM_Base_SetConfig+0x104>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00f      	beq.n	8005ca8 <TIM_Base_SetConfig+0x38>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8e:	d00b      	beq.n	8005ca8 <TIM_Base_SetConfig+0x38>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a39      	ldr	r2, [pc, #228]	; (8005d78 <TIM_Base_SetConfig+0x108>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d007      	beq.n	8005ca8 <TIM_Base_SetConfig+0x38>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a38      	ldr	r2, [pc, #224]	; (8005d7c <TIM_Base_SetConfig+0x10c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_Base_SetConfig+0x38>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a37      	ldr	r2, [pc, #220]	; (8005d80 <TIM_Base_SetConfig+0x110>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d108      	bne.n	8005cba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2d      	ldr	r2, [pc, #180]	; (8005d74 <TIM_Base_SetConfig+0x104>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01b      	beq.n	8005cfa <TIM_Base_SetConfig+0x8a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d017      	beq.n	8005cfa <TIM_Base_SetConfig+0x8a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2a      	ldr	r2, [pc, #168]	; (8005d78 <TIM_Base_SetConfig+0x108>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <TIM_Base_SetConfig+0x8a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a29      	ldr	r2, [pc, #164]	; (8005d7c <TIM_Base_SetConfig+0x10c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00f      	beq.n	8005cfa <TIM_Base_SetConfig+0x8a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	; (8005d80 <TIM_Base_SetConfig+0x110>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <TIM_Base_SetConfig+0x8a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a27      	ldr	r2, [pc, #156]	; (8005d84 <TIM_Base_SetConfig+0x114>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <TIM_Base_SetConfig+0x8a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a26      	ldr	r2, [pc, #152]	; (8005d88 <TIM_Base_SetConfig+0x118>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_Base_SetConfig+0x8a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a25      	ldr	r2, [pc, #148]	; (8005d8c <TIM_Base_SetConfig+0x11c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d108      	bne.n	8005d0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <TIM_Base_SetConfig+0x104>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00f      	beq.n	8005d58 <TIM_Base_SetConfig+0xe8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a11      	ldr	r2, [pc, #68]	; (8005d80 <TIM_Base_SetConfig+0x110>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00b      	beq.n	8005d58 <TIM_Base_SetConfig+0xe8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a10      	ldr	r2, [pc, #64]	; (8005d84 <TIM_Base_SetConfig+0x114>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d007      	beq.n	8005d58 <TIM_Base_SetConfig+0xe8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a0f      	ldr	r2, [pc, #60]	; (8005d88 <TIM_Base_SetConfig+0x118>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_Base_SetConfig+0xe8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a0e      	ldr	r2, [pc, #56]	; (8005d8c <TIM_Base_SetConfig+0x11c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d103      	bne.n	8005d60 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	615a      	str	r2, [r3, #20]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800

08005d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0201 	bic.w	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 030a 	bic.w	r3, r3, #10
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f023 0210 	bic.w	r2, r3, #16
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	031b      	lsls	r3, r3, #12
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f043 0307 	orr.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	021a      	lsls	r2, r3, #8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	609a      	str	r2, [r3, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e063      	b.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2b      	ldr	r2, [pc, #172]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d004      	beq.n	8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2a      	ldr	r2, [pc, #168]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d108      	bne.n	8005f22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d018      	beq.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4e:	d013      	beq.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a18      	ldr	r2, [pc, #96]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00e      	beq.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d009      	beq.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a12      	ldr	r2, [pc, #72]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a13      	ldr	r2, [pc, #76]	; (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d10c      	bne.n	8005f92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40013400 	.word	0x40013400
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	40000800 	.word	0x40000800
 8005fc0:	40014000 	.word	0x40014000

08005fc4 <memset>:
 8005fc4:	4402      	add	r2, r0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d100      	bne.n	8005fce <memset+0xa>
 8005fcc:	4770      	bx	lr
 8005fce:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd2:	e7f9      	b.n	8005fc8 <memset+0x4>

08005fd4 <__libc_init_array>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	4d0d      	ldr	r5, [pc, #52]	; (800600c <__libc_init_array+0x38>)
 8005fd8:	4c0d      	ldr	r4, [pc, #52]	; (8006010 <__libc_init_array+0x3c>)
 8005fda:	1b64      	subs	r4, r4, r5
 8005fdc:	10a4      	asrs	r4, r4, #2
 8005fde:	2600      	movs	r6, #0
 8005fe0:	42a6      	cmp	r6, r4
 8005fe2:	d109      	bne.n	8005ff8 <__libc_init_array+0x24>
 8005fe4:	4d0b      	ldr	r5, [pc, #44]	; (8006014 <__libc_init_array+0x40>)
 8005fe6:	4c0c      	ldr	r4, [pc, #48]	; (8006018 <__libc_init_array+0x44>)
 8005fe8:	f000 f826 	bl	8006038 <_init>
 8005fec:	1b64      	subs	r4, r4, r5
 8005fee:	10a4      	asrs	r4, r4, #2
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	42a6      	cmp	r6, r4
 8005ff4:	d105      	bne.n	8006002 <__libc_init_array+0x2e>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffc:	4798      	blx	r3
 8005ffe:	3601      	adds	r6, #1
 8006000:	e7ee      	b.n	8005fe0 <__libc_init_array+0xc>
 8006002:	f855 3b04 	ldr.w	r3, [r5], #4
 8006006:	4798      	blx	r3
 8006008:	3601      	adds	r6, #1
 800600a:	e7f2      	b.n	8005ff2 <__libc_init_array+0x1e>
 800600c:	08006080 	.word	0x08006080
 8006010:	08006080 	.word	0x08006080
 8006014:	08006080 	.word	0x08006080
 8006018:	08006084 	.word	0x08006084

0800601c <memcpy>:
 800601c:	440a      	add	r2, r1
 800601e:	4291      	cmp	r1, r2
 8006020:	f100 33ff 	add.w	r3, r0, #4294967295
 8006024:	d100      	bne.n	8006028 <memcpy+0xc>
 8006026:	4770      	bx	lr
 8006028:	b510      	push	{r4, lr}
 800602a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800602e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006032:	4291      	cmp	r1, r2
 8006034:	d1f9      	bne.n	800602a <memcpy+0xe>
 8006036:	bd10      	pop	{r4, pc}

08006038 <_init>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	bf00      	nop
 800603c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603e:	bc08      	pop	{r3}
 8006040:	469e      	mov	lr, r3
 8006042:	4770      	bx	lr

08006044 <_fini>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	bf00      	nop
 8006048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604a:	bc08      	pop	{r3}
 800604c:	469e      	mov	lr, r3
 800604e:	4770      	bx	lr
