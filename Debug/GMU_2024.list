
GMU_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006188  08006188  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006188  08006188  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006188  08006188  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000045c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000468  20000468  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010fd4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034e9  00000000  00000000  00031053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010f0  00000000  00000000  00034540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cd4  00000000  00000000  00035630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fba4  00000000  00000000  00036304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001798d  00000000  00000000  00055ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000beaa0  00000000  00000000  0006d835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004494  00000000  00000000  0012c2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0013076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006140 	.word	0x08006140

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006140 	.word	0x08006140

080001c8 <ADC_Init>:
#include "ADC_Handler.h"

uint16_t adcValue;

void ADC_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_OPAMP_Start(&hopamp1);
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <ADC_Init+0x1c>)
 80001ce:	f004 f8ab 	bl	8004328 <HAL_OPAMP_Start>
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80001d2:	2100      	movs	r1, #0
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <ADC_Init+0x20>)
 80001d6:	f002 fa65 	bl	80026a4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <ADC_Init+0x20>)
 80001dc:	f001 fe2e 	bl	8001e3c <HAL_ADC_Start_IT>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	20000190 	.word	0x20000190
 80001e8:	20000118 	.word	0x20000118

080001ec <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80001fc:	d106      	bne.n	800020c <HAL_ADC_ConvCpltCallback+0x20>
	{
		adcValue = HAL_ADC_GetValue(hadc);
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f001 ff5c 	bl	80020bc <HAL_ADC_GetValue>
 8000204:	4603      	mov	r3, r0
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b02      	ldr	r3, [pc, #8]	; (8000214 <HAL_ADC_ConvCpltCallback+0x28>)
 800020a:	801a      	strh	r2, [r3, #0]
	}
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000028 	.word	0x20000028

08000218 <getADCValue>:

uint16_t getADCValue(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	return adcValue;
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <getADCValue+0x14>)
 800021e:	881b      	ldrh	r3, [r3, #0]
}
 8000220:	4618      	mov	r0, r3
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000028 	.word	0x20000028

08000230 <AppInit>:


Gearbox_t gearbox;

void AppInit(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	gearboxInit(&gearbox);
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <AppInit+0x18>)
 8000236:	f000 f9b1 	bl	800059c <gearboxInit>
	ADC_Init();
 800023a:	f7ff ffc5 	bl	80001c8 <ADC_Init>
	CAN_Handler_Init();
 800023e:	f000 f8b1 	bl	80003a4 <CAN_Handler_Init>

}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	2000002c 	.word	0x2000002c

0800024c <canRxProcess>:

void canRxProcess()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	static uint8_t clutch_data;

	if(CAN_Handler_IsGearUpCommanded())
 8000250:	f000 f8d6 	bl	8000400 <CAN_Handler_IsGearUpCommanded>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d003      	beq.n	8000262 <canRxProcess+0x16>
	{
		startUpshift(&gearbox);
 800025a:	4812      	ldr	r0, [pc, #72]	; (80002a4 <canRxProcess+0x58>)
 800025c:	f000 fd26 	bl	8000cac <startUpshift>
		return;
 8000260:	e01e      	b.n	80002a0 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsGearDownCommanded())
 8000262:	f000 f8e9 	bl	8000438 <CAN_Handler_IsGearDownCommanded>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d003      	beq.n	8000274 <canRxProcess+0x28>
	{
		startDownshift(&gearbox);
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <canRxProcess+0x58>)
 800026e:	f000 fd30 	bl	8000cd2 <startDownshift>
		return;
 8000272:	e015      	b.n	80002a0 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsClutchCommanded(&clutch_data))
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <canRxProcess+0x5c>)
 8000276:	f000 f8fb 	bl	8000470 <CAN_Handler_IsClutchCommanded>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d00f      	beq.n	80002a0 <canRxProcess+0x54>
	{
		if(clutch_data == 255)
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <canRxProcess+0x5c>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2bff      	cmp	r3, #255	; 0xff
 8000286:	d103      	bne.n	8000290 <canRxProcess+0x44>
			{
				clutch(true);
 8000288:	2001      	movs	r0, #1
 800028a:	f000 fd35 	bl	8000cf8 <clutch>
			}
			else if(clutch_data == 0)
			{
				clutch(false);
			}
				return;
 800028e:	e006      	b.n	800029e <canRxProcess+0x52>
			else if(clutch_data == 0)
 8000290:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <canRxProcess+0x5c>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d102      	bne.n	800029e <canRxProcess+0x52>
				clutch(false);
 8000298:	2000      	movs	r0, #0
 800029a:	f000 fd2d 	bl	8000cf8 <clutch>
				return;
 800029e:	bf00      	nop
	}

}
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	20000068 	.word	0x20000068

080002ac <sendCANFrame>:

void sendCANFrame(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af04      	add	r7, sp, #16

	CAN_Handler_SendGmu1Frame(gearbox.actual_gear, HAL_GPIO_ReadPin(CLUTCH_GPIO_Port, CLUTCH_Pin), gearbox.gearPosADC, gearbox._state, 0, 0, gearbox.gear_cut);
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <sendCANFrame+0x5c>)
 80002b4:	f893 4025 	ldrb.w	r4, [r3, #37]	; 0x25
 80002b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002bc:	4813      	ldr	r0, [pc, #76]	; (800030c <sendCANFrame+0x60>)
 80002be:	f003 ff45 	bl	800414c <HAL_GPIO_ReadPin>
 80002c2:	4603      	mov	r3, r0
 80002c4:	4618      	mov	r0, r3
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <sendCANFrame+0x5c>)
 80002c8:	881a      	ldrh	r2, [r3, #0]
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <sendCANFrame+0x5c>)
 80002cc:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 80002d0:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <sendCANFrame+0x5c>)
 80002d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80002d6:	9302      	str	r3, [sp, #8]
 80002d8:	2300      	movs	r3, #0
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	2300      	movs	r3, #0
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	460b      	mov	r3, r1
 80002e2:	4601      	mov	r1, r0
 80002e4:	4620      	mov	r0, r4
 80002e6:	f000 f8e3 	bl	80004b0 <CAN_Handler_SendGmu1Frame>
	CAN_Handler_SendGmu2Frame(0, 0, gearbox.upshiftTime, gearbox.downshiftTime);
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <sendCANFrame+0x5c>)
 80002ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <sendCANFrame+0x5c>)
 80002f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	2000      	movs	r0, #0
 80002fa:	f000 f90f 	bl	800051c <CAN_Handler_SendGmu2Frame>
}
 80002fe:	bf00      	nop
 8000300:	3704      	adds	r7, #4
 8000302:	46bd      	mov	sp, r7
 8000304:	bd90      	pop	{r4, r7, pc}
 8000306:	bf00      	nop
 8000308:	2000002c 	.word	0x2000002c
 800030c:	48000400 	.word	0x48000400

08000310 <statusLED>:

void statusLED(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <statusLED+0x10>)
 8000318:	f003 ff48 	bl	80041ac <HAL_GPIO_TogglePin>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	48000400 	.word	0x48000400

08000324 <AppProcess>:
void AppProcess(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
	uint32_t CANRXtick = HAL_GetTick();
 800032a:	f001 fb87 	bl	8001a3c <HAL_GetTick>
 800032e:	60f8      	str	r0, [r7, #12]
	uint32_t CANSendFrameTick = HAL_GetTick();
 8000330:	f001 fb84 	bl	8001a3c <HAL_GetTick>
 8000334:	60b8      	str	r0, [r7, #8]
	uint32_t StatusLEDTick = HAL_GetTick();
 8000336:	f001 fb81 	bl	8001a3c <HAL_GetTick>
 800033a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		gearbox.gearPosADC = getADCValue();
 800033c:	f7ff ff6c 	bl	8000218 <getADCValue>
 8000340:	4603      	mov	r3, r0
 8000342:	461a      	mov	r2, r3
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <AppProcess+0x7c>)
 8000346:	801a      	strh	r2, [r3, #0]
		updateGear(&gearbox);
 8000348:	4815      	ldr	r0, [pc, #84]	; (80003a0 <AppProcess+0x7c>)
 800034a:	f000 f967 	bl	800061c <updateGear>
		processCallback(&gearbox);
 800034e:	4814      	ldr	r0, [pc, #80]	; (80003a0 <AppProcess+0x7c>)
 8000350:	f000 f9dc 	bl	800070c <processCallback>

		if((HAL_GetTick() - CANRXtick) > 1)
 8000354:	f001 fb72 	bl	8001a3c <HAL_GetTick>
 8000358:	4602      	mov	r2, r0
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	1ad3      	subs	r3, r2, r3
 800035e:	2b01      	cmp	r3, #1
 8000360:	d904      	bls.n	800036c <AppProcess+0x48>
		{
			canRxProcess();
 8000362:	f7ff ff73 	bl	800024c <canRxProcess>
			CANRXtick = HAL_GetTick();
 8000366:	f001 fb69 	bl	8001a3c <HAL_GetTick>
 800036a:	60f8      	str	r0, [r7, #12]
		}
		if((HAL_GetTick() - CANSendFrameTick) > 2)
 800036c:	f001 fb66 	bl	8001a3c <HAL_GetTick>
 8000370:	4602      	mov	r2, r0
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	2b02      	cmp	r3, #2
 8000378:	d904      	bls.n	8000384 <AppProcess+0x60>
		{
			sendCANFrame();
 800037a:	f7ff ff97 	bl	80002ac <sendCANFrame>
			CANSendFrameTick = HAL_GetTick();
 800037e:	f001 fb5d 	bl	8001a3c <HAL_GetTick>
 8000382:	60b8      	str	r0, [r7, #8]
		}
		if((HAL_GetTick() - StatusLEDTick) > 1000)
 8000384:	f001 fb5a 	bl	8001a3c <HAL_GetTick>
 8000388:	4602      	mov	r2, r0
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000392:	d9d3      	bls.n	800033c <AppProcess+0x18>
		{
			statusLED();
 8000394:	f7ff ffbc 	bl	8000310 <statusLED>
			StatusLEDTick = HAL_GetTick();
 8000398:	f001 fb50 	bl	8001a3c <HAL_GetTick>
 800039c:	6078      	str	r0, [r7, #4]
		gearbox.gearPosADC = getADCValue();
 800039e:	e7cd      	b.n	800033c <AppProcess+0x18>
 80003a0:	2000002c 	.word	0x2000002c

080003a4 <CAN_Handler_Init>:

struct can_frame cf_gear_up, cf_gear_down, cf_clutch;
struct can_frame cf_gmu1, cf_gmu2;


void CAN_Handler_Init(){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

	CAN_Init();
 80003a8:	f001 f8fe 	bl	80015a8 <CAN_Init>

	CAN_InitFrame(&cf_gear_up, 0x000, 0, 1);
 80003ac:	2301      	movs	r3, #1
 80003ae:	2200      	movs	r2, #0
 80003b0:	2100      	movs	r1, #0
 80003b2:	480e      	ldr	r0, [pc, #56]	; (80003ec <CAN_Handler_Init+0x48>)
 80003b4:	f001 f904 	bl	80015c0 <CAN_InitFrame>
	CAN_InitFrame(&cf_gear_down, 0x001, 0, 1);
 80003b8:	2301      	movs	r3, #1
 80003ba:	2200      	movs	r2, #0
 80003bc:	2101      	movs	r1, #1
 80003be:	480c      	ldr	r0, [pc, #48]	; (80003f0 <CAN_Handler_Init+0x4c>)
 80003c0:	f001 f8fe 	bl	80015c0 <CAN_InitFrame>
	CAN_InitFrame(&cf_clutch, 0x002, 0, 1);
 80003c4:	2301      	movs	r3, #1
 80003c6:	2200      	movs	r2, #0
 80003c8:	2102      	movs	r1, #2
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <CAN_Handler_Init+0x50>)
 80003cc:	f001 f8f8 	bl	80015c0 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu1, 0x080, 10, 8);
 80003d0:	2308      	movs	r3, #8
 80003d2:	220a      	movs	r2, #10
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	4808      	ldr	r0, [pc, #32]	; (80003f8 <CAN_Handler_Init+0x54>)
 80003d8:	f001 f8f2 	bl	80015c0 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu2, 0x081, 100, 8);
 80003dc:	2308      	movs	r3, #8
 80003de:	2264      	movs	r2, #100	; 0x64
 80003e0:	2181      	movs	r1, #129	; 0x81
 80003e2:	4806      	ldr	r0, [pc, #24]	; (80003fc <CAN_Handler_Init+0x58>)
 80003e4:	f001 f8ec 	bl	80015c0 <CAN_InitFrame>

}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	2000006c 	.word	0x2000006c
 80003f0:	2000008c 	.word	0x2000008c
 80003f4:	200000ac 	.word	0x200000ac
 80003f8:	200000cc 	.word	0x200000cc
 80003fc:	200000ec 	.word	0x200000ec

08000400 <CAN_Handler_IsGearUpCommanded>:

uint8_t CAN_Handler_IsGearUpCommanded(){
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

	static uint32_t last_tick = 0;

	if((cf_gear_up.tick_ms != last_tick) && (cf_gear_up.core.data[0] == 255)){
 8000404:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <CAN_Handler_IsGearUpCommanded+0x30>)
 8000406:	699a      	ldr	r2, [r3, #24]
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <CAN_Handler_IsGearUpCommanded+0x34>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	429a      	cmp	r2, r3
 800040e:	d009      	beq.n	8000424 <CAN_Handler_IsGearUpCommanded+0x24>
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <CAN_Handler_IsGearUpCommanded+0x30>)
 8000412:	7b1b      	ldrb	r3, [r3, #12]
 8000414:	2bff      	cmp	r3, #255	; 0xff
 8000416:	d105      	bne.n	8000424 <CAN_Handler_IsGearUpCommanded+0x24>
		last_tick = cf_gear_up.tick_ms;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <CAN_Handler_IsGearUpCommanded+0x30>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <CAN_Handler_IsGearUpCommanded+0x34>)
 800041e:	6013      	str	r3, [r2, #0]
		return 1;
 8000420:	2301      	movs	r3, #1
 8000422:	e000      	b.n	8000426 <CAN_Handler_IsGearUpCommanded+0x26>
	}
	else{
		return 0;
 8000424:	2300      	movs	r3, #0
	}


}
 8000426:	4618      	mov	r0, r3
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	2000006c 	.word	0x2000006c
 8000434:	2000010c 	.word	0x2000010c

08000438 <CAN_Handler_IsGearDownCommanded>:

uint8_t CAN_Handler_IsGearDownCommanded(){
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

	static uint32_t last_tick_ds = 0;

	if((cf_gear_down.tick_ms != last_tick_ds) && (cf_gear_down.core.data[0] == 255)){
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <CAN_Handler_IsGearDownCommanded+0x30>)
 800043e:	699a      	ldr	r2, [r3, #24]
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <CAN_Handler_IsGearDownCommanded+0x34>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	429a      	cmp	r2, r3
 8000446:	d009      	beq.n	800045c <CAN_Handler_IsGearDownCommanded+0x24>
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <CAN_Handler_IsGearDownCommanded+0x30>)
 800044a:	7b1b      	ldrb	r3, [r3, #12]
 800044c:	2bff      	cmp	r3, #255	; 0xff
 800044e:	d105      	bne.n	800045c <CAN_Handler_IsGearDownCommanded+0x24>
		last_tick_ds = cf_gear_down.tick_ms;
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <CAN_Handler_IsGearDownCommanded+0x30>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a05      	ldr	r2, [pc, #20]	; (800046c <CAN_Handler_IsGearDownCommanded+0x34>)
 8000456:	6013      	str	r3, [r2, #0]
		return 1;
 8000458:	2301      	movs	r3, #1
 800045a:	e000      	b.n	800045e <CAN_Handler_IsGearDownCommanded+0x26>
	}
	else{
		return 0;
 800045c:	2300      	movs	r3, #0
	}


}
 800045e:	4618      	mov	r0, r3
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	2000008c 	.word	0x2000008c
 800046c:	20000110 	.word	0x20000110

08000470 <CAN_Handler_IsClutchCommanded>:

uint8_t CAN_Handler_IsClutchCommanded(uint8_t* data){
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

	static uint32_t last_tick = 0;

	if(cf_clutch.tick_ms != last_tick){
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <CAN_Handler_IsClutchCommanded+0x38>)
 800047a:	699a      	ldr	r2, [r3, #24]
 800047c:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <CAN_Handler_IsClutchCommanded+0x3c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	429a      	cmp	r2, r3
 8000482:	d009      	beq.n	8000498 <CAN_Handler_IsClutchCommanded+0x28>
		last_tick = cf_clutch.tick_ms;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <CAN_Handler_IsClutchCommanded+0x38>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a08      	ldr	r2, [pc, #32]	; (80004ac <CAN_Handler_IsClutchCommanded+0x3c>)
 800048a:	6013      	str	r3, [r2, #0]
		*data = cf_clutch.core.data[0];
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <CAN_Handler_IsClutchCommanded+0x38>)
 800048e:	7b1a      	ldrb	r2, [r3, #12]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	701a      	strb	r2, [r3, #0]
		return 1;
 8000494:	2301      	movs	r3, #1
 8000496:	e000      	b.n	800049a <CAN_Handler_IsClutchCommanded+0x2a>
	}
	else{
		return 0;
 8000498:	2300      	movs	r3, #0
	}


}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	200000ac 	.word	0x200000ac
 80004ac:	20000114 	.word	0x20000114

080004b0 <CAN_Handler_SendGmu1Frame>:

void CAN_Handler_SendGmu1Frame(uint8_t gear, uint8_t clutch, uint16_t gear_pos_adc, uint8_t state, uint8_t air_preas, uint8_t reset_det, uint8_t gear_cut){
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4604      	mov	r4, r0
 80004b8:	4608      	mov	r0, r1
 80004ba:	4611      	mov	r1, r2
 80004bc:	461a      	mov	r2, r3
 80004be:	4623      	mov	r3, r4
 80004c0:	71fb      	strb	r3, [r7, #7]
 80004c2:	4603      	mov	r3, r0
 80004c4:	71bb      	strb	r3, [r7, #6]
 80004c6:	460b      	mov	r3, r1
 80004c8:	80bb      	strh	r3, [r7, #4]
 80004ca:	4613      	mov	r3, r2
 80004cc:	70fb      	strb	r3, [r7, #3]

	cf_gmu1.core.data[0] = gear;
 80004ce:	4a12      	ldr	r2, [pc, #72]	; (8000518 <CAN_Handler_SendGmu1Frame+0x68>)
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	7313      	strb	r3, [r2, #12]
	cf_gmu1.core.data[1] = clutch;
 80004d4:	4a10      	ldr	r2, [pc, #64]	; (8000518 <CAN_Handler_SendGmu1Frame+0x68>)
 80004d6:	79bb      	ldrb	r3, [r7, #6]
 80004d8:	7353      	strb	r3, [r2, #13]
	cf_gmu1.core.data[2] = (uint8_t)((gear_pos_adc >> 8) & 0xFF);
 80004da:	88bb      	ldrh	r3, [r7, #4]
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	b29b      	uxth	r3, r3
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <CAN_Handler_SendGmu1Frame+0x68>)
 80004e4:	739a      	strb	r2, [r3, #14]
	cf_gmu1.core.data[3] = (uint8_t)(gear_pos_adc & 0xFF);
 80004e6:	88bb      	ldrh	r3, [r7, #4]
 80004e8:	b2da      	uxtb	r2, r3
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <CAN_Handler_SendGmu1Frame+0x68>)
 80004ec:	73da      	strb	r2, [r3, #15]
	cf_gmu1.core.data[4] = state;
 80004ee:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <CAN_Handler_SendGmu1Frame+0x68>)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	7413      	strb	r3, [r2, #16]
	cf_gmu1.core.data[5] = air_preas;
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <CAN_Handler_SendGmu1Frame+0x68>)
 80004f6:	7e3b      	ldrb	r3, [r7, #24]
 80004f8:	7453      	strb	r3, [r2, #17]
	cf_gmu1.core.data[6] = (uint8_t)((gear_cut)&0xFF);
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <CAN_Handler_SendGmu1Frame+0x68>)
 80004fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000500:	7493      	strb	r3, [r2, #18]
	cf_gmu1.core.data[7] = reset_det;
 8000502:	4a05      	ldr	r2, [pc, #20]	; (8000518 <CAN_Handler_SendGmu1Frame+0x68>)
 8000504:	7f3b      	ldrb	r3, [r7, #28]
 8000506:	74d3      	strb	r3, [r2, #19]

	CAN_SendFrame(&cf_gmu1);
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <CAN_Handler_SendGmu1Frame+0x68>)
 800050a:	f001 f8b1 	bl	8001670 <CAN_SendFrame>
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	bf00      	nop
 8000518:	200000cc 	.word	0x200000cc

0800051c <CAN_Handler_SendGmu2Frame>:

void CAN_Handler_SendGmu2Frame(uint16_t partial_upshift_t, uint16_t partial_downshift_t, uint16_t upshift_t, uint16_t downshift_t){
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	4604      	mov	r4, r0
 8000524:	4608      	mov	r0, r1
 8000526:	4611      	mov	r1, r2
 8000528:	461a      	mov	r2, r3
 800052a:	4623      	mov	r3, r4
 800052c:	80fb      	strh	r3, [r7, #6]
 800052e:	4603      	mov	r3, r0
 8000530:	80bb      	strh	r3, [r7, #4]
 8000532:	460b      	mov	r3, r1
 8000534:	807b      	strh	r3, [r7, #2]
 8000536:	4613      	mov	r3, r2
 8000538:	803b      	strh	r3, [r7, #0]

	cf_gmu2.core.data[0] = (uint8_t)((partial_upshift_t >> 8) & 0xFF);
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	0a1b      	lsrs	r3, r3, #8
 800053e:	b29b      	uxth	r3, r3
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000544:	731a      	strb	r2, [r3, #12]
	cf_gmu2.core.data[1] = (uint8_t)(partial_upshift_t & 0xFF);
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <CAN_Handler_SendGmu2Frame+0x7c>)
 800054c:	735a      	strb	r2, [r3, #13]
	cf_gmu2.core.data[2] = (uint8_t)((partial_downshift_t >> 8) & 0xFF);
 800054e:	88bb      	ldrh	r3, [r7, #4]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	b29b      	uxth	r3, r3
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000558:	739a      	strb	r2, [r3, #14]
	cf_gmu2.core.data[3] = (uint8_t)(partial_downshift_t & 0xFF);
 800055a:	88bb      	ldrh	r3, [r7, #4]
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000560:	73da      	strb	r2, [r3, #15]
	cf_gmu2.core.data[4] = (uint8_t)((upshift_t >> 8) & 0xFF);
 8000562:	887b      	ldrh	r3, [r7, #2]
 8000564:	0a1b      	lsrs	r3, r3, #8
 8000566:	b29b      	uxth	r3, r3
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <CAN_Handler_SendGmu2Frame+0x7c>)
 800056c:	741a      	strb	r2, [r3, #16]
	cf_gmu2.core.data[5] = (uint8_t)(upshift_t & 0xFF);
 800056e:	887b      	ldrh	r3, [r7, #2]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000574:	745a      	strb	r2, [r3, #17]
	cf_gmu2.core.data[6] = (uint8_t)((downshift_t >> 8) & 0xFF);
 8000576:	883b      	ldrh	r3, [r7, #0]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	b29b      	uxth	r3, r3
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000580:	749a      	strb	r2, [r3, #18]
	cf_gmu2.core.data[7] = (uint8_t)(downshift_t & 0xFF);
 8000582:	883b      	ldrh	r3, [r7, #0]
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000588:	74da      	strb	r2, [r3, #19]

	CAN_SendFrame(&cf_gmu2);
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <CAN_Handler_SendGmu2Frame+0x7c>)
 800058c:	f001 f870 	bl	8001670 <CAN_SendFrame>
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}
 8000598:	200000ec 	.word	0x200000ec

0800059c <gearboxInit>:
static bool getTimeout(uint32_t dupa, uint32_t anus);

uint32_t cipa;

void gearboxInit(Gearbox_t* gearbox)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	gearbox->neutral_adc = 500;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005aa:	805a      	strh	r2, [r3, #2]
	gearbox->gear1_adc = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	809a      	strh	r2, [r3, #4]
	gearbox->gear2_adc = 1470;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f240 52be 	movw	r2, #1470	; 0x5be
 80005b8:	80da      	strh	r2, [r3, #6]
	gearbox->gear3_adc = 1870;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f240 724e 	movw	r2, #1870	; 0x74e
 80005c0:	811a      	strh	r2, [r3, #8]
	gearbox->gear4_adc = 2300;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80005c8:	815a      	strh	r2, [r3, #10]

	gearbox->US_ACTUATOR_DELAY = 20;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2214      	movs	r2, #20
 80005ce:	60da      	str	r2, [r3, #12]
	gearbox->US_FINISH_TIMEOUT = 200;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	22c8      	movs	r2, #200	; 0xc8
 80005d4:	611a      	str	r2, [r3, #16]
	gearbox->DS_ACTUATOR_DELAY = 40;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2228      	movs	r2, #40	; 0x28
 80005da:	615a      	str	r2, [r3, #20]
	gearbox->DS_FINISH_TIMEOUT = 250;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	22fa      	movs	r2, #250	; 0xfa
 80005e0:	619a      	str	r2, [r3, #24]
	gearbox->OL_US_GEARCUT_DEALAY = 100;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2264      	movs	r2, #100	; 0x64
 80005e6:	61da      	str	r2, [r3, #28]
	gearbox->OL_DS_CLUTCH_DELAY = 100;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2264      	movs	r2, #100	; 0x64
 80005ec:	621a      	str	r2, [r3, #32]

	gearbox->_state = Idle;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	gearbox->shift_start_tick = 0;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
	gearbox->timestamp_tick = 0;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	62da      	str	r2, [r3, #44]	; 0x2c
	gearbox->start_gear_sens = 0;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	861a      	strh	r2, [r3, #48]	; 0x30
	gearbox->start_gear = 0;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <updateGear>:
{
	gearbox->gearPosADC = ADCValue;
}

void updateGear(Gearbox_t* gearbox)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	if((gearbox->gearPosADC>=(gearbox->neutral_adc-150))&&(gearbox->gearPosADC<=(gearbox->neutral_adc+150)))
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	885b      	ldrh	r3, [r3, #2]
 800062e:	3b96      	subs	r3, #150	; 0x96
 8000630:	429a      	cmp	r2, r3
 8000632:	db0c      	blt.n	800064e <updateGear+0x32>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	885b      	ldrh	r3, [r3, #2]
 800063e:	3396      	adds	r3, #150	; 0x96
 8000640:	429a      	cmp	r2, r3
 8000642:	dc04      	bgt.n	800064e <updateGear+0x32>
	{
		gearbox->actual_gear = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800064c:	e058      	b.n	8000700 <updateGear+0xe4>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear1_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear1_adc+150)))
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	461a      	mov	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	889b      	ldrh	r3, [r3, #4]
 8000658:	3b96      	subs	r3, #150	; 0x96
 800065a:	429a      	cmp	r2, r3
 800065c:	db0c      	blt.n	8000678 <updateGear+0x5c>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	889b      	ldrh	r3, [r3, #4]
 8000668:	3396      	adds	r3, #150	; 0x96
 800066a:	429a      	cmp	r2, r3
 800066c:	dc04      	bgt.n	8000678 <updateGear+0x5c>
	{
		gearbox->actual_gear = 1;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2201      	movs	r2, #1
 8000672:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8000676:	e043      	b.n	8000700 <updateGear+0xe4>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear2_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear2_adc+150)))
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	88db      	ldrh	r3, [r3, #6]
 8000682:	3b96      	subs	r3, #150	; 0x96
 8000684:	429a      	cmp	r2, r3
 8000686:	db0c      	blt.n	80006a2 <updateGear+0x86>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	88db      	ldrh	r3, [r3, #6]
 8000692:	3396      	adds	r3, #150	; 0x96
 8000694:	429a      	cmp	r2, r3
 8000696:	dc04      	bgt.n	80006a2 <updateGear+0x86>
	{
		gearbox->actual_gear = 2;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2202      	movs	r2, #2
 800069c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80006a0:	e02e      	b.n	8000700 <updateGear+0xe4>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear3_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear3_adc+150)))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	891b      	ldrh	r3, [r3, #8]
 80006ac:	3b96      	subs	r3, #150	; 0x96
 80006ae:	429a      	cmp	r2, r3
 80006b0:	db0c      	blt.n	80006cc <updateGear+0xb0>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	891b      	ldrh	r3, [r3, #8]
 80006bc:	3396      	adds	r3, #150	; 0x96
 80006be:	429a      	cmp	r2, r3
 80006c0:	dc04      	bgt.n	80006cc <updateGear+0xb0>
		{
			gearbox->actual_gear = 3;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2203      	movs	r2, #3
 80006c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80006ca:	e019      	b.n	8000700 <updateGear+0xe4>
		}
	else if((gearbox->gearPosADC>=(gearbox->gear4_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear4_adc+150)))
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	895b      	ldrh	r3, [r3, #10]
 80006d6:	3b96      	subs	r3, #150	; 0x96
 80006d8:	429a      	cmp	r2, r3
 80006da:	db0c      	blt.n	80006f6 <updateGear+0xda>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	895b      	ldrh	r3, [r3, #10]
 80006e6:	3396      	adds	r3, #150	; 0x96
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dc04      	bgt.n	80006f6 <updateGear+0xda>
		{
			gearbox->actual_gear = 4;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2204      	movs	r2, #4
 80006f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80006f4:	e004      	b.n	8000700 <updateGear+0xe4>
		}
	else
		{
			gearbox->actual_gear = 0xff;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}

}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <processCallback>:

void processCallback(Gearbox_t* gearbox)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	switch(gearbox->_state)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800071a:	2b0c      	cmp	r3, #12
 800071c:	d84c      	bhi.n	80007b8 <processCallback+0xac>
 800071e:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <processCallback+0x18>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	080007c3 	.word	0x080007c3
 8000728:	08000759 	.word	0x08000759
 800072c:	08000761 	.word	0x08000761
 8000730:	08000769 	.word	0x08000769
 8000734:	08000771 	.word	0x08000771
 8000738:	08000779 	.word	0x08000779
 800073c:	08000781 	.word	0x08000781
 8000740:	08000789 	.word	0x08000789
 8000744:	08000791 	.word	0x08000791
 8000748:	08000799 	.word	0x08000799
 800074c:	080007a1 	.word	0x080007a1
 8000750:	080007a9 	.word	0x080007a9
 8000754:	080007b1 	.word	0x080007b1
	{
		case Idle:
		break;

		case StartUpshift:
			startUpshiftCallback(gearbox);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f837 	bl	80007cc <startUpshiftCallback>
		break;
 800075e:	e031      	b.n	80007c4 <processCallback+0xb8>

		case UpshiftFromNeutral:
			upshiftFromNeutral(gearbox);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f87f 	bl	8000864 <upshiftFromNeutral>
		break;
 8000766:	e02d      	b.n	80007c4 <processCallback+0xb8>

		case UpshiftGearCut:
			upshiftGearCut(gearbox);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f8a3 	bl	80008b4 <upshiftGearCut>
		break;
 800076e:	e029      	b.n	80007c4 <processCallback+0xb8>

		case UpshiftFinish:
			upshiftFinish(gearbox);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f8c5 	bl	8000900 <upshiftFinish>
		break;
 8000776:	e025      	b.n	80007c4 <processCallback+0xb8>

		case StartDownshift:
			startDownshiftCallback(gearbox);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f8ff 	bl	800097c <startDownshiftCallback>
		break;
 800077e:	e021      	b.n	80007c4 <processCallback+0xb8>

		case DownshiftToNeutral:
			downshiftToNeutral(gearbox);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f947 	bl	8000a14 <downshiftToNeutral>
		break;
 8000786:	e01d      	b.n	80007c4 <processCallback+0xb8>

		case DownshiftRevMatch:
			downshiftRevMatch(gearbox);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f96f 	bl	8000a6c <downshiftRevMatch>
		break;
 800078e:	e019      	b.n	80007c4 <processCallback+0xb8>

		case DownshiftFinish:
			downshiftFinish(gearbox);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f993 	bl	8000abc <downshiftFinish>
		break;
 8000796:	e015      	b.n	80007c4 <processCallback+0xb8>

		case OL_US_GearCut:
			openLoop_upshift_gearCut(gearbox);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f9cf 	bl	8000b3c <openLoop_upshift_gearCut>
		break;
 800079e:	e011      	b.n	80007c4 <processCallback+0xb8>

		case OL_US_Finish:
			openLoop_upshift_finish(gearbox);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f9f1 	bl	8000b88 <openLoop_upshift_finish>
		break;
 80007a6:	e00d      	b.n	80007c4 <processCallback+0xb8>

		case OL_DS_Clutch:
			openLoop_downshift_clutch(gearbox);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 fa21 	bl	8000bf0 <openLoop_downshift_clutch>
		break;
 80007ae:	e009      	b.n	80007c4 <processCallback+0xb8>

		case OL_DS_Finish:
			openLoop_downshift_finish(gearbox);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 fa45 	bl	8000c40 <openLoop_downshift_finish>
		break;
 80007b6:	e005      	b.n	80007c4 <processCallback+0xb8>

		default:
			gearbox->_state = Idle;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 80007c0:	e000      	b.n	80007c4 <processCallback+0xb8>
		break;
 80007c2:	bf00      	nop

	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <startUpshiftCallback>:

void startUpshiftCallback(Gearbox_t* gearbox)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	gearbox->start_gear = gearbox->actual_gear;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	gearbox->shift_start_tick = HAL_GetTick();
 80007e0:	f001 f92c 	bl	8001a3c <HAL_GetTick>
 80007e4:	4602      	mov	r2, r0
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
	if(gearbox->start_gear > 5)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80007f0:	2b05      	cmp	r3, #5
 80007f2:	d910      	bls.n	8000816 <startUpshiftCallback+0x4a>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f003 fcbd 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000802:	f001 f91b 	bl	8001a3c <HAL_GetTick>
 8000806:	4602      	mov	r2, r0
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->_state = OL_US_GearCut;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2209      	movs	r2, #9
 8000810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return;
 8000814:	e023      	b.n	800085e <startUpshiftCallback+0x92>
	}
	if(gearbox->start_gear == 4)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800081c:	2b04      	cmp	r3, #4
 800081e:	d104      	bne.n	800082a <startUpshiftCallback+0x5e>
	{
		gearbox->_state = Idle;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return;
 8000828:	e019      	b.n	800085e <startUpshiftCallback+0x92>
	}
	HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f003 fca2 	bl	800417c <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 8000838:	f001 f900 	bl	8001a3c <HAL_GetTick>
 800083c:	4602      	mov	r2, r0
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	62da      	str	r2, [r3, #44]	; 0x2c

	if(gearbox->start_gear == 0)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000848:	2b00      	cmp	r3, #0
 800084a:	d104      	bne.n	8000856 <startUpshiftCallback+0x8a>
	{
		gearbox->_state = UpshiftFromNeutral;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2202      	movs	r2, #2
 8000850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000854:	e003      	b.n	800085e <startUpshiftCallback+0x92>
	}
	else
	{
		gearbox->_state = UpshiftGearCut;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2203      	movs	r2, #3
 800085a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <upshiftFromNeutral>:
void upshiftFromNeutral(Gearbox_t* gearbox)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == 1) || (getTimeout(gearbox->timestamp_tick, gearbox->US_FINISH_TIMEOUT)))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000872:	2b01      	cmp	r3, #1
 8000874:	d00a      	beq.n	800088c <upshiftFromNeutral+0x28>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	4619      	mov	r1, r3
 8000880:	4610      	mov	r0, r2
 8000882:	f000 fa4b 	bl	8000d1c <getTimeout>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00f      	beq.n	80008ac <upshiftFromNeutral+0x48>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f003 fc71 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 800089a:	f001 f8cf 	bl	8001a3c <HAL_GetTick>
 800089e:	4602      	mov	r2, r0
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->_state = Idle;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <upshiftGearCut>:

void upshiftGearCut(Gearbox_t* gearbox)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, gearbox->US_ACTUATOR_DELAY))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	4619      	mov	r1, r3
 80008c6:	4610      	mov	r0, r2
 80008c8:	f000 fa28 	bl	8000d1c <getTimeout>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d012      	beq.n	80008f8 <upshiftGearCut+0x44>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2110      	movs	r1, #16
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f003 fc4f 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	22ff      	movs	r2, #255	; 0xff
 80008e2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		gearbox->timestamp_tick = HAL_GetTick();
 80008e6:	f001 f8a9 	bl	8001a3c <HAL_GetTick>
 80008ea:	4602      	mov	r2, r0
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->_state = UpshiftFinish;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2204      	movs	r2, #4
 80008f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <upshiftFinish>:

void upshiftFinish(Gearbox_t* gearbox)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear+1)||(getTimeout(gearbox->timestamp_tick, gearbox->US_FINISH_TIMEOUT)))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000916:	3301      	adds	r3, #1
 8000918:	429a      	cmp	r2, r3
 800091a:	d00a      	beq.n	8000932 <upshiftFinish+0x32>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	691b      	ldr	r3, [r3, #16]
 8000924:	4619      	mov	r1, r3
 8000926:	4610      	mov	r0, r2
 8000928:	f000 f9f8 	bl	8000d1c <getTimeout>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d020      	beq.n	8000974 <upshiftFinish+0x74>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2110      	movs	r1, #16
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f003 fc1f 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f003 fc18 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	227f      	movs	r2, #127	; 0x7f
 8000950:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		gearbox->timestamp_tick = HAL_GetTick();
 8000954:	f001 f872 	bl	8001a3c <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000966:	1ad2      	subs	r2, r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	635a      	str	r2, [r3, #52]	; 0x34
		gearbox->_state = Idle;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <startDownshiftCallback>:

void startDownshiftCallback(Gearbox_t* gearbox)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	gearbox->shift_start_tick = HAL_GetTick();
 8000984:	f001 f85a 	bl	8001a3c <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
	gearbox->start_gear = gearbox->actual_gear;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	if(gearbox->start_gear > 4)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	d90f      	bls.n	80009c4 <startDownshiftCallback+0x48>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009aa:	4819      	ldr	r0, [pc, #100]	; (8000a10 <startDownshiftCallback+0x94>)
 80009ac:	f003 fbe6 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80009b0:	f001 f844 	bl	8001a3c <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->_state = OL_DS_Clutch;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	220b      	movs	r2, #11
 80009be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return;
 80009c2:	e022      	b.n	8000a0a <startDownshiftCallback+0x8e>
	}
	else if(gearbox->start_gear == 0)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d104      	bne.n	80009d8 <startDownshiftCallback+0x5c>
	{
		gearbox->_state = Idle;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return;
 80009d6:	e018      	b.n	8000a0a <startDownshiftCallback+0x8e>
	}

	HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <startDownshiftCallback+0x94>)
 80009e0:	f003 fbcc 	bl	800417c <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 80009e4:	f001 f82a 	bl	8001a3c <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c

	if(gearbox->start_gear == 1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d104      	bne.n	8000a02 <startDownshiftCallback+0x86>
	{
		gearbox->_state = DownshiftToNeutral;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2206      	movs	r2, #6
 80009fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000a00:	e003      	b.n	8000a0a <startDownshiftCallback+0x8e>
	}
	else
	{
		gearbox->_state = DownshiftRevMatch;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2207      	movs	r2, #7
 8000a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	48000400 	.word	0x48000400

08000a14 <downshiftToNeutral>:

void downshiftToNeutral(Gearbox_t* gearbox)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, gearbox->DS_ACTUATOR_DELAY))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4610      	mov	r0, r2
 8000a28:	f000 f978 	bl	8000d1c <getTimeout>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d015      	beq.n	8000a5e <downshiftToNeutral+0x4a>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <downshiftToNeutral+0x54>)
 8000a3a:	f003 fb9f 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000a3e:	f000 fffd 	bl	8001a3c <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a50:	1ad2      	subs	r2, r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	639a      	str	r2, [r3, #56]	; 0x38
		gearbox->_state = DownshiftFinish;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2208      	movs	r2, #8
 8000a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	48000400 	.word	0x48000400

08000a6c <downshiftRevMatch>:

void downshiftRevMatch(Gearbox_t* gearbox)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, gearbox->DS_ACTUATOR_DELAY))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4610      	mov	r0, r2
 8000a80:	f000 f94c 	bl	8000d1c <getTimeout>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d012      	beq.n	8000ab0 <downshiftRevMatch+0x44>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <downshiftRevMatch+0x4c>)
 8000a92:	f003 fb73 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000a96:	f000 ffd1 	bl	8001a3c <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->gear_cut = 0;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		gearbox->_state = DownshiftFinish;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2208      	movs	r2, #8
 8000aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	48000400 	.word	0x48000400

08000abc <downshiftFinish>:

void downshiftFinish(Gearbox_t* gearbox)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear -1 ) || (getTimeout(gearbox->timestamp_tick, gearbox->DS_FINISH_TIMEOUT)))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000aca:	461a      	mov	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d00a      	beq.n	8000aee <downshiftFinish+0x32>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	f000 f91a 	bl	8000d1c <getTimeout>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d01f      	beq.n	8000b2e <downshiftFinish+0x72>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af4:	4810      	ldr	r0, [pc, #64]	; (8000b38 <downshiftFinish+0x7c>)
 8000af6:	f003 fb41 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <downshiftFinish+0x7c>)
 8000b02:	f003 fb3b 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	227f      	movs	r2, #127	; 0x7f
 8000b0a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		gearbox->timestamp_tick = HAL_GetTick();
 8000b0e:	f000 ff95 	bl	8001a3c <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b20:	1ad2      	subs	r2, r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	639a      	str	r2, [r3, #56]	; 0x38
		gearbox->_state = Idle;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	48000400 	.word	0x48000400

08000b3c <openLoop_upshift_gearCut>:

void openLoop_upshift_gearCut(Gearbox_t* gearbox)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, gearbox->OL_US_GEARCUT_DEALAY))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4610      	mov	r0, r2
 8000b50:	f000 f8e4 	bl	8000d1c <getTimeout>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d012      	beq.n	8000b80 <openLoop_upshift_gearCut+0x44>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f003 fb0b 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	22ff      	movs	r2, #255	; 0xff
 8000b6a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		gearbox->timestamp_tick = HAL_GetTick();
 8000b6e:	f000 ff65 	bl	8001a3c <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->_state = OL_US_Finish;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	220a      	movs	r2, #10
 8000b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <openLoop_upshift_finish>:

void openLoop_upshift_finish(Gearbox_t* gearbox)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, gearbox->US_FINISH_TIMEOUT))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691b      	ldr	r3, [r3, #16]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	f000 f8be 	bl	8000d1c <getTimeout>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d020      	beq.n	8000be8 <openLoop_upshift_finish+0x60>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f003 fae5 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f003 fade 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	227f      	movs	r2, #127	; 0x7f
 8000bc4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		gearbox->timestamp_tick = HAL_GetTick();
 8000bc8:	f000 ff38 	bl	8001a3c <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	1ad2      	subs	r2, r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34
		gearbox->_state = Idle;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <openLoop_downshift_clutch>:

void openLoop_downshift_clutch(Gearbox_t* gearbox)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, gearbox->DS_ACTUATOR_DELAY))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4619      	mov	r1, r3
 8000c02:	4610      	mov	r0, r2
 8000c04:	f000 f88a 	bl	8000d1c <getTimeout>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d012      	beq.n	8000c34 <openLoop_downshift_clutch+0x44>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <openLoop_downshift_clutch+0x4c>)
 8000c16:	f003 fab1 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000c1a:	f000 ff0f 	bl	8001a3c <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->gear_cut = 0;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		gearbox->_state = OL_DS_Finish;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	220c      	movs	r2, #12
 8000c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	48000400 	.word	0x48000400

08000c40 <openLoop_downshift_finish>:

void openLoop_downshift_finish(Gearbox_t* gearbox)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, gearbox->OL_DS_CLUTCH_DELAY))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	4619      	mov	r1, r3
 8000c52:	4610      	mov	r0, r2
 8000c54:	f000 f862 	bl	8000d1c <getTimeout>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d01f      	beq.n	8000c9e <openLoop_downshift_finish+0x5e>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <openLoop_downshift_finish+0x68>)
 8000c66:	f003 fa89 	bl	800417c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <openLoop_downshift_finish+0x68>)
 8000c72:	f003 fa83 	bl	800417c <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	227f      	movs	r2, #127	; 0x7f
 8000c7a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		gearbox->timestamp_tick = HAL_GetTick();
 8000c7e:	f000 fedd 	bl	8001a3c <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	1ad2      	subs	r2, r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	639a      	str	r2, [r3, #56]	; 0x38
		gearbox->_state = Idle;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	48000400 	.word	0x48000400

08000cac <startUpshift>:

void startUpshift(Gearbox_t* gearbox)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d103      	bne.n	8000cc6 <startUpshift+0x1a>
		gearbox->_state = StartUpshift;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <startDownshift>:
void startDownshift(Gearbox_t* gearbox)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d103      	bne.n	8000cec <startDownshift+0x1a>
		gearbox->_state = StartDownshift;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <clutch>:

void clutch(bool ON)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	461a      	mov	r2, r3
 8000d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d0a:	4803      	ldr	r0, [pc, #12]	; (8000d18 <clutch+0x20>)
 8000d0c:	f003 fa36 	bl	800417c <HAL_GPIO_WritePin>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	48000400 	.word	0x48000400

08000d1c <getTimeout>:
	else
		return false;
}

bool getTimeout(uint32_t actual_time, uint32_t maximum_waiting_time)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
	if((HAL_GetTick() - actual_time) >= maximum_waiting_time)
 8000d26:	f000 fe89 	bl	8001a3c <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d801      	bhi.n	8000d3a <getTimeout+0x1e>
	{
		return true;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <getTimeout+0x20>
	}
	else
		return false;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000d68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc0:	4817      	ldr	r0, [pc, #92]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000dc2:	f000 fe5b 	bl	8001a7c <HAL_ADC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000dcc:	f000 f9d8 	bl	8001180 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4811      	ldr	r0, [pc, #68]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000ddc:	f001 ffe6 	bl	8002dac <HAL_ADCEx_MultiModeConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000de6:	f000 f9cb 	bl	8001180 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dea:	2303      	movs	r3, #3
 8000dec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000df6:	2305      	movs	r3, #5
 8000df8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <MX_ADC1_Init+0xdc>)
 8000e08:	f001 fce6 	bl	80027d8 <HAL_ADC_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e12:	f000 f9b5 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000118 	.word	0x20000118

08000e24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e34:	d113      	bne.n	8000e5e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_ADC_MspInit+0x44>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_ADC_MspInit+0x44>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_ADC_MspInit+0x44>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	2012      	movs	r0, #18
 8000e54:	f002 ffc9 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e58:	2012      	movs	r0, #18
 8000e5a:	f002 ffe2 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000

08000e6c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000e72:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_CAN_Init+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000e8a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000e8e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000e92:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000e96:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_CAN_Init+0x64>)
 8000ebe:	f002 f931 	bl	8003124 <HAL_CAN_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000ec8:	f000 f95a 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000168 	.word	0x20000168
 8000ed4:	40006400 	.word	0x40006400

08000ed8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a28      	ldr	r2, [pc, #160]	; (8000f98 <HAL_CAN_MspInit+0xc0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d149      	bne.n	8000f8e <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_CAN_MspInit+0xc4>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_CAN_MspInit+0xc4>)
 8000f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_CAN_MspInit+0xc4>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_CAN_MspInit+0xc4>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <HAL_CAN_MspInit+0xc4>)
 8000f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1c:	6153      	str	r3, [r2, #20]
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_CAN_MspInit+0xc4>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f002 ff85 	bl	8003e58 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2013      	movs	r0, #19
 8000f54:	f002 ff49 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000f58:	2013      	movs	r0, #19
 8000f5a:	f002 ff62 	bl	8003e22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	2014      	movs	r0, #20
 8000f64:	f002 ff41 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f002 ff5a 	bl	8003e22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	2015      	movs	r0, #21
 8000f74:	f002 ff39 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000f78:	2015      	movs	r0, #21
 8000f7a:	f002 ff52 	bl	8003e22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2016      	movs	r0, #22
 8000f84:	f002 ff31 	bl	8003dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000f88:	2016      	movs	r0, #22
 8000f8a:	f002 ff4a 	bl	8003e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40006400 	.word	0x40006400
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_GPIO_Init+0xf8>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a37      	ldr	r2, [pc, #220]	; (8001098 <MX_GPIO_Init+0xf8>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fc0:	6153      	str	r3, [r2, #20]
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_GPIO_Init+0xf8>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <MX_GPIO_Init+0xf8>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <MX_GPIO_Init+0xf8>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6153      	str	r3, [r2, #20]
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <MX_GPIO_Init+0xf8>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MX_GPIO_Init+0xf8>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a2b      	ldr	r2, [pc, #172]	; (8001098 <MX_GPIO_Init+0xf8>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b29      	ldr	r3, [pc, #164]	; (8001098 <MX_GPIO_Init+0xf8>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEAR_CUT_Pin|GEAR_UP_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f003 f8b8 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLUTCH_Pin|GEAR_DOWN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8001012:	4822      	ldr	r0, [pc, #136]	; (800109c <MX_GPIO_Init+0xfc>)
 8001014:	f003 f8b2 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_CUT_Pin;
 8001018:	2310      	movs	r3, #16
 800101a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_CUT_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	4619      	mov	r1, r3
 800102e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001032:	f002 ff11 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CLUTCH_Pin|GEAR_DOWN_Pin;
 8001036:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800103a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4619      	mov	r1, r3
 800104e:	4813      	ldr	r0, [pc, #76]	; (800109c <MX_GPIO_Init+0xfc>)
 8001050:	f002 ff02 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_UP_Pin;
 8001054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001058:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_UP_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f002 fef2 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_GPIO_Init+0xfc>)
 800108c:	f002 fee4 	bl	8003e58 <HAL_GPIO_Init>

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	48000400 	.word	0x48000400

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f000 fc70 	bl	8001988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 f80f 	bl	80010ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f7ff ff78 	bl	8000fa0 <MX_GPIO_Init>
  MX_CAN_Init();
 80010b0:	f7ff fedc 	bl	8000e6c <MX_CAN_Init>
  MX_OPAMP1_Init();
 80010b4:	f000 f86a 	bl	800118c <MX_OPAMP1_Init>
  MX_ADC1_Init();
 80010b8:	f7ff fe44 	bl	8000d44 <MX_ADC1_Init>
  MX_TIM2_Init();
 80010bc:	f000 f948 	bl	8001350 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 80010c0:	f7ff f8b6 	bl	8000230 <AppInit>
  AppProcess();
 80010c4:	f7ff f92e 	bl	8000324 <AppProcess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <main+0x28>

080010ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b09e      	sub	sp, #120	; 0x78
 80010ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010d4:	2228      	movs	r2, #40	; 0x28
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 fff7 	bl	80060cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	223c      	movs	r2, #60	; 0x3c
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 ffe9 	bl	80060cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010fe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001102:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001104:	2301      	movs	r3, #1
 8001106:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001108:	2301      	movs	r3, #1
 800110a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110c:	2302      	movs	r3, #2
 800110e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001116:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800111a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001120:	4618      	mov	r0, r3
 8001122:	f003 f933 	bl	800438c <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800112c:	f000 f828 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800113c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001140:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001146:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800114a:	2102      	movs	r1, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f004 f95b 	bl	8005408 <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001158:	f000 f812 	bl	8001180 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV16;
 8001160:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	4618      	mov	r0, r3
 800116a:	f004 fb35 	bl	80057d8 <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001174:	f000 f804 	bl	8001180 <Error_Handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3778      	adds	r7, #120	; 0x78
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	e7fe      	b.n	8001188 <Error_Handler+0x8>
	...

0800118c <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_OPAMP1_Init+0x38>)
 8001192:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <MX_OPAMP1_Init+0x3c>)
 8001194:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_OPAMP1_Init+0x38>)
 8001198:	2260      	movs	r2, #96	; 0x60
 800119a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_OPAMP1_Init+0x38>)
 800119e:	220c      	movs	r2, #12
 80011a0:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_OPAMP1_Init+0x38>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_OPAMP1_Init+0x38>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_OPAMP1_Init+0x38>)
 80011b0:	f003 f816 	bl	80041e0 <HAL_OPAMP_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 80011ba:	f7ff ffe1 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000190 	.word	0x20000190
 80011c8:	40010038 	.word	0x40010038

080011cc <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0f      	ldr	r2, [pc, #60]	; (8001228 <HAL_OPAMP_MspInit+0x5c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d118      	bne.n	8001220 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_OPAMP_MspInit+0x60>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_OPAMP_MspInit+0x60>)
 80011f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f8:	6153      	str	r3, [r2, #20]
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_OPAMP_MspInit+0x60>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GEAR_POS_Pin|GPIO_PIN_2;
 8001206:	2306      	movs	r3, #6
 8001208:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f002 fe1c 	bl	8003e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010038 	.word	0x40010038
 800122c:	40021000 	.word	0x40021000

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_MspInit+0x44>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_MspInit+0x44>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6193      	str	r3, [r2, #24]
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_MspInit+0x44>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x44>)
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x44>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001258:	61d3      	str	r3, [r2, #28]
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x44>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 fba6 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <ADC1_2_IRQHandler+0x10>)
 80012d2:	f000 ff01 	bl	80020d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000118 	.word	0x20000118

080012e0 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <USB_HP_CAN_TX_IRQHandler+0x10>)
 80012e6:	f002 fa6e 	bl	80037c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000168 	.word	0x20000168

080012f4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80012fa:	f002 fa64 	bl	80037c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000168 	.word	0x20000168

08001308 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <CAN_RX1_IRQHandler+0x10>)
 800130e:	f002 fa5a 	bl	80037c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000168 	.word	0x20000168

0800131c <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END CAN_SCE_IRQn 0 */
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <MX_TIM2_Init+0x98>)
 8001370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001374:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_TIM2_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_TIM2_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <MX_TIM2_Init+0x98>)
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <MX_TIM2_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_TIM2_Init+0x98>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001396:	4814      	ldr	r0, [pc, #80]	; (80013e8 <MX_TIM2_Init+0x98>)
 8001398:	f004 fbce 	bl	8005b38 <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013a2:	f7ff feed 	bl	8001180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_TIM2_Init+0x98>)
 80013b4:	f004 fc17 	bl	8005be6 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013be:	f7ff fedf 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_TIM2_Init+0x98>)
 80013d0:	f004 fdfc 	bl	8005fcc <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80013da:	f7ff fed1 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001c4 	.word	0x200001c4

080013ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fc:	d10b      	bne.n	8001416 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_TIM_Base_MspInit+0x38>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_TIM_Base_MspInit+0x38>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_TIM_Base_MspInit+0x38>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800142c:	f7ff ff7e 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <LoopForever+0x6>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	; (8001468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <LoopForever+0xe>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	; (8001474 <LoopForever+0x16>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f004 fe41 	bl	80060dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145a:	f7ff fe21 	bl	80010a0 <main>

0800145e <LoopForever>:

LoopForever:
    b LoopForever
 800145e:	e7fe      	b.n	800145e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001460:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800146c:	08006190 	.word	0x08006190
  ldr r2, =_sbss
 8001470:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001474:	20000468 	.word	0x20000468

08001478 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC3_IRQHandler>
	...

0800147c <CAN_FIFO_Add>:

#include "CAN_FIFO.h"



void CAN_FIFO_Add(struct CAN_FIFO *fifo, uint8_t *data_ptr){
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]

	if(fifo->empty){
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <CAN_FIFO_Add+0x2c>
		fifo->data_ptr[fifo->last_element]=data_ptr;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	785b      	ldrb	r3, [r3, #1]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	605a      	str	r2, [r3, #4]
		fifo->empty=0;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return;
 80014a6:	e02c      	b.n	8001502 <CAN_FIFO_Add+0x86>
	}
	fifo->last_element=(fifo->last_element+1)%CAN_FIFO_SIZE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	785b      	ldrb	r3, [r3, #1]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <CAN_FIFO_Add+0x90>)
 80014b0:	fb82 1203 	smull	r1, r2, r2, r3
 80014b4:	1151      	asrs	r1, r2, #5
 80014b6:	17da      	asrs	r2, r3, #31
 80014b8:	1a8a      	subs	r2, r1, r2
 80014ba:	2164      	movs	r1, #100	; 0x64
 80014bc:	fb01 f202 	mul.w	r2, r1, r2
 80014c0:	1a9a      	subs	r2, r3, r2
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	705a      	strb	r2, [r3, #1]
	if(fifo->last_element==fifo->first_element){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	785a      	ldrb	r2, [r3, #1]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10f      	bne.n	80014f4 <CAN_FIFO_Add+0x78>
		fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	4a0c      	ldr	r2, [pc, #48]	; (800150c <CAN_FIFO_Add+0x90>)
 80014dc:	fb82 1203 	smull	r1, r2, r2, r3
 80014e0:	1151      	asrs	r1, r2, #5
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	1a8a      	subs	r2, r1, r2
 80014e6:	2164      	movs	r1, #100	; 0x64
 80014e8:	fb01 f202 	mul.w	r2, r1, r2
 80014ec:	1a9a      	subs	r2, r3, r2
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	701a      	strb	r2, [r3, #0]
	}
	fifo->data_ptr[fifo->last_element]=data_ptr;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	605a      	str	r2, [r3, #4]


}
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	51eb851f 	.word	0x51eb851f

08001510 <CAN_FIFO_Get>:

/* return 0 if FIFO is empty */
uint8_t* CAN_FIFO_Get(struct CAN_FIFO *fifo){
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

	uint8_t *temp;
	if(fifo->empty){
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <CAN_FIFO_Get+0x16>
		return 0;
 8001522:	2300      	movs	r3, #0
 8001524:	e023      	b.n	800156e <CAN_FIFO_Get+0x5e>
	}
	temp=fifo->data_ptr[fifo->first_element];
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	60fb      	str	r3, [r7, #12]
	if(fifo->first_element==fifo->last_element){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	429a      	cmp	r2, r3
 800153e:	d105      	bne.n	800154c <CAN_FIFO_Get+0x3c>
		fifo->empty=1;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return temp;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	e010      	b.n	800156e <CAN_FIFO_Get+0x5e>
	}
	fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <CAN_FIFO_Get+0x6c>)
 8001554:	fb82 1203 	smull	r1, r2, r2, r3
 8001558:	1151      	asrs	r1, r2, #5
 800155a:	17da      	asrs	r2, r3, #31
 800155c:	1a8a      	subs	r2, r1, r2
 800155e:	2164      	movs	r1, #100	; 0x64
 8001560:	fb01 f202 	mul.w	r2, r1, r2
 8001564:	1a9a      	subs	r2, r3, r2
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	701a      	strb	r2, [r3, #0]
	return temp;
 800156c:	68fb      	ldr	r3, [r7, #12]

}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	51eb851f 	.word	0x51eb851f

08001580 <CAN_FIFO_Flush>:
uint8_t CAN_FIFO_Empty(struct CAN_FIFO *fifo){

	return fifo->empty;
}

void CAN_FIFO_Flush(struct CAN_FIFO *fifo){
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	fifo->first_element=0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
	fifo->last_element=0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	705a      	strb	r2, [r3, #1]
	fifo->empty=1;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <CAN_Init>:
	struct can_frame* pFrames[CAN_MAX_FRAME_NUM];
	uint8_t values_num;
}_can_info;


void CAN_Init(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	CAN_HW_Init();
 80015ac:	f000 f8c6 	bl	800173c <CAN_HW_Init>
	CAN_FIFO_Flush(&FIFO_CAN_TX);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <CAN_Init+0x14>)
 80015b2:	f7ff ffe5 	bl	8001580 <CAN_FIFO_Flush>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000214 	.word	0x20000214

080015c0 <CAN_InitFrame>:

void CAN_InitFrame(struct can_frame* pFrame, uint16_t id, uint16_t period, uint8_t dlc) {
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	817b      	strh	r3, [r7, #10]
 80015d2:	460b      	mov	r3, r1
 80015d4:	813b      	strh	r3, [r7, #8]
 80015d6:	4613      	mov	r3, r2
 80015d8:	71fb      	strb	r3, [r7, #7]
	
	pFrame->core.id = id;
 80015da:	897a      	ldrh	r2, [r7, #10]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
	pFrame->period = period;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	893a      	ldrh	r2, [r7, #8]
 80015e4:	829a      	strh	r2, [r3, #20]
	pFrame->core.dlc = dlc;
 80015e6:	79fa      	ldrb	r2, [r7, #7]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	609a      	str	r2, [r3, #8]
	_can_info.pFrames[_can_info.frames_num] = pFrame;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <CAN_InitFrame+0x54>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4a08      	ldr	r2, [pc, #32]	; (8001614 <CAN_InitFrame+0x54>)
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	605a      	str	r2, [r3, #4]
	_can_info.frames_num++;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <CAN_InitFrame+0x54>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <CAN_InitFrame+0x54>)
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	200003ac 	.word	0x200003ac

08001618 <FilterFrame>:
	_can_info.values_num++;
}

/* returns index of frame in _can_info or
   returns 255 if didn't found matching frame*/
uint8_t FilterFrame(uint16_t id){
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
	
	uint8_t i;
	for(i = 0; i < _can_info.frames_num; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	e00d      	b.n	8001644 <FilterFrame+0x2c>
		if(_can_info.pFrames[i]->core.id == id){
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <FilterFrame+0x44>)
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	429a      	cmp	r2, r3
 8001638:	d101      	bne.n	800163e <FilterFrame+0x26>
			return i;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	e008      	b.n	8001650 <FilterFrame+0x38>
	for(i = 0; i < _can_info.frames_num; i++){
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	3301      	adds	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <FilterFrame+0x44>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	429a      	cmp	r2, r3
 800164c:	d3ec      	bcc.n	8001628 <FilterFrame+0x10>
		}
	}
	return 255;
 800164e:	23ff      	movs	r3, #255	; 0xff
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	200003ac 	.word	0x200003ac

08001660 <CAN_GetTickMs>:
	
	value = (value + pCan_value->ofs)*pCan_value->mult/pCan_value->div;
	return value;
}

inline uint32_t CAN_GetTickMs(){
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	return CAN_HW_GetTickMs();
 8001664:	f000 f8ac 	bl	80017c0 <CAN_HW_GetTickMs>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <CAN_SendFrame>:
	if(!pFrame->tick_ms) return 0;
	if(CAN_GetTickMs() - pFrame->tick_ms > pFrame->period*10) return 0;
	return 1;
}

inline uint8_t CAN_SendFrame(struct can_frame* pFrame) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if(!CAN_HW_SendFrame(pFrame)){
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f8a9 	bl	80017d0 <CAN_HW_SendFrame>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <CAN_SendFrame+0x1c>
		CAN_FIFO_Add(&FIFO_CAN_TX, (uint8_t*)pFrame);
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4804      	ldr	r0, [pc, #16]	; (8001698 <CAN_SendFrame+0x28>)
 8001688:	f7ff fef8 	bl	800147c <CAN_FIFO_Add>
	}
	return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000214 	.word	0x20000214

0800169c <CAN_ReceiveCallback>:
void CAN_SetRxCallback(void (*callback)(struct can_frame* frame))
{
	CAN_RxCallback = callback;
}

inline void CAN_ReceiveCallback(struct can_msg* msg){
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	uint8_t index;
	index = FilterFrame(msg->id);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ffb4 	bl	8001618 <FilterFrame>
 80016b0:	4603      	mov	r3, r0
 80016b2:	73fb      	strb	r3, [r7, #15]
	if(index==255) return;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2bff      	cmp	r3, #255	; 0xff
 80016b8:	d023      	beq.n	8001702 <CAN_ReceiveCallback+0x66>
	memcpy(_can_info.pFrames[index]->core.data, msg->data, 8);
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <CAN_ReceiveCallback+0x70>)
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f103 000c 	add.w	r0, r3, #12
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	330c      	adds	r3, #12
 80016cc:	2208      	movs	r2, #8
 80016ce:	4619      	mov	r1, r3
 80016d0:	f004 fd28 	bl	8006124 <memcpy>
	_can_info.pFrames[index]->tick_ms = CAN_GetTickMs();
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	4a0d      	ldr	r2, [pc, #52]	; (800170c <CAN_ReceiveCallback+0x70>)
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	685c      	ldr	r4, [r3, #4]
 80016de:	f7ff ffbf 	bl	8001660 <CAN_GetTickMs>
 80016e2:	4603      	mov	r3, r0
 80016e4:	61a3      	str	r3, [r4, #24]
	if(CAN_RxCallback != NULL) CAN_RxCallback(_can_info.pFrames[index]);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <CAN_ReceiveCallback+0x74>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00a      	beq.n	8001704 <CAN_ReceiveCallback+0x68>
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <CAN_ReceiveCallback+0x74>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	4905      	ldr	r1, [pc, #20]	; (800170c <CAN_ReceiveCallback+0x70>)
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	4618      	mov	r0, r3
 80016fe:	4790      	blx	r2
 8001700:	e000      	b.n	8001704 <CAN_ReceiveCallback+0x68>
	if(index==255) return;
 8001702:	bf00      	nop
}
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	bf00      	nop
 800170c:	200003ac 	.word	0x200003ac
 8001710:	20000210 	.word	0x20000210

08001714 <CAN_TxCompleteCallback>:

void CAN_TxCompleteCallback(){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0

	uint8_t* pFrame;


	pFrame = CAN_FIFO_Get(&FIFO_CAN_TX);
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <CAN_TxCompleteCallback+0x24>)
 800171c:	f7ff fef8 	bl	8001510 <CAN_FIFO_Get>
 8001720:	6078      	str	r0, [r7, #4]
	if(!pFrame) return;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <CAN_TxCompleteCallback+0x1c>
	CAN_SendFrame((struct can_frame*)pFrame);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ffa1 	bl	8001670 <CAN_SendFrame>
 800172e:	e000      	b.n	8001732 <CAN_TxCompleteCallback+0x1e>
	if(!pFrame) return;
 8001730:	bf00      	nop
}
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000214 	.word	0x20000214

0800173c <CAN_HW_Init>:
#include "CAN_LIB_HW.h"

uint8_t retransmision_counter;

void CAN_HW_Init(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0

	static CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <CAN_HW_Init+0x7c>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <CAN_HW_Init+0x7c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <CAN_HW_Init+0x7c>)
 800174e:	2201      	movs	r2, #1
 8001750:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <CAN_HW_Init+0x7c>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <CAN_HW_Init+0x7c>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <CAN_HW_Init+0x7c>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <CAN_HW_Init+0x7c>)
 8001766:	2200      	movs	r2, #0
 8001768:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <CAN_HW_Init+0x7c>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <CAN_HW_Init+0x7c>)
 8001772:	2201      	movs	r2, #1
 8001774:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <CAN_HW_Init+0x7c>)
 8001778:	220e      	movs	r2, #14
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&CAN_HANDLE, &sFilterConfig) != HAL_OK)
 800177c:	490e      	ldr	r1, [pc, #56]	; (80017b8 <CAN_HW_Init+0x7c>)
 800177e:	480f      	ldr	r0, [pc, #60]	; (80017bc <CAN_HW_Init+0x80>)
 8001780:	f001 fdcb 	bl	800331a <HAL_CAN_ConfigFilter>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <CAN_HW_Init+0x52>
	{
		/* Filter configuration Error */
		Error_Handler();
 800178a:	f7ff fcf9 	bl	8001180 <Error_Handler>
	}

	if (HAL_CAN_Start(&CAN_HANDLE) != HAL_OK)
 800178e:	480b      	ldr	r0, [pc, #44]	; (80017bc <CAN_HW_Init+0x80>)
 8001790:	f001 fe8d 	bl	80034ae <HAL_CAN_Start>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <CAN_HW_Init+0x62>
	{
		/* Start Error */
		Error_Handler();
 800179a:	f7ff fcf1 	bl	8001180 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&CAN_HANDLE, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN
 800179e:	f248 010f 	movw	r1, #32783	; 0x800f
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <CAN_HW_Init+0x80>)
 80017a4:	f001 ffe9 	bl	800377a <HAL_CAN_ActivateNotification>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <CAN_HW_Init+0x76>
			| CAN_IT_RX_FIFO0_FULL | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 80017ae:	f7ff fce7 	bl	8001180 <Error_Handler>
	}

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000408 	.word	0x20000408
 80017bc:	20000168 	.word	0x20000168

080017c0 <CAN_HW_GetTickMs>:

inline uint32_t CAN_HW_GetTickMs(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80017c4:	f000 f93a 	bl	8001a3c <HAL_GetTick>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <CAN_HW_SendFrame>:

uint8_t CAN_HW_SendFrame(struct can_frame* pFrame){
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

	/* Check if mailbox is free */
    if ((CAN_HANDLE.Instance->TSR & CAN_TSR_TME0) == 0U) return 0;
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <CAN_HW_SendFrame+0xc0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <CAN_HW_SendFrame+0x1a>
 80017e6:	2300      	movs	r3, #0
 80017e8:	e04b      	b.n	8001882 <CAN_HW_SendFrame+0xb2>

    /* Set up the Id */
    if(pFrame->core.isExtId){
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <CAN_HW_SendFrame+0x36>
    	CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_EXID_Pos) | CAN_ID_EXT | CAN_RTR_DATA);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	00da      	lsls	r2, r3, #3
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <CAN_HW_SendFrame+0xc0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0204 	orr.w	r2, r2, #4
 8001800:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001804:	e006      	b.n	8001814 <CAN_HW_SendFrame+0x44>
    }
    else{
        CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_STID_Pos) | CAN_RTR_DATA);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <CAN_HW_SendFrame+0xc0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0552      	lsls	r2, r2, #21
 8001810:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    }

    /* Set up the DLC */
    CAN_HANDLE.Instance->sTxMailBox[0].TDTR = pFrame->core.dlc;
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <CAN_HW_SendFrame+0xc0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6892      	ldr	r2, [r2, #8]
 800181c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    /* Set up the data field */
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDHR,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7cdb      	ldrb	r3, [r3, #19]
 8001824:	061a      	lsls	r2, r3, #24
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7c9b      	ldrb	r3, [r3, #18]
 800182a:	041b      	lsls	r3, r3, #16
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7c5b      	ldrb	r3, [r3, #17]
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7c1b      	ldrb	r3, [r3, #16]
 800183a:	4619      	mov	r1, r3
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <CAN_HW_SendFrame+0xc0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
              ((uint32_t)pFrame->core.data[7] << CAN_TDH0R_DATA7_Pos) |
              ((uint32_t)pFrame->core.data[6] << CAN_TDH0R_DATA6_Pos) |
              ((uint32_t)pFrame->core.data[5] << CAN_TDH0R_DATA5_Pos) |
              ((uint32_t)pFrame->core.data[4] << CAN_TDH0R_DATA4_Pos));
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDLR,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7bdb      	ldrb	r3, [r3, #15]
 800184a:	061a      	lsls	r2, r3, #24
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7b9b      	ldrb	r3, [r3, #14]
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7b5b      	ldrb	r3, [r3, #13]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7b1b      	ldrb	r3, [r3, #12]
 8001860:	4619      	mov	r1, r3
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <CAN_HW_SendFrame+0xc0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
              ((uint32_t)pFrame->core.data[2] << CAN_TDL0R_DATA2_Pos) |
              ((uint32_t)pFrame->core.data[1] << CAN_TDL0R_DATA1_Pos) |
              ((uint32_t)pFrame->core.data[0] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(CAN_HANDLE.Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <CAN_HW_SendFrame+0xc0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <CAN_HW_SendFrame+0xc0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    return 1;
 8001880:	2301      	movs	r3, #1
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000168 	.word	0x20000168

08001894 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 800189c:	f7ff ff3a 	bl	8001714 <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000404 	.word	0x20000404

080018b4 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 80018bc:	f7ff ff2a 	bl	8001714 <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_CAN_TxMailbox0AbortCallback+0x1c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000404 	.word	0x20000404

080018d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

	static struct can_msg msg;
	static CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data);
 80018dc:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80018e0:	2100      	movs	r1, #0
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f001 fe27 	bl	8003536 <HAL_CAN_GetRxMessage>
	msg.dlc = RxHeader.DLC;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018ee:	6093      	str	r3, [r2, #8]
	msg.id = RxHeader.StdId;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a06      	ldr	r2, [pc, #24]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018f6:	6053      	str	r3, [r2, #4]
	CAN_ReceiveCallback(&msg);
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018fa:	f7ff fecf 	bl	800169c <CAN_ReceiveCallback>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000458 	.word	0x20000458
 800190c:	20000430 	.word	0x20000430
 8001910:	2000044c 	.word	0x2000044c

08001914 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

	static uint32_t errorcode;
	errorcode = HAL_CAN_GetError(hcan);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f002 f94f 	bl	8003bd4 <HAL_CAN_GetError>
 8001936:	4603      	mov	r3, r0
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_CAN_ErrorCallback+0x58>)
 800193a:	6013      	str	r3, [r2, #0]
	HAL_CAN_ResetError(hcan);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f002 f955 	bl	8003bec <HAL_CAN_ResetError>

	/* arbitration lost, retransmit */
	if(errorcode & HAL_CAN_ERROR_TX_ALST0){
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_CAN_ErrorCallback+0x58>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800194a:	2b00      	cmp	r3, #0
 800194c:	d013      	beq.n	8001976 <HAL_CAN_ErrorCallback+0x4e>

		if(retransmision_counter < CAN_ARB_LOST_RETR){
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_CAN_ErrorCallback+0x5c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b13      	cmp	r3, #19
 8001954:	d80f      	bhi.n	8001976 <HAL_CAN_ErrorCallback+0x4e>
		    SET_BIT(CAN_HANDLE->Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			retransmision_counter++;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_CAN_ErrorCallback+0x5c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	3301      	adds	r3, #1
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <HAL_CAN_ErrorCallback+0x5c>)
 8001974:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000460 	.word	0x20000460
 8001984:	20000404 	.word	0x20000404

08001988 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_Init+0x28>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_Init+0x28>)
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f002 fa1b 	bl	8003dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199e:	200f      	movs	r0, #15
 80019a0:	f000 f808 	bl	80019b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a4:	f7ff fc44 	bl	8001230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40022000 	.word	0x40022000

080019b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x54>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x58>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fa33 	bl	8003e3e <HAL_SYSTICK_Config>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00e      	b.n	8001a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d80a      	bhi.n	80019fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e8:	2200      	movs	r2, #0
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f002 f9fb 	bl	8003dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <HAL_InitTick+0x5c>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	20000464 	.word	0x20000464

08001a3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000464 	.word	0x20000464

08001a54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b09a      	sub	sp, #104	; 0x68
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e1c9      	b.n	8001e30 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d176      	bne.n	8001b9c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d152      	bne.n	8001b5c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff f9a7 	bl	8000e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d13b      	bne.n	8001b5c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f001 fab7 	bl	8003058 <ADC_Disable>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d12f      	bne.n	8001b5c <HAL_ADC_Init+0xe0>
 8001afc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d12b      	bne.n	8001b5c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b0c:	f023 0302 	bic.w	r3, r3, #2
 8001b10:	f043 0202 	orr.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b26:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b36:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <HAL_ADC_Init+0x2d8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a86      	ldr	r2, [pc, #536]	; (8001d58 <HAL_ADC_Init+0x2dc>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9a      	lsrs	r2, r3, #18
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b4e:	e002      	b.n	8001b56 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1f9      	bne.n	8001b50 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b78:	d110      	bne.n	8001b9c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f023 0312 	bic.w	r3, r3, #18
 8001b82:	f043 0210 	orr.w	r2, r3, #16
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f043 0201 	orr.w	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 8136 	bne.w	8001e16 <HAL_ADC_Init+0x39a>
 8001baa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8131 	bne.w	8001e16 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 8129 	bne.w	8001e16 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bcc:	f043 0202 	orr.w	r2, r3, #2
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bdc:	d004      	beq.n	8001be8 <HAL_ADC_Init+0x16c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5e      	ldr	r2, [pc, #376]	; (8001d5c <HAL_ADC_Init+0x2e0>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_Init+0x170>
 8001be8:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_ADC_Init+0x2e4>)
 8001bea:	e000      	b.n	8001bee <HAL_ADC_Init+0x172>
 8001bec:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <HAL_ADC_Init+0x2e8>)
 8001bee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf8:	d102      	bne.n	8001c00 <HAL_ADC_Init+0x184>
 8001bfa:	4b58      	ldr	r3, [pc, #352]	; (8001d5c <HAL_ADC_Init+0x2e0>)
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e01a      	b.n	8001c36 <HAL_ADC_Init+0x1ba>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a55      	ldr	r2, [pc, #340]	; (8001d5c <HAL_ADC_Init+0x2e0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d103      	bne.n	8001c12 <HAL_ADC_Init+0x196>
 8001c0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e011      	b.n	8001c36 <HAL_ADC_Init+0x1ba>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_ADC_Init+0x2ec>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d102      	bne.n	8001c22 <HAL_ADC_Init+0x1a6>
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_ADC_Init+0x2f0>)
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e009      	b.n	8001c36 <HAL_ADC_Init+0x1ba>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_ADC_Init+0x2f0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d102      	bne.n	8001c32 <HAL_ADC_Init+0x1b6>
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_ADC_Init+0x2ec>)
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e001      	b.n	8001c36 <HAL_ADC_Init+0x1ba>
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d108      	bne.n	8001c56 <HAL_ADC_Init+0x1da>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_Init+0x1da>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_ADC_Init+0x1dc>
 8001c56:	2300      	movs	r3, #0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11c      	bne.n	8001c96 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d107      	bne.n	8001c7e <HAL_ADC_Init+0x202>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_Init+0x202>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_ADC_Init+0x204>
 8001c7e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d108      	bne.n	8001c96 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c94:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7e5b      	ldrb	r3, [r3, #25]
 8001c9a:	035b      	lsls	r3, r3, #13
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ca0:	2a01      	cmp	r2, #1
 8001ca2:	d002      	beq.n	8001caa <HAL_ADC_Init+0x22e>
 8001ca4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_Init+0x230>
 8001caa:	2200      	movs	r2, #0
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d11b      	bne.n	8001d02 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7e5b      	ldrb	r3, [r3, #25]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	045a      	lsls	r2, r3, #17
 8001cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ce4:	e00d      	b.n	8001d02 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d03a      	beq.n	8001d80 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_ADC_Init+0x2ec>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d004      	beq.n	8001d1e <HAL_ADC_Init+0x2a2>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <HAL_ADC_Init+0x2f0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d128      	bne.n	8001d70 <HAL_ADC_Init+0x2f4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001d26:	d012      	beq.n	8001d4e <HAL_ADC_Init+0x2d2>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d30:	d00a      	beq.n	8001d48 <HAL_ADC_Init+0x2cc>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001d3a:	d002      	beq.n	8001d42 <HAL_ADC_Init+0x2c6>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	e018      	b.n	8001d74 <HAL_ADC_Init+0x2f8>
 8001d42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d46:	e015      	b.n	8001d74 <HAL_ADC_Init+0x2f8>
 8001d48:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001d4c:	e012      	b.n	8001d74 <HAL_ADC_Init+0x2f8>
 8001d4e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001d52:	e00f      	b.n	8001d74 <HAL_ADC_Init+0x2f8>
 8001d54:	20000000 	.word	0x20000000
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	50000100 	.word	0x50000100
 8001d60:	50000300 	.word	0x50000300
 8001d64:	50000700 	.word	0x50000700
 8001d68:	50000400 	.word	0x50000400
 8001d6c:	50000500 	.word	0x50000500
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d114      	bne.n	8001db8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d9c:	f023 0302 	bic.w	r3, r3, #2
 8001da0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7e1b      	ldrb	r3, [r3, #24]
 8001da6:	039a      	lsls	r2, r3, #14
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4313      	orrs	r3, r2
 8001db2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001db4:	4313      	orrs	r3, r2
 8001db6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <HAL_ADC_Init+0x3bc>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10c      	bne.n	8001dee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f023 010f 	bic.w	r1, r3, #15
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
 8001dec:	e007      	b.n	8001dfe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 020f 	bic.w	r2, r2, #15
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f023 0303 	bic.w	r3, r3, #3
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
 8001e14:	e00a      	b.n	8001e2c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f023 0312 	bic.w	r3, r3, #18
 8001e1e:	f043 0210 	orr.w	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e26:	2301      	movs	r3, #1
 8001e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e2c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3768      	adds	r7, #104	; 0x68
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	fff0c007 	.word	0xfff0c007

08001e3c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 8123 	bne.w	800209e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Start_IT+0x2a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e11e      	b.n	80020a4 <HAL_ADC_Start_IT+0x268>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f001 f88e 	bl	8002f90 <ADC_Enable>
 8001e74:	4603      	mov	r3, r0
 8001e76:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 810a 	bne.w	8002094 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Start_IT+0x6c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a82      	ldr	r2, [pc, #520]	; (80020ac <HAL_ADC_Start_IT+0x270>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ADC_Start_IT+0x7a>
 8001ea8:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_ADC_Start_IT+0x274>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d010      	beq.n	8001ed6 <HAL_ADC_Start_IT+0x9a>
 8001eb4:	e005      	b.n	8001ec2 <HAL_ADC_Start_IT+0x86>
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <HAL_ADC_Start_IT+0x278>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_ADC_Start_IT+0x9a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eca:	d004      	beq.n	8001ed6 <HAL_ADC_Start_IT+0x9a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a79      	ldr	r2, [pc, #484]	; (80020b8 <HAL_ADC_Start_IT+0x27c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d115      	bne.n	8001f02 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d036      	beq.n	8001f5e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ef8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001f00:	e02d      	b.n	8001f5e <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f16:	d004      	beq.n	8001f22 <HAL_ADC_Start_IT+0xe6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a63      	ldr	r2, [pc, #396]	; (80020ac <HAL_ADC_Start_IT+0x270>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10a      	bne.n	8001f38 <HAL_ADC_Start_IT+0xfc>
 8001f22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	e008      	b.n	8001f4a <HAL_ADC_Start_IT+0x10e>
 8001f38:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <HAL_ADC_Start_IT+0x27c>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6a:	d106      	bne.n	8001f7a <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	f023 0206 	bic.w	r2, r3, #6
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
 8001f78:	e002      	b.n	8001f80 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	221c      	movs	r2, #28
 8001f8e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d110      	bne.n	8001fba <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0208 	orr.w	r2, r2, #8
 8001fb6:	605a      	str	r2, [r3, #4]
          break;
 8001fb8:	e008      	b.n	8001fcc <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 020c 	orr.w	r2, r2, #12
 8001fc8:	605a      	str	r2, [r3, #4]
          break;
 8001fca:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0210 	bic.w	r2, r2, #16
 8001fe2:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fec:	d004      	beq.n	8001ff8 <HAL_ADC_Start_IT+0x1bc>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2e      	ldr	r2, [pc, #184]	; (80020ac <HAL_ADC_Start_IT+0x270>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d106      	bne.n	8002006 <HAL_ADC_Start_IT+0x1ca>
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_ADC_Start_IT+0x274>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2b00      	cmp	r3, #0
 8002002:	d03e      	beq.n	8002082 <HAL_ADC_Start_IT+0x246>
 8002004:	e005      	b.n	8002012 <HAL_ADC_Start_IT+0x1d6>
 8002006:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_ADC_Start_IT+0x278>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	2b00      	cmp	r3, #0
 8002010:	d037      	beq.n	8002082 <HAL_ADC_Start_IT+0x246>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Start_IT+0x1ea>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_ADC_Start_IT+0x270>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d106      	bne.n	8002034 <HAL_ADC_Start_IT+0x1f8>
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <HAL_ADC_Start_IT+0x274>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2b05      	cmp	r3, #5
 8002030:	d027      	beq.n	8002082 <HAL_ADC_Start_IT+0x246>
 8002032:	e005      	b.n	8002040 <HAL_ADC_Start_IT+0x204>
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <HAL_ADC_Start_IT+0x278>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	2b05      	cmp	r3, #5
 800203e:	d020      	beq.n	8002082 <HAL_ADC_Start_IT+0x246>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002048:	d004      	beq.n	8002054 <HAL_ADC_Start_IT+0x218>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a17      	ldr	r2, [pc, #92]	; (80020ac <HAL_ADC_Start_IT+0x270>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d106      	bne.n	8002062 <HAL_ADC_Start_IT+0x226>
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <HAL_ADC_Start_IT+0x274>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	2b09      	cmp	r3, #9
 800205e:	d010      	beq.n	8002082 <HAL_ADC_Start_IT+0x246>
 8002060:	e005      	b.n	800206e <HAL_ADC_Start_IT+0x232>
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_ADC_Start_IT+0x278>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2b09      	cmp	r3, #9
 800206c:	d009      	beq.n	8002082 <HAL_ADC_Start_IT+0x246>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002076:	d004      	beq.n	8002082 <HAL_ADC_Start_IT+0x246>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_ADC_Start_IT+0x27c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10f      	bne.n	80020a2 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0204 	orr.w	r2, r2, #4
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	e006      	b.n	80020a2 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800209c:	e001      	b.n	80020a2 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800209e:	2302      	movs	r3, #2
 80020a0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	50000100 	.word	0x50000100
 80020b0:	50000300 	.word	0x50000300
 80020b4:	50000700 	.word	0x50000700
 80020b8:	50000400 	.word	0x50000400

080020bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <HAL_ADC_IRQHandler+0x38>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80bc 	beq.w	8002294 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80b6 	beq.w	8002294 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002148:	d004      	beq.n	8002154 <HAL_ADC_IRQHandler+0x7c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a90      	ldr	r2, [pc, #576]	; (8002390 <HAL_ADC_IRQHandler+0x2b8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d106      	bne.n	8002162 <HAL_ADC_IRQHandler+0x8a>
 8002154:	4b8f      	ldr	r3, [pc, #572]	; (8002394 <HAL_ADC_IRQHandler+0x2bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2b00      	cmp	r3, #0
 800215e:	d03e      	beq.n	80021de <HAL_ADC_IRQHandler+0x106>
 8002160:	e005      	b.n	800216e <HAL_ADC_IRQHandler+0x96>
 8002162:	4b8d      	ldr	r3, [pc, #564]	; (8002398 <HAL_ADC_IRQHandler+0x2c0>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2b00      	cmp	r3, #0
 800216c:	d037      	beq.n	80021de <HAL_ADC_IRQHandler+0x106>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002176:	d004      	beq.n	8002182 <HAL_ADC_IRQHandler+0xaa>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a84      	ldr	r2, [pc, #528]	; (8002390 <HAL_ADC_IRQHandler+0x2b8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d106      	bne.n	8002190 <HAL_ADC_IRQHandler+0xb8>
 8002182:	4b84      	ldr	r3, [pc, #528]	; (8002394 <HAL_ADC_IRQHandler+0x2bc>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2b05      	cmp	r3, #5
 800218c:	d027      	beq.n	80021de <HAL_ADC_IRQHandler+0x106>
 800218e:	e005      	b.n	800219c <HAL_ADC_IRQHandler+0xc4>
 8002190:	4b81      	ldr	r3, [pc, #516]	; (8002398 <HAL_ADC_IRQHandler+0x2c0>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2b05      	cmp	r3, #5
 800219a:	d020      	beq.n	80021de <HAL_ADC_IRQHandler+0x106>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021a4:	d004      	beq.n	80021b0 <HAL_ADC_IRQHandler+0xd8>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a79      	ldr	r2, [pc, #484]	; (8002390 <HAL_ADC_IRQHandler+0x2b8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d106      	bne.n	80021be <HAL_ADC_IRQHandler+0xe6>
 80021b0:	4b78      	ldr	r3, [pc, #480]	; (8002394 <HAL_ADC_IRQHandler+0x2bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	d010      	beq.n	80021de <HAL_ADC_IRQHandler+0x106>
 80021bc:	e005      	b.n	80021ca <HAL_ADC_IRQHandler+0xf2>
 80021be:	4b76      	ldr	r3, [pc, #472]	; (8002398 <HAL_ADC_IRQHandler+0x2c0>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 031f 	and.w	r3, r3, #31
 80021c6:	2b09      	cmp	r3, #9
 80021c8:	d009      	beq.n	80021de <HAL_ADC_IRQHandler+0x106>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d2:	d004      	beq.n	80021de <HAL_ADC_IRQHandler+0x106>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a70      	ldr	r2, [pc, #448]	; (800239c <HAL_ADC_IRQHandler+0x2c4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d104      	bne.n	80021e8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	e00f      	b.n	8002208 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f0:	d004      	beq.n	80021fc <HAL_ADC_IRQHandler+0x124>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a66      	ldr	r2, [pc, #408]	; (8002390 <HAL_ADC_IRQHandler+0x2b8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d102      	bne.n	8002202 <HAL_ADC_IRQHandler+0x12a>
 80021fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002200:	e000      	b.n	8002204 <HAL_ADC_IRQHandler+0x12c>
 8002202:	4b66      	ldr	r3, [pc, #408]	; (800239c <HAL_ADC_IRQHandler+0x2c4>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002212:	2b00      	cmp	r3, #0
 8002214:	d137      	bne.n	8002286 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800221c:	2b00      	cmp	r3, #0
 800221e:	d132      	bne.n	8002286 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d02d      	beq.n	8002286 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d11a      	bne.n	800226e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 020c 	bic.w	r2, r2, #12
 8002246:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d112      	bne.n	8002286 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
 800226c:	e00b      	b.n	8002286 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f043 0210 	orr.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fd ffb0 	bl	80001ec <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	220c      	movs	r2, #12
 8002292:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x1d0>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8138 	beq.w	8002524 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8132 	beq.w	8002524 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022d4:	d004      	beq.n	80022e0 <HAL_ADC_IRQHandler+0x208>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <HAL_ADC_IRQHandler+0x2b8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d106      	bne.n	80022ee <HAL_ADC_IRQHandler+0x216>
 80022e0:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <HAL_ADC_IRQHandler+0x2bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03e      	beq.n	800236a <HAL_ADC_IRQHandler+0x292>
 80022ec:	e005      	b.n	80022fa <HAL_ADC_IRQHandler+0x222>
 80022ee:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_ADC_IRQHandler+0x2c0>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d037      	beq.n	800236a <HAL_ADC_IRQHandler+0x292>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002302:	d004      	beq.n	800230e <HAL_ADC_IRQHandler+0x236>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a21      	ldr	r2, [pc, #132]	; (8002390 <HAL_ADC_IRQHandler+0x2b8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d106      	bne.n	800231c <HAL_ADC_IRQHandler+0x244>
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <HAL_ADC_IRQHandler+0x2bc>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2b05      	cmp	r3, #5
 8002318:	d027      	beq.n	800236a <HAL_ADC_IRQHandler+0x292>
 800231a:	e005      	b.n	8002328 <HAL_ADC_IRQHandler+0x250>
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <HAL_ADC_IRQHandler+0x2c0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	2b05      	cmp	r3, #5
 8002326:	d020      	beq.n	800236a <HAL_ADC_IRQHandler+0x292>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002330:	d004      	beq.n	800233c <HAL_ADC_IRQHandler+0x264>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a16      	ldr	r2, [pc, #88]	; (8002390 <HAL_ADC_IRQHandler+0x2b8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d106      	bne.n	800234a <HAL_ADC_IRQHandler+0x272>
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_ADC_IRQHandler+0x2bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	2b09      	cmp	r3, #9
 8002346:	d010      	beq.n	800236a <HAL_ADC_IRQHandler+0x292>
 8002348:	e005      	b.n	8002356 <HAL_ADC_IRQHandler+0x27e>
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_ADC_IRQHandler+0x2c0>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	2b09      	cmp	r3, #9
 8002354:	d009      	beq.n	800236a <HAL_ADC_IRQHandler+0x292>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800235e:	d004      	beq.n	800236a <HAL_ADC_IRQHandler+0x292>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_ADC_IRQHandler+0x2c4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d104      	bne.n	8002374 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e018      	b.n	80023a6 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800237c:	d004      	beq.n	8002388 <HAL_ADC_IRQHandler+0x2b0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a03      	ldr	r2, [pc, #12]	; (8002390 <HAL_ADC_IRQHandler+0x2b8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d10b      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x2c8>
 8002388:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800238c:	e009      	b.n	80023a2 <HAL_ADC_IRQHandler+0x2ca>
 800238e:	bf00      	nop
 8002390:	50000100 	.word	0x50000100
 8002394:	50000300 	.word	0x50000300
 8002398:	50000700 	.word	0x50000700
 800239c:	50000400 	.word	0x50000400
 80023a0:	4b92      	ldr	r3, [pc, #584]	; (80025ec <HAL_ADC_IRQHandler+0x514>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f040 80b0 	bne.w	8002516 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00d      	beq.n	80023dc <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 80a3 	bne.w	8002516 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 809d 	bne.w	8002516 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8097 	beq.w	8002516 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f0:	d004      	beq.n	80023fc <HAL_ADC_IRQHandler+0x324>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7e      	ldr	r2, [pc, #504]	; (80025f0 <HAL_ADC_IRQHandler+0x518>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d106      	bne.n	800240a <HAL_ADC_IRQHandler+0x332>
 80023fc:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <HAL_ADC_IRQHandler+0x51c>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2b00      	cmp	r3, #0
 8002406:	d03e      	beq.n	8002486 <HAL_ADC_IRQHandler+0x3ae>
 8002408:	e005      	b.n	8002416 <HAL_ADC_IRQHandler+0x33e>
 800240a:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_ADC_IRQHandler+0x520>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2b00      	cmp	r3, #0
 8002414:	d037      	beq.n	8002486 <HAL_ADC_IRQHandler+0x3ae>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800241e:	d004      	beq.n	800242a <HAL_ADC_IRQHandler+0x352>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a72      	ldr	r2, [pc, #456]	; (80025f0 <HAL_ADC_IRQHandler+0x518>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d106      	bne.n	8002438 <HAL_ADC_IRQHandler+0x360>
 800242a:	4b72      	ldr	r3, [pc, #456]	; (80025f4 <HAL_ADC_IRQHandler+0x51c>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2b06      	cmp	r3, #6
 8002434:	d027      	beq.n	8002486 <HAL_ADC_IRQHandler+0x3ae>
 8002436:	e005      	b.n	8002444 <HAL_ADC_IRQHandler+0x36c>
 8002438:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_ADC_IRQHandler+0x520>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b06      	cmp	r3, #6
 8002442:	d020      	beq.n	8002486 <HAL_ADC_IRQHandler+0x3ae>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800244c:	d004      	beq.n	8002458 <HAL_ADC_IRQHandler+0x380>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a67      	ldr	r2, [pc, #412]	; (80025f0 <HAL_ADC_IRQHandler+0x518>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d106      	bne.n	8002466 <HAL_ADC_IRQHandler+0x38e>
 8002458:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_ADC_IRQHandler+0x51c>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2b07      	cmp	r3, #7
 8002462:	d010      	beq.n	8002486 <HAL_ADC_IRQHandler+0x3ae>
 8002464:	e005      	b.n	8002472 <HAL_ADC_IRQHandler+0x39a>
 8002466:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <HAL_ADC_IRQHandler+0x520>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	2b07      	cmp	r3, #7
 8002470:	d009      	beq.n	8002486 <HAL_ADC_IRQHandler+0x3ae>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800247a:	d004      	beq.n	8002486 <HAL_ADC_IRQHandler+0x3ae>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <HAL_ADC_IRQHandler+0x514>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d104      	bne.n	8002490 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e00f      	b.n	80024b0 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002498:	d004      	beq.n	80024a4 <HAL_ADC_IRQHandler+0x3cc>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a54      	ldr	r2, [pc, #336]	; (80025f0 <HAL_ADC_IRQHandler+0x518>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d102      	bne.n	80024aa <HAL_ADC_IRQHandler+0x3d2>
 80024a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024a8:	e000      	b.n	80024ac <HAL_ADC_IRQHandler+0x3d4>
 80024aa:	4b50      	ldr	r3, [pc, #320]	; (80025ec <HAL_ADC_IRQHandler+0x514>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d12d      	bne.n	8002516 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d11a      	bne.n	80024fe <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024d6:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d112      	bne.n	8002516 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40
 80024fc:	e00b      	b.n	8002516 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0210 	orr.w	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f936 	bl	8002788 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2260      	movs	r2, #96	; 0x60
 8002522:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	d011      	beq.n	8002552 <HAL_ADC_IRQHandler+0x47a>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00c      	beq.n	8002552 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fa85 	bl	8001a54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_ADC_IRQHandler+0x4aa>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f91c 	bl	80027b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002580:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002588:	2b00      	cmp	r3, #0
 800258a:	d012      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x4da>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00d      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f90e 	bl	80027c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d04f      	beq.n	800265c <HAL_ADC_IRQHandler+0x584>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d04a      	beq.n	800265c <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e02d      	b.n	8002630 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025dc:	d004      	beq.n	80025e8 <HAL_ADC_IRQHandler+0x510>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <HAL_ADC_IRQHandler+0x518>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_IRQHandler+0x524>
 80025e8:	4b02      	ldr	r3, [pc, #8]	; (80025f4 <HAL_ADC_IRQHandler+0x51c>)
 80025ea:	e008      	b.n	80025fe <HAL_ADC_IRQHandler+0x526>
 80025ec:	50000400 	.word	0x50000400
 80025f0:	50000100 	.word	0x50000100
 80025f4:	50000300 	.word	0x50000300
 80025f8:	50000700 	.word	0x50000700
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_ADC_IRQHandler+0x5c8>)
 80025fe:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10a      	bne.n	8002630 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800261a:	2301      	movs	r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e007      	b.n	8002630 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800262c:	2301      	movs	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10e      	bne.n	8002654 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f043 0202 	orr.w	r2, r3, #2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fa0a 	bl	8001a68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	2b00      	cmp	r3, #0
 8002664:	d018      	beq.n	8002698 <HAL_ADC_IRQHandler+0x5c0>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	f043 0208 	orr.w	r2, r3, #8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002690:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f882 	bl	800279c <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002698:	bf00      	nop
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	50000700 	.word	0x50000700

080026a4 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_ADCEx_Calibration_Start+0x1c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e05f      	b.n	8002780 <HAL_ADCEx_Calibration_Start+0xdc>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fcc5 	bl	8003058 <ADC_Disable>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d14e      	bne.n	8002776 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80026ec:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002702:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002712:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002714:	f7ff f992 	bl	8001a3c <HAL_GetTick>
 8002718:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800271a:	e01c      	b.n	8002756 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800271c:	f7ff f98e 	bl	8001a3c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b0a      	cmp	r3, #10
 8002728:	d915      	bls.n	8002756 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002738:	d10d      	bne.n	8002756 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f023 0312 	bic.w	r3, r3, #18
 8002742:	f043 0210 	orr.w	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e014      	b.n	8002780 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002764:	d0da      	beq.n	800271c <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027d8:	b480      	push	{r7}
 80027da:	b09b      	sub	sp, #108	; 0x6c
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x22>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e2c8      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x5b4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	f040 82ac 	bne.w	8002d6a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d81c      	bhi.n	8002854 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	4413      	add	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	461a      	mov	r2, r3
 800282e:	231f      	movs	r3, #31
 8002830:	4093      	lsls	r3, r2
 8002832:	43db      	mvns	r3, r3
 8002834:	4019      	ands	r1, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4413      	add	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa00 f203 	lsl.w	r2, r0, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
 8002852:	e063      	b.n	800291c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b09      	cmp	r3, #9
 800285a:	d81e      	bhi.n	800289a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	3b1e      	subs	r3, #30
 8002870:	221f      	movs	r2, #31
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	4019      	ands	r1, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	3b1e      	subs	r3, #30
 800288c:	fa00 f203 	lsl.w	r2, r0, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	635a      	str	r2, [r3, #52]	; 0x34
 8002898:	e040      	b.n	800291c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b0e      	cmp	r3, #14
 80028a0:	d81e      	bhi.n	80028e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	3b3c      	subs	r3, #60	; 0x3c
 80028b6:	221f      	movs	r2, #31
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	4019      	ands	r1, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	3b3c      	subs	r3, #60	; 0x3c
 80028d2:	fa00 f203 	lsl.w	r2, r0, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
 80028de:	e01d      	b.n	800291c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	3b5a      	subs	r3, #90	; 0x5a
 80028f4:	221f      	movs	r2, #31
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	4019      	ands	r1, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	3b5a      	subs	r3, #90	; 0x5a
 8002910:	fa00 f203 	lsl.w	r2, r0, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 80e5 	bne.w	8002af6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b09      	cmp	r3, #9
 8002932:	d91c      	bls.n	800296e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6999      	ldr	r1, [r3, #24]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	3b1e      	subs	r3, #30
 8002946:	2207      	movs	r2, #7
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	4019      	ands	r1, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6898      	ldr	r0, [r3, #8]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	3b1e      	subs	r3, #30
 8002960:	fa00 f203 	lsl.w	r2, r0, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	619a      	str	r2, [r3, #24]
 800296c:	e019      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6959      	ldr	r1, [r3, #20]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4613      	mov	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4413      	add	r3, r2
 800297e:	2207      	movs	r2, #7
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	4019      	ands	r1, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6898      	ldr	r0, [r3, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	fa00 f203 	lsl.w	r2, r0, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	3b01      	subs	r3, #1
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d84f      	bhi.n	8002a64 <HAL_ADC_ConfigChannel+0x28c>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <HAL_ADC_ConfigChannel+0x1f4>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029ff 	.word	0x080029ff
 80029d4:	08002a21 	.word	0x08002a21
 80029d8:	08002a43 	.word	0x08002a43
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029e2:	4b99      	ldr	r3, [pc, #612]	; (8002c48 <HAL_ADC_ConfigChannel+0x470>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	0691      	lsls	r1, r2, #26
 80029ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029ee:	430a      	orrs	r2, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029fc:	e07b      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a04:	4b90      	ldr	r3, [pc, #576]	; (8002c48 <HAL_ADC_ConfigChannel+0x470>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	0691      	lsls	r1, r2, #26
 8002a0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a10:	430a      	orrs	r2, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a1c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a1e:	e06a      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a26:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_ADC_ConfigChannel+0x470>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	0691      	lsls	r1, r2, #26
 8002a30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a32:	430a      	orrs	r2, r1
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a3e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a40:	e059      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a48:	4b7f      	ldr	r3, [pc, #508]	; (8002c48 <HAL_ADC_ConfigChannel+0x470>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	0691      	lsls	r1, r2, #26
 8002a52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a54:	430a      	orrs	r2, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a60:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a62:	e048      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d107      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a86:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d107      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aaa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	069b      	lsls	r3, r3, #26
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d107      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ace:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	069b      	lsls	r3, r3, #26
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002af2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002af4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d108      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x33e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x33e>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x340>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f040 8131 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d00f      	beq.n	8002b46 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2201      	movs	r2, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	400a      	ands	r2, r1
 8002b40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b44:	e049      	b.n	8002bda <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	409a      	lsls	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b09      	cmp	r3, #9
 8002b66:	d91c      	bls.n	8002ba2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	3b1b      	subs	r3, #27
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	4019      	ands	r1, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6898      	ldr	r0, [r3, #8]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	3b1b      	subs	r3, #27
 8002b94:	fa00 f203 	lsl.w	r2, r0, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	619a      	str	r2, [r3, #24]
 8002ba0:	e01b      	b.n	8002bda <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6959      	ldr	r1, [r3, #20]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	4019      	ands	r1, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	6898      	ldr	r0, [r3, #8]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be2:	d004      	beq.n	8002bee <HAL_ADC_ConfigChannel+0x416>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <HAL_ADC_ConfigChannel+0x474>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x41a>
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <HAL_ADC_ConfigChannel+0x478>)
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x41c>
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_ADC_ConfigChannel+0x47c>)
 8002bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d105      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d015      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c0e:	2b11      	cmp	r3, #17
 8002c10:	d105      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00b      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c22:	2b12      	cmp	r3, #18
 8002c24:	f040 80ac 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 80a5 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c3e:	d10b      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x480>
 8002c40:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <HAL_ADC_ConfigChannel+0x474>)
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e023      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x4b6>
 8002c46:	bf00      	nop
 8002c48:	83fff000 	.word	0x83fff000
 8002c4c:	50000100 	.word	0x50000100
 8002c50:	50000300 	.word	0x50000300
 8002c54:	50000700 	.word	0x50000700
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4e      	ldr	r2, [pc, #312]	; (8002d98 <HAL_ADC_ConfigChannel+0x5c0>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d103      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x492>
 8002c62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e011      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x4b6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_ADC_ConfigChannel+0x5c4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d102      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x4a2>
 8002c74:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e009      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x4b6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a48      	ldr	r2, [pc, #288]	; (8002da0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d102      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x4b2>
 8002c84:	4b45      	ldr	r3, [pc, #276]	; (8002d9c <HAL_ADC_ConfigChannel+0x5c4>)
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e001      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x4b6>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d108      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x4d6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x4d6>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x4d8>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d150      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cb4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d010      	beq.n	8002cdc <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x4fe>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x4fe>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x500>
 8002cd6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d13c      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d11d      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x548>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cec:	d118      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cfa:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_ADC_ConfigChannel+0x5cc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	0c9a      	lsrs	r2, r3, #18
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f9      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d1e:	e02e      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b11      	cmp	r3, #17
 8002d26:	d10b      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x568>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d30:	d106      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d3e:	e01e      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b12      	cmp	r3, #18
 8002d46:	d11a      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d52:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d54:	e013      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d68:	e00a      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d7c:	e000      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d7e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	376c      	adds	r7, #108	; 0x6c
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	50000100 	.word	0x50000100
 8002d9c:	50000400 	.word	0x50000400
 8002da0:	50000500 	.word	0x50000500
 8002da4:	20000000 	.word	0x20000000
 8002da8:	431bde83 	.word	0x431bde83

08002dac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b099      	sub	sp, #100	; 0x64
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc4:	d102      	bne.n	8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002dc6:	4b6d      	ldr	r3, [pc, #436]	; (8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	e01a      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6a      	ldr	r2, [pc, #424]	; (8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d103      	bne.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	e011      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a67      	ldr	r2, [pc, #412]	; (8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d102      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002de8:	4b66      	ldr	r3, [pc, #408]	; (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	e009      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a64      	ldr	r2, [pc, #400]	; (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002df8:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	e001      	b.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b0      	b.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e0a9      	b.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f040 808d 	bne.w	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 8086 	bne.w	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e48:	d004      	beq.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a4b      	ldr	r2, [pc, #300]	; (8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d101      	bne.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002e54:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002e56:	e000      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e58:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002e5a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d040      	beq.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e76:	035b      	lsls	r3, r3, #13
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d108      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d15c      	bne.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d107      	bne.n	8002ec2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002ec2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d14b      	bne.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ed0:	f023 030f 	bic.w	r3, r3, #15
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	6811      	ldr	r1, [r2, #0]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee4:	e03c      	b.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ef0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d108      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d123      	bne.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d107      	bne.n	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002f34:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d112      	bne.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f42:	f023 030f 	bic.w	r3, r3, #15
 8002f46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f48:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f4a:	e009      	b.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002f5e:	e000      	b.n	8002f62 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f60:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3764      	adds	r7, #100	; 0x64
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	50000100 	.word	0x50000100
 8002f80:	50000400 	.word	0x50000400
 8002f84:	50000500 	.word	0x50000500
 8002f88:	50000300 	.word	0x50000300
 8002f8c:	50000700 	.word	0x50000700

08002f90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d108      	bne.n	8002fbc <ADC_Enable+0x2c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <ADC_Enable+0x2c>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <ADC_Enable+0x2e>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d143      	bne.n	800304a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <ADC_Enable+0xc4>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e02f      	b.n	800304c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002ffc:	f7fe fd1e 	bl	8001a3c <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003002:	e01b      	b.n	800303c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003004:	f7fe fd1a 	bl	8001a3c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d914      	bls.n	800303c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d00d      	beq.n	800303c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0210 	orr.w	r2, r3, #16
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e007      	b.n	800304c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d1dc      	bne.n	8003004 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	8000003f 	.word	0x8000003f

08003058 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d108      	bne.n	8003084 <ADC_Disable+0x2c>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <ADC_Disable+0x2c>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <ADC_Disable+0x2e>
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d047      	beq.n	800311a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030d 	and.w	r3, r3, #13
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10f      	bne.n	80030b8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0202 	orr.w	r2, r2, #2
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2203      	movs	r2, #3
 80030ae:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80030b0:	f7fe fcc4 	bl	8001a3c <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030b6:	e029      	b.n	800310c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 0210 	orr.w	r2, r3, #16
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e023      	b.n	800311c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030d4:	f7fe fcb2 	bl	8001a3c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d914      	bls.n	800310c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10d      	bne.n	800310c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0210 	orr.w	r2, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d0dc      	beq.n	80030d4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0ed      	b.n	8003312 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fec8 	bl	8000ed8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003158:	f7fe fc70 	bl	8001a3c <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800315e:	e012      	b.n	8003186 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003160:	f7fe fc6c 	bl	8001a3c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b0a      	cmp	r3, #10
 800316c:	d90b      	bls.n	8003186 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2205      	movs	r2, #5
 800317e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0c5      	b.n	8003312 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0e5      	beq.n	8003160 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0202 	bic.w	r2, r2, #2
 80031a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a4:	f7fe fc4a 	bl	8001a3c <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031aa:	e012      	b.n	80031d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031ac:	f7fe fc46 	bl	8001a3c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b0a      	cmp	r3, #10
 80031b8:	d90b      	bls.n	80031d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2205      	movs	r2, #5
 80031ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e09f      	b.n	8003312 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e5      	bne.n	80031ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	7e1b      	ldrb	r3, [r3, #24]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d108      	bne.n	80031fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e007      	b.n	800320a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	7e5b      	ldrb	r3, [r3, #25]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d108      	bne.n	8003224 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e007      	b.n	8003234 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7e9b      	ldrb	r3, [r3, #26]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d108      	bne.n	800324e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0220 	orr.w	r2, r2, #32
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	e007      	b.n	800325e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0220 	bic.w	r2, r2, #32
 800325c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7edb      	ldrb	r3, [r3, #27]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0210 	bic.w	r2, r2, #16
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e007      	b.n	8003288 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0210 	orr.w	r2, r2, #16
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7f1b      	ldrb	r3, [r3, #28]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d108      	bne.n	80032a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0208 	orr.w	r2, r2, #8
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	e007      	b.n	80032b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0208 	bic.w	r2, r2, #8
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7f5b      	ldrb	r3, [r3, #29]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d108      	bne.n	80032cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0204 	orr.w	r2, r2, #4
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e007      	b.n	80032dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	ea42 0103 	orr.w	r1, r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	1e5a      	subs	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800331a:	b480      	push	{r7}
 800331c:	b087      	sub	sp, #28
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003330:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d003      	beq.n	8003340 <HAL_CAN_ConfigFilter+0x26>
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	2b02      	cmp	r3, #2
 800333c:	f040 80aa 	bne.w	8003494 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2201      	movs	r2, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d123      	bne.n	80033c2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	43db      	mvns	r3, r3
 8003384:	401a      	ands	r2, r3
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800339c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3248      	adds	r2, #72	; 0x48
 80033a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033b8:	6979      	ldr	r1, [r7, #20]
 80033ba:	3348      	adds	r3, #72	; 0x48
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d122      	bne.n	8003410 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3248      	adds	r2, #72	; 0x48
 80033f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003404:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	3348      	adds	r3, #72	; 0x48
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	43db      	mvns	r3, r3
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800342a:	e007      	b.n	800343c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	431a      	orrs	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	43db      	mvns	r3, r3
 800344e:	401a      	ands	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003456:	e007      	b.n	8003468 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	431a      	orrs	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d107      	bne.n	8003480 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	431a      	orrs	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003486:	f023 0201 	bic.w	r2, r3, #1
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e006      	b.n	80034a2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d12e      	bne.n	8003520 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034da:	f7fe faaf 	bl	8001a3c <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034e0:	e012      	b.n	8003508 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034e2:	f7fe faab 	bl	8001a3c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b0a      	cmp	r3, #10
 80034ee:	d90b      	bls.n	8003508 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2205      	movs	r2, #5
 8003500:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e012      	b.n	800352e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e5      	bne.n	80034e2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	e006      	b.n	800352e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003536:	b480      	push	{r7}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800354a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d003      	beq.n	800355a <HAL_CAN_GetRxMessage+0x24>
 8003552:	7dfb      	ldrb	r3, [r7, #23]
 8003554:	2b02      	cmp	r3, #2
 8003556:	f040 8103 	bne.w	8003760 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10e      	bne.n	800357e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d116      	bne.n	800359c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0f7      	b.n	800376e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0e8      	b.n	800376e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	331b      	adds	r3, #27
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0204 	and.w	r2, r3, #4
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10c      	bne.n	80035d4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	331b      	adds	r3, #27
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	4413      	add	r3, r2
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	0d5b      	lsrs	r3, r3, #21
 80035ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	e00b      	b.n	80035ec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	331b      	adds	r3, #27
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	4413      	add	r3, r2
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	08db      	lsrs	r3, r3, #3
 80035e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	331b      	adds	r3, #27
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	4413      	add	r3, r2
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0202 	and.w	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	331b      	adds	r3, #27
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2208      	movs	r2, #8
 800361e:	611a      	str	r2, [r3, #16]
 8003620:	e00b      	b.n	800363a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	331b      	adds	r3, #27
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	4413      	add	r3, r2
 800362e:	3304      	adds	r3, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 020f 	and.w	r2, r3, #15
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	331b      	adds	r3, #27
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	4413      	add	r3, r2
 8003646:	3304      	adds	r3, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	b2da      	uxtb	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	331b      	adds	r3, #27
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	4413      	add	r3, r2
 800365e:	3304      	adds	r3, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	0c1b      	lsrs	r3, r3, #16
 8003664:	b29a      	uxth	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	4413      	add	r3, r2
 8003674:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	4413      	add	r3, r2
 800368a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0a1a      	lsrs	r2, r3, #8
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0c1a      	lsrs	r2, r3, #16
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	3302      	adds	r3, #2
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	4413      	add	r3, r2
 80036be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e1a      	lsrs	r2, r3, #24
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	3303      	adds	r3, #3
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	3304      	adds	r3, #4
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	0a1a      	lsrs	r2, r3, #8
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	3305      	adds	r3, #5
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	4413      	add	r3, r2
 800370a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0c1a      	lsrs	r2, r3, #16
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	3306      	adds	r3, #6
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	4413      	add	r3, r2
 8003724:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	0e1a      	lsrs	r2, r3, #24
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	3307      	adds	r3, #7
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d108      	bne.n	800374c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0220 	orr.w	r2, r2, #32
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	e007      	b.n	800375c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0220 	orr.w	r2, r2, #32
 800375a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	e006      	b.n	800376e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800377a:	b480      	push	{r7}
 800377c:	b085      	sub	sp, #20
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800378a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d002      	beq.n	8003798 <HAL_CAN_ActivateNotification+0x1e>
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d109      	bne.n	80037ac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6959      	ldr	r1, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e006      	b.n	80037ba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b08a      	sub	sp, #40	; 0x28
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d07c      	beq.n	8003906 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d023      	beq.n	800385e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fe f833 	bl	8001894 <HAL_CAN_TxMailbox0CompleteCallback>
 800382e:	e016      	b.n	800385e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	e00c      	b.n	800385e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	e002      	b.n	800385e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fe f82b 	bl	80018b4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003864:	2b00      	cmp	r3, #0
 8003866:	d024      	beq.n	80038b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003870:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f959 	bl	8003b34 <HAL_CAN_TxMailbox1CompleteCallback>
 8003882:	e016      	b.n	80038b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
 8003896:	e00c      	b.n	80038b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
 80038aa:	e002      	b.n	80038b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f955 	bl	8003b5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d024      	beq.n	8003906 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f939 	bl	8003b48 <HAL_CAN_TxMailbox2CompleteCallback>
 80038d6:	e016      	b.n	8003906 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	e00c      	b.n	8003906 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
 80038fe:	e002      	b.n	8003906 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f935 	bl	8003b70 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00c      	beq.n	800392a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003920:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2210      	movs	r2, #16
 8003928:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2208      	movs	r2, #8
 8003944:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd ffe4 	bl	8001914 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7fd ffb5 	bl	80018d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00c      	beq.n	800398e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003984:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2210      	movs	r2, #16
 800398c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d006      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2208      	movs	r2, #8
 80039a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8f4 	bl	8003b98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f8db 	bl	8003b84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2210      	movs	r2, #16
 80039e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8de 	bl	8003bac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d006      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f8d7 	bl	8003bc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d07b      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d072      	beq.n	8003b0c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d043      	beq.n	8003b0c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d03e      	beq.n	8003b0c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a94:	2b60      	cmp	r3, #96	; 0x60
 8003a96:	d02b      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x32a>
 8003a98:	2b60      	cmp	r3, #96	; 0x60
 8003a9a:	d82e      	bhi.n	8003afa <HAL_CAN_IRQHandler+0x334>
 8003a9c:	2b50      	cmp	r3, #80	; 0x50
 8003a9e:	d022      	beq.n	8003ae6 <HAL_CAN_IRQHandler+0x320>
 8003aa0:	2b50      	cmp	r3, #80	; 0x50
 8003aa2:	d82a      	bhi.n	8003afa <HAL_CAN_IRQHandler+0x334>
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d019      	beq.n	8003adc <HAL_CAN_IRQHandler+0x316>
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d826      	bhi.n	8003afa <HAL_CAN_IRQHandler+0x334>
 8003aac:	2b30      	cmp	r3, #48	; 0x30
 8003aae:	d010      	beq.n	8003ad2 <HAL_CAN_IRQHandler+0x30c>
 8003ab0:	2b30      	cmp	r3, #48	; 0x30
 8003ab2:	d822      	bhi.n	8003afa <HAL_CAN_IRQHandler+0x334>
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d002      	beq.n	8003abe <HAL_CAN_IRQHandler+0x2f8>
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d005      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003abc:	e01d      	b.n	8003afa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ac6:	e019      	b.n	8003afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	f043 0310 	orr.w	r3, r3, #16
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ad0:	e014      	b.n	8003afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	f043 0320 	orr.w	r3, r3, #32
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ada:	e00f      	b.n	8003afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ae4:	e00a      	b.n	8003afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003aee:	e005      	b.n	8003afc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003af8:	e000      	b.n	8003afc <HAL_CAN_IRQHandler+0x336>
            break;
 8003afa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b0a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2204      	movs	r2, #4
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fd fefe 	bl	8001928 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3728      	adds	r7, #40	; 0x28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bfe:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003c00:	7bbb      	ldrb	r3, [r7, #14]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d002      	beq.n	8003c0c <HAL_CAN_ResetError+0x20>
 8003c06:	7bbb      	ldrb	r3, [r7, #14]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d103      	bne.n	8003c14 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
 8003c12:	e007      	b.n	8003c24 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c50:	4013      	ands	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c66:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <__NVIC_SetPriorityGrouping+0x44>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	60d3      	str	r3, [r2, #12]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <__NVIC_GetPriorityGrouping+0x18>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	f003 0307 	and.w	r3, r3, #7
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db0b      	blt.n	8003cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 021f 	and.w	r2, r3, #31
 8003cb0:	4907      	ldr	r1, [pc, #28]	; (8003cd0 <__NVIC_EnableIRQ+0x38>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2001      	movs	r0, #1
 8003cba:	fa00 f202 	lsl.w	r2, r0, r2
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	db0a      	blt.n	8003cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	490c      	ldr	r1, [pc, #48]	; (8003d20 <__NVIC_SetPriority+0x4c>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cfc:	e00a      	b.n	8003d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4908      	ldr	r1, [pc, #32]	; (8003d24 <__NVIC_SetPriority+0x50>)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	440b      	add	r3, r1
 8003d12:	761a      	strb	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000e100 	.word	0xe000e100
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	; 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf28      	it	cs
 8003d46:	2304      	movcs	r3, #4
 8003d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d902      	bls.n	8003d58 <NVIC_EncodePriority+0x30>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3b03      	subs	r3, #3
 8003d56:	e000      	b.n	8003d5a <NVIC_EncodePriority+0x32>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	4313      	orrs	r3, r2
         );
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	; 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003da0:	d301      	bcc.n	8003da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003da2:	2301      	movs	r3, #1
 8003da4:	e00f      	b.n	8003dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <SysTick_Config+0x40>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dae:	210f      	movs	r1, #15
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295
 8003db4:	f7ff ff8e 	bl	8003cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <SysTick_Config+0x40>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <SysTick_Config+0x40>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	e000e010 	.word	0xe000e010

08003dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ff29 	bl	8003c34 <__NVIC_SetPriorityGrouping>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dfc:	f7ff ff3e 	bl	8003c7c <__NVIC_GetPriorityGrouping>
 8003e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	6978      	ldr	r0, [r7, #20]
 8003e08:	f7ff ff8e 	bl	8003d28 <NVIC_EncodePriority>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff5d 	bl	8003cd4 <__NVIC_SetPriority>
}
 8003e1a:	bf00      	nop
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff31 	bl	8003c98 <__NVIC_EnableIRQ>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ffa2 	bl	8003d90 <SysTick_Config>
 8003e4c:	4603      	mov	r3, r0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e66:	e154      	b.n	8004112 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	4013      	ands	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8146 	beq.w	800410c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d005      	beq.n	8003e98 <HAL_GPIO_Init+0x40>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d130      	bne.n	8003efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ece:	2201      	movs	r2, #1
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4013      	ands	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	f003 0201 	and.w	r2, r3, #1
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d017      	beq.n	8003f36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d123      	bne.n	8003f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	08da      	lsrs	r2, r3, #3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3208      	adds	r2, #8
 8003f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	220f      	movs	r2, #15
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	08da      	lsrs	r2, r3, #3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3208      	adds	r2, #8
 8003f84:	6939      	ldr	r1, [r7, #16]
 8003f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	2203      	movs	r2, #3
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0203 	and.w	r2, r3, #3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80a0 	beq.w	800410c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fcc:	4b58      	ldr	r3, [pc, #352]	; (8004130 <HAL_GPIO_Init+0x2d8>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	4a57      	ldr	r2, [pc, #348]	; (8004130 <HAL_GPIO_Init+0x2d8>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	6193      	str	r3, [r2, #24]
 8003fd8:	4b55      	ldr	r3, [pc, #340]	; (8004130 <HAL_GPIO_Init+0x2d8>)
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fe4:	4a53      	ldr	r2, [pc, #332]	; (8004134 <HAL_GPIO_Init+0x2dc>)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3302      	adds	r3, #2
 8003fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	220f      	movs	r2, #15
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800400e:	d019      	beq.n	8004044 <HAL_GPIO_Init+0x1ec>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a49      	ldr	r2, [pc, #292]	; (8004138 <HAL_GPIO_Init+0x2e0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <HAL_GPIO_Init+0x1e8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a48      	ldr	r2, [pc, #288]	; (800413c <HAL_GPIO_Init+0x2e4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00d      	beq.n	800403c <HAL_GPIO_Init+0x1e4>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a47      	ldr	r2, [pc, #284]	; (8004140 <HAL_GPIO_Init+0x2e8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <HAL_GPIO_Init+0x1e0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a46      	ldr	r2, [pc, #280]	; (8004144 <HAL_GPIO_Init+0x2ec>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d101      	bne.n	8004034 <HAL_GPIO_Init+0x1dc>
 8004030:	2304      	movs	r3, #4
 8004032:	e008      	b.n	8004046 <HAL_GPIO_Init+0x1ee>
 8004034:	2305      	movs	r3, #5
 8004036:	e006      	b.n	8004046 <HAL_GPIO_Init+0x1ee>
 8004038:	2303      	movs	r3, #3
 800403a:	e004      	b.n	8004046 <HAL_GPIO_Init+0x1ee>
 800403c:	2302      	movs	r3, #2
 800403e:	e002      	b.n	8004046 <HAL_GPIO_Init+0x1ee>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <HAL_GPIO_Init+0x1ee>
 8004044:	2300      	movs	r3, #0
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	f002 0203 	and.w	r2, r2, #3
 800404c:	0092      	lsls	r2, r2, #2
 800404e:	4093      	lsls	r3, r2
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004056:	4937      	ldr	r1, [pc, #220]	; (8004134 <HAL_GPIO_Init+0x2dc>)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	3302      	adds	r3, #2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004064:	4b38      	ldr	r3, [pc, #224]	; (8004148 <HAL_GPIO_Init+0x2f0>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	43db      	mvns	r3, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004088:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <HAL_GPIO_Init+0x2f0>)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800408e:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <HAL_GPIO_Init+0x2f0>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	43db      	mvns	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80040b2:	4a25      	ldr	r2, [pc, #148]	; (8004148 <HAL_GPIO_Init+0x2f0>)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040b8:	4b23      	ldr	r3, [pc, #140]	; (8004148 <HAL_GPIO_Init+0x2f0>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80040dc:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <HAL_GPIO_Init+0x2f0>)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040e2:	4b19      	ldr	r3, [pc, #100]	; (8004148 <HAL_GPIO_Init+0x2f0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <HAL_GPIO_Init+0x2f0>)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	3301      	adds	r3, #1
 8004110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	f47f aea3 	bne.w	8003e68 <HAL_GPIO_Init+0x10>
  }
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40021000 	.word	0x40021000
 8004134:	40010000 	.word	0x40010000
 8004138:	48000400 	.word	0x48000400
 800413c:	48000800 	.word	0x48000800
 8004140:	48000c00 	.word	0x48000c00
 8004144:	48001000 	.word	0x48001000
 8004148:	40010400 	.word	0x40010400

0800414c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
 8004168:	e001      	b.n	800416e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800418c:	787b      	ldrb	r3, [r7, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004198:	e002      	b.n	80041a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041be:	887a      	ldrh	r2, [r7, #2]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4013      	ands	r3, r2
 80041c4:	041a      	lsls	r2, r3, #16
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	43d9      	mvns	r1, r3
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	400b      	ands	r3, r1
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e08f      	b.n	8004316 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d101      	bne.n	8004206 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e087      	b.n	8004316 <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d101      	bne.n	8004216 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e07f      	b.n	8004316 <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421c:	4b40      	ldr	r3, [pc, #256]	; (8004320 <HAL_OPAMP_Init+0x140>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	4a3f      	ldr	r2, [pc, #252]	; (8004320 <HAL_OPAMP_Init+0x140>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	6193      	str	r3, [r2, #24]
 8004228:	4b3d      	ldr	r3, [pc, #244]	; (8004320 <HAL_OPAMP_Init+0x140>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d103      	bne.n	8004248 <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7fc ffbf 	bl	80011cc <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d003      	beq.n	800425e <HAL_OPAMP_Init+0x7e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b60      	cmp	r3, #96	; 0x60
 800425c:	d125      	bne.n	80042aa <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <HAL_OPAMP_Init+0x144>)
 8004266:	4013      	ands	r3, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6851      	ldr	r1, [r2, #4]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68d2      	ldr	r2, [r2, #12]
 8004270:	4311      	orrs	r1, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6912      	ldr	r2, [r2, #16]
 8004276:	4311      	orrs	r1, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6992      	ldr	r2, [r2, #24]
 800427c:	4311      	orrs	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	69d2      	ldr	r2, [r2, #28]
 8004282:	4311      	orrs	r1, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6a12      	ldr	r2, [r2, #32]
 8004288:	4311      	orrs	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800428e:	4311      	orrs	r1, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004294:	04d2      	lsls	r2, r2, #19
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800429c:	0612      	lsls	r2, r2, #24
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	e02a      	b.n	8004300 <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <HAL_OPAMP_Init+0x144>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6851      	ldr	r1, [r2, #4]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	4311      	orrs	r1, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6912      	ldr	r2, [r2, #16]
 80042c8:	4311      	orrs	r1, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6952      	ldr	r2, [r2, #20]
 80042ce:	4311      	orrs	r1, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6992      	ldr	r2, [r2, #24]
 80042d4:	4311      	orrs	r1, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	69d2      	ldr	r2, [r2, #28]
 80042da:	4311      	orrs	r1, r2
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6a12      	ldr	r2, [r2, #32]
 80042e0:	4311      	orrs	r1, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042e6:	4311      	orrs	r1, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80042ec:	04d2      	lsls	r2, r2, #19
 80042ee:	4311      	orrs	r1, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042f4:	0612      	lsls	r2, r2, #24
 80042f6:	4311      	orrs	r1, r2
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004314:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40021000 	.word	0x40021000
 8004324:	e0003811 	.word	0xe0003811

08004328 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
 800433e:	e01d      	b.n	800437c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b05      	cmp	r3, #5
 800434a:	d102      	bne.n	8004352 <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
 8004350:	e014      	b.n	800437c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10c      	bne.n	8004378 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0201 	orr.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2204      	movs	r2, #4
 8004372:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004376:	e001      	b.n	800437c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004392:	af00      	add	r7, sp, #0
 8004394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800439c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f001 b823 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 817d 	beq.w	80046c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043c8:	4bbc      	ldr	r3, [pc, #752]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d00c      	beq.n	80043ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043d4:	4bb9      	ldr	r3, [pc, #740]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d15c      	bne.n	800449a <HAL_RCC_OscConfig+0x10e>
 80043e0:	4bb6      	ldr	r3, [pc, #728]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d155      	bne.n	800449a <HAL_RCC_OscConfig+0x10e>
 80043ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004402:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d102      	bne.n	8004420 <HAL_RCC_OscConfig+0x94>
 800441a:	4ba8      	ldr	r3, [pc, #672]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	e015      	b.n	800444c <HAL_RCC_OscConfig+0xc0>
 8004420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004424:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004438:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800443c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004448:	4b9c      	ldr	r3, [pc, #624]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004450:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004454:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004458:	fa92 f2a2 	rbit	r2, r2
 800445c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004460:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	f042 0220 	orr.w	r2, r2, #32
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	f002 021f 	and.w	r2, r2, #31
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 811f 	beq.w	80046c0 <HAL_RCC_OscConfig+0x334>
 8004482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 8116 	bne.w	80046c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f000 bfaf 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_OscConfig+0x12e>
 80044ac:	4b83      	ldr	r3, [pc, #524]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a82      	ldr	r2, [pc, #520]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e036      	b.n	8004528 <HAL_RCC_OscConfig+0x19c>
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x158>
 80044ca:	4b7c      	ldr	r3, [pc, #496]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a7b      	ldr	r2, [pc, #492]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b79      	ldr	r3, [pc, #484]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a78      	ldr	r2, [pc, #480]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e021      	b.n	8004528 <HAL_RCC_OscConfig+0x19c>
 80044e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0x184>
 80044f6:	4b71      	ldr	r3, [pc, #452]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a70      	ldr	r2, [pc, #448]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b6e      	ldr	r3, [pc, #440]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6d      	ldr	r2, [pc, #436]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e00b      	b.n	8004528 <HAL_RCC_OscConfig+0x19c>
 8004510:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a69      	ldr	r2, [pc, #420]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b67      	ldr	r3, [pc, #412]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a66      	ldr	r2, [pc, #408]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004526:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004528:	4b64      	ldr	r3, [pc, #400]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	f023 020f 	bic.w	r2, r3, #15
 8004530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004534:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	495f      	ldr	r1, [pc, #380]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800453e:	4313      	orrs	r3, r2
 8004540:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d059      	beq.n	8004606 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fd fa73 	bl	8001a3c <HAL_GetTick>
 8004556:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455c:	f7fd fa6e 	bl	8001a3c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	; 0x64
 800456a:	d902      	bls.n	8004572 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	f000 bf43 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004576:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004586:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d102      	bne.n	80045a4 <HAL_RCC_OscConfig+0x218>
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	e015      	b.n	80045d0 <HAL_RCC_OscConfig+0x244>
 80045a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80045b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80045c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80045cc:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80045d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80045dc:	fa92 f2a2 	rbit	r2, r2
 80045e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80045e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ab      	beq.n	800455c <HAL_RCC_OscConfig+0x1d0>
 8004604:	e05d      	b.n	80046c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fd fa19 	bl	8001a3c <HAL_GetTick>
 800460a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	e00a      	b.n	8004626 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd fa14 	bl	8001a3c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b64      	cmp	r3, #100	; 0x64
 800461e:	d902      	bls.n	8004626 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	f000 bee9 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800462a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800463a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d102      	bne.n	8004658 <HAL_RCC_OscConfig+0x2cc>
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	e015      	b.n	8004684 <HAL_RCC_OscConfig+0x2f8>
 8004658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800465c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800466c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004670:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004674:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004688:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800468c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004690:	fa92 f2a2 	rbit	r2, r2
 8004694:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004698:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800469c:	fab2 f282 	clz	r2, r2
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	f042 0220 	orr.w	r2, r2, #32
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	f002 021f 	and.w	r2, r2, #31
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f202 	lsl.w	r2, r1, r2
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ab      	bne.n	8004610 <HAL_RCC_OscConfig+0x284>
 80046b8:	e003      	b.n	80046c2 <HAL_RCC_OscConfig+0x336>
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 817d 	beq.w	80049d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046d8:	4ba6      	ldr	r3, [pc, #664]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046e4:	4ba3      	ldr	r3, [pc, #652]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d172      	bne.n	80047d6 <HAL_RCC_OscConfig+0x44a>
 80046f0:	4ba0      	ldr	r3, [pc, #640]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d16c      	bne.n	80047d6 <HAL_RCC_OscConfig+0x44a>
 80046fc:	2302      	movs	r3, #2
 80046fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800470e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d102      	bne.n	800472c <HAL_RCC_OscConfig+0x3a0>
 8004726:	4b93      	ldr	r3, [pc, #588]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	e013      	b.n	8004754 <HAL_RCC_OscConfig+0x3c8>
 800472c:	2302      	movs	r3, #2
 800472e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004736:	fa93 f3a3 	rbit	r3, r3
 800473a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800473e:	2302      	movs	r3, #2
 8004740:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004744:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004750:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2202      	movs	r2, #2
 8004756:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800475a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800475e:	fa92 f2a2 	rbit	r2, r2
 8004762:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004766:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800476a:	fab2 f282 	clz	r2, r2
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	f042 0220 	orr.w	r2, r2, #32
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	f002 021f 	and.w	r2, r2, #31
 800477a:	2101      	movs	r1, #1
 800477c:	fa01 f202 	lsl.w	r2, r1, r2
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCC_OscConfig+0x410>
 8004786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d002      	beq.n	800479c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f000 be2e 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479c:	4b75      	ldr	r3, [pc, #468]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	21f8      	movs	r1, #248	; 0xf8
 80047b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80047ba:	fa91 f1a1 	rbit	r1, r1
 80047be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80047c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80047c6:	fab1 f181 	clz	r1, r1
 80047ca:	b2c9      	uxtb	r1, r1
 80047cc:	408b      	lsls	r3, r1
 80047ce:	4969      	ldr	r1, [pc, #420]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d4:	e0fd      	b.n	80049d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8088 	beq.w	80048f8 <HAL_RCC_OscConfig+0x56c>
 80047e8:	2301      	movs	r3, #1
 80047ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80047fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004808:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	461a      	mov	r2, r3
 8004810:	2301      	movs	r3, #1
 8004812:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fd f912 	bl	8001a3c <HAL_GetTick>
 8004818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481e:	f7fd f90d 	bl	8001a3c <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	f000 bde2 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004834:	2302      	movs	r3, #2
 8004836:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004846:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d102      	bne.n	8004864 <HAL_RCC_OscConfig+0x4d8>
 800485e:	4b45      	ldr	r3, [pc, #276]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	e013      	b.n	800488c <HAL_RCC_OscConfig+0x500>
 8004864:	2302      	movs	r3, #2
 8004866:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004876:	2302      	movs	r3, #2
 8004878:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800487c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004888:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	2202      	movs	r2, #2
 800488e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004892:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004896:	fa92 f2a2 	rbit	r2, r2
 800489a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800489e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80048a2:	fab2 f282 	clz	r2, r2
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	f042 0220 	orr.w	r2, r2, #32
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	f002 021f 	and.w	r2, r2, #31
 80048b2:	2101      	movs	r1, #1
 80048b4:	fa01 f202 	lsl.w	r2, r1, r2
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0af      	beq.n	800481e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048be:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	21f8      	movs	r1, #248	; 0xf8
 80048d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80048dc:	fa91 f1a1 	rbit	r1, r1
 80048e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80048e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80048e8:	fab1 f181 	clz	r1, r1
 80048ec:	b2c9      	uxtb	r1, r1
 80048ee:	408b      	lsls	r3, r1
 80048f0:	4920      	ldr	r1, [pc, #128]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
 80048f6:	e06c      	b.n	80049d2 <HAL_RCC_OscConfig+0x646>
 80048f8:	2301      	movs	r3, #1
 80048fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800490a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004918:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	461a      	mov	r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fd f88a 	bl	8001a3c <HAL_GetTick>
 8004928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492c:	e00a      	b.n	8004944 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492e:	f7fd f885 	bl	8001a3c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d902      	bls.n	8004944 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	f000 bd5a 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004944:	2302      	movs	r3, #2
 8004946:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d104      	bne.n	8004978 <HAL_RCC_OscConfig+0x5ec>
 800496e:	4b01      	ldr	r3, [pc, #4]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	e015      	b.n	80049a0 <HAL_RCC_OscConfig+0x614>
 8004974:	40021000 	.word	0x40021000
 8004978:	2302      	movs	r3, #2
 800497a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800498a:	2302      	movs	r3, #2
 800498c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004990:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800499c:	4bc8      	ldr	r3, [pc, #800]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2202      	movs	r2, #2
 80049a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80049a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80049aa:	fa92 f2a2 	rbit	r2, r2
 80049ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80049b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80049b6:	fab2 f282 	clz	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f042 0220 	orr.w	r2, r2, #32
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f002 021f 	and.w	r2, r2, #31
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1ad      	bne.n	800492e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8110 	beq.w	8004c08 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d079      	beq.n	8004aec <HAL_RCC_OscConfig+0x760>
 80049f8:	2301      	movs	r3, #1
 80049fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	4bab      	ldr	r3, [pc, #684]	; (8004cc4 <HAL_RCC_OscConfig+0x938>)
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2301      	movs	r3, #1
 8004a20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a22:	f7fd f80b 	bl	8001a3c <HAL_GetTick>
 8004a26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7fd f806 	bl	8001a3c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d902      	bls.n	8004a42 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	f000 bcdb 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004a42:	2302      	movs	r3, #2
 8004a44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	fa93 f2a3 	rbit	r2, r3
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a80:	2202      	movs	r2, #2
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	fa93 f2a3 	rbit	r2, r3
 8004a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9c:	4b88      	ldr	r3, [pc, #544]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	6019      	str	r1, [r3, #0]
 8004aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	fa93 f1a3 	rbit	r1, r3
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ac2:	6019      	str	r1, [r3, #0]
  return result;
 8004ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2101      	movs	r1, #1
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0a0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x6a0>
 8004aea:	e08d      	b.n	8004c08 <HAL_RCC_OscConfig+0x87c>
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004af4:	2201      	movs	r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	fa93 f2a3 	rbit	r2, r3
 8004b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b0e:	601a      	str	r2, [r3, #0]
  return result;
 8004b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1a:	fab3 f383 	clz	r3, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	4b68      	ldr	r3, [pc, #416]	; (8004cc4 <HAL_RCC_OscConfig+0x938>)
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2e:	f7fc ff85 	bl	8001a3c <HAL_GetTick>
 8004b32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b38:	f7fc ff80 	bl	8001a3c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d902      	bls.n	8004b4e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	f000 bc55 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b56:	2202      	movs	r2, #2
 8004b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	fa93 f2a3 	rbit	r2, r3
 8004b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	fa93 f2a3 	rbit	r2, r3
 8004b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	fa93 f2a3 	rbit	r2, r3
 8004bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004bb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bba:	4b41      	ldr	r3, [pc, #260]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	6019      	str	r1, [r3, #0]
 8004bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	fa93 f1a3 	rbit	r1, r3
 8004bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004be0:	6019      	str	r1, [r3, #0]
  return result;
 8004be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	fab3 f383 	clz	r3, r3
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d197      	bne.n	8004b38 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 81a1 	beq.w	8004f60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c24:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c30:	4b23      	ldr	r3, [pc, #140]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	61d3      	str	r3, [r2, #28]
 8004c3c:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c48:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_RCC_OscConfig+0x93c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11a      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_RCC_OscConfig+0x93c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <HAL_RCC_OscConfig+0x93c>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c76:	f7fc fee1 	bl	8001a3c <HAL_GetTick>
 8004c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	e009      	b.n	8004c94 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fc fedc 	bl	8001a3c <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b64      	cmp	r3, #100	; 0x64
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e3b1      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <HAL_RCC_OscConfig+0x93c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0ef      	beq.n	8004c80 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10d      	bne.n	8004ccc <HAL_RCC_OscConfig+0x940>
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	4a02      	ldr	r2, [pc, #8]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	6213      	str	r3, [r2, #32]
 8004cbc:	e03c      	b.n	8004d38 <HAL_RCC_OscConfig+0x9ac>
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	10908120 	.word	0x10908120
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10c      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x96a>
 8004cdc:	4bc1      	ldr	r3, [pc, #772]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	4ac0      	ldr	r2, [pc, #768]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	6213      	str	r3, [r2, #32]
 8004ce8:	4bbe      	ldr	r3, [pc, #760]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	4abd      	ldr	r2, [pc, #756]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004cee:	f023 0304 	bic.w	r3, r3, #4
 8004cf2:	6213      	str	r3, [r2, #32]
 8004cf4:	e020      	b.n	8004d38 <HAL_RCC_OscConfig+0x9ac>
 8004cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x994>
 8004d06:	4bb7      	ldr	r3, [pc, #732]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4ab6      	ldr	r2, [pc, #728]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	6213      	str	r3, [r2, #32]
 8004d12:	4bb4      	ldr	r3, [pc, #720]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4ab3      	ldr	r2, [pc, #716]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6213      	str	r3, [r2, #32]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0x9ac>
 8004d20:	4bb0      	ldr	r3, [pc, #704]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	4aaf      	ldr	r2, [pc, #700]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6213      	str	r3, [r2, #32]
 8004d2c:	4bad      	ldr	r3, [pc, #692]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	4aac      	ldr	r2, [pc, #688]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d32:	f023 0304 	bic.w	r3, r3, #4
 8004d36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8081 	beq.w	8004e4c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4a:	f7fc fe77 	bl	8001a3c <HAL_GetTick>
 8004d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f7fc fe72 	bl	8001a3c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e345      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d74:	2202      	movs	r2, #2
 8004d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	fa93 f2a3 	rbit	r2, r3
 8004d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d98:	2202      	movs	r2, #2
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	fa93 f2a3 	rbit	r2, r3
 8004daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004db2:	601a      	str	r2, [r3, #0]
  return result;
 8004db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004dbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCC_OscConfig+0xa4c>
 8004dd2:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	e013      	b.n	8004e00 <HAL_RCC_OscConfig+0xa74>
 8004dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ddc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004de0:	2202      	movs	r2, #2
 8004de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	fa93 f2a3 	rbit	r2, r3
 8004df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e08:	2102      	movs	r1, #2
 8004e0a:	6011      	str	r1, [r2, #0]
 8004e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	fa92 f1a2 	rbit	r1, r2
 8004e1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e22:	6011      	str	r1, [r2, #0]
  return result;
 8004e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e28:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	fab2 f282 	clz	r2, r2
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	f002 021f 	and.w	r2, r2, #31
 8004e3e:	2101      	movs	r1, #1
 8004e40:	fa01 f202 	lsl.w	r2, r1, r2
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d084      	beq.n	8004d54 <HAL_RCC_OscConfig+0x9c8>
 8004e4a:	e07f      	b.n	8004f4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4c:	f7fc fdf6 	bl	8001a3c <HAL_GetTick>
 8004e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e54:	e00b      	b.n	8004e6e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fc fdf1 	bl	8001a3c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e2c4      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e76:	2202      	movs	r2, #2
 8004e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	fa93 f2a3 	rbit	r2, r3
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	fa93 f2a3 	rbit	r2, r3
 8004eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004eb4:	601a      	str	r2, [r3, #0]
  return result;
 8004eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ebe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f043 0302 	orr.w	r3, r3, #2
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d102      	bne.n	8004eda <HAL_RCC_OscConfig+0xb4e>
 8004ed4:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	e013      	b.n	8004f02 <HAL_RCC_OscConfig+0xb76>
 8004eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ede:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	fa93 f2a3 	rbit	r2, r3
 8004ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	fa92 f1a2 	rbit	r1, r2
 8004f1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f24:	6011      	str	r1, [r2, #0]
  return result;
 8004f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f2a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	fab2 f282 	clz	r2, r2
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	f002 021f 	and.w	r2, r2, #31
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f202 	lsl.w	r2, r1, r2
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d184      	bne.n	8004e56 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d105      	bne.n	8004f60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f54:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8242 	beq.w	80053f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f72:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	f000 8213 	beq.w	80053a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	f040 8162 	bne.w	8005256 <HAL_RCC_OscConfig+0xeca>
 8004f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f96:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fa93 f2a3 	rbit	r2, r3
 8004fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fb6:	601a      	str	r2, [r3, #0]
  return result;
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fc fd30 	bl	8001a3c <HAL_GetTick>
 8004fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe0:	e00c      	b.n	8004ffc <HAL_RCC_OscConfig+0xc70>
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fc fd28 	bl	8001a3c <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e1fd      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005000:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	fa93 f2a3 	rbit	r2, r3
 8005018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005020:	601a      	str	r2, [r3, #0]
  return result;
 8005022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005026:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800502a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502c:	fab3 f383 	clz	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d102      	bne.n	8005046 <HAL_RCC_OscConfig+0xcba>
 8005040:	4bb0      	ldr	r3, [pc, #704]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	e027      	b.n	8005096 <HAL_RCC_OscConfig+0xd0a>
 8005046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800504e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005058:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	fa93 f2a3 	rbit	r2, r3
 8005062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005066:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005070:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	fa93 f2a3 	rbit	r2, r3
 8005088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	4b9c      	ldr	r3, [pc, #624]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800509a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800509e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050a2:	6011      	str	r1, [r2, #0]
 80050a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050a8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	fa92 f1a2 	rbit	r1, r2
 80050b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050ba:	6011      	str	r1, [r2, #0]
  return result;
 80050bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	fab2 f282 	clz	r2, r2
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	f042 0220 	orr.w	r2, r2, #32
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	f002 021f 	and.w	r2, r2, #31
 80050d6:	2101      	movs	r1, #1
 80050d8:	fa01 f202 	lsl.w	r2, r1, r2
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d182      	bne.n	8004fe8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050e2:	4b88      	ldr	r3, [pc, #544]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	430b      	orrs	r3, r1
 8005104:	497f      	ldr	r1, [pc, #508]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
 800510a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005112:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	fa93 f2a3 	rbit	r2, r3
 8005126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800512e:	601a      	str	r2, [r3, #0]
  return result;
 8005130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005134:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005138:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005144:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	461a      	mov	r2, r3
 800514c:	2301      	movs	r3, #1
 800514e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fc fc74 	bl	8001a3c <HAL_GetTick>
 8005154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005158:	e009      	b.n	800516e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515a:	f7fc fc6f 	bl	8001a3c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e144      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 800516e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005172:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800517a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005180:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	fa93 f2a3 	rbit	r2, r3
 800518a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005192:	601a      	str	r2, [r3, #0]
  return result;
 8005194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005198:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800519c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800519e:	fab3 f383 	clz	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d102      	bne.n	80051b8 <HAL_RCC_OscConfig+0xe2c>
 80051b2:	4b54      	ldr	r3, [pc, #336]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	e027      	b.n	8005208 <HAL_RCC_OscConfig+0xe7c>
 80051b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	fa93 f2a3 	rbit	r2, r3
 80051d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80051e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	fa93 f2a3 	rbit	r2, r3
 80051fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800520c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005210:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800521a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	fa92 f1a2 	rbit	r1, r2
 8005224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005228:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800522c:	6011      	str	r1, [r2, #0]
  return result;
 800522e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005232:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	fab2 f282 	clz	r2, r2
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	f042 0220 	orr.w	r2, r2, #32
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	f002 021f 	and.w	r2, r2, #31
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f202 	lsl.w	r2, r1, r2
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d082      	beq.n	800515a <HAL_RCC_OscConfig+0xdce>
 8005254:	e0cf      	b.n	80053f6 <HAL_RCC_OscConfig+0x106a>
 8005256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800525e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005268:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	fa93 f2a3 	rbit	r2, r3
 8005272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005276:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800527a:	601a      	str	r2, [r3, #0]
  return result;
 800527c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005280:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005284:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005286:	fab3 f383 	clz	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	461a      	mov	r2, r3
 8005298:	2300      	movs	r3, #0
 800529a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7fc fbce 	bl	8001a3c <HAL_GetTick>
 80052a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052a4:	e009      	b.n	80052ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fc fbc9 	bl	8001a3c <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e09e      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 80052ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	fa93 f2a3 	rbit	r2, r3
 80052d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052de:	601a      	str	r2, [r3, #0]
  return result;
 80052e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ea:	fab3 f383 	clz	r3, r3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d104      	bne.n	8005308 <HAL_RCC_OscConfig+0xf7c>
 80052fe:	4b01      	ldr	r3, [pc, #4]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	e029      	b.n	8005358 <HAL_RCC_OscConfig+0xfcc>
 8005304:	40021000 	.word	0x40021000
 8005308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	fa93 f2a3 	rbit	r2, r3
 8005324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005328:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005332:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005340:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	fa93 f2a3 	rbit	r2, r3
 800534a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <HAL_RCC_OscConfig+0x1078>)
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800535c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005360:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005364:	6011      	str	r1, [r2, #0]
 8005366:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800536a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	fa92 f1a2 	rbit	r1, r2
 8005374:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005378:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800537c:	6011      	str	r1, [r2, #0]
  return result;
 800537e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005382:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	fab2 f282 	clz	r2, r2
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	f042 0220 	orr.w	r2, r2, #32
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	f002 021f 	and.w	r2, r2, #31
 8005398:	2101      	movs	r1, #1
 800539a:	fa01 f202 	lsl.w	r2, r1, r2
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d180      	bne.n	80052a6 <HAL_RCC_OscConfig+0xf1a>
 80053a4:	e027      	b.n	80053f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e01e      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <HAL_RCC_OscConfig+0x1078>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d10b      	bne.n	80053f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80053da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d001      	beq.n	80053f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000

08005408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b09e      	sub	sp, #120	; 0x78
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e162      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005420:	4b90      	ldr	r3, [pc, #576]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d910      	bls.n	8005450 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b8d      	ldr	r3, [pc, #564]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 0207 	bic.w	r2, r3, #7
 8005436:	498b      	ldr	r1, [pc, #556]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543e:	4b89      	ldr	r3, [pc, #548]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d001      	beq.n	8005450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e14a      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800545c:	4b82      	ldr	r3, [pc, #520]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	497f      	ldr	r1, [pc, #508]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 800546a:	4313      	orrs	r3, r2
 800546c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80dc 	beq.w	8005634 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d13c      	bne.n	80054fe <HAL_RCC_ClockConfig+0xf6>
 8005484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005488:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800548c:	fa93 f3a3 	rbit	r3, r3
 8005490:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	b2db      	uxtb	r3, r3
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d102      	bne.n	80054ae <HAL_RCC_ClockConfig+0xa6>
 80054a8:	4b6f      	ldr	r3, [pc, #444]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	e00f      	b.n	80054ce <HAL_RCC_ClockConfig+0xc6>
 80054ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b6:	fa93 f3a3 	rbit	r3, r3
 80054ba:	667b      	str	r3, [r7, #100]	; 0x64
 80054bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054c0:	663b      	str	r3, [r7, #96]	; 0x60
 80054c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c4:	fa93 f3a3 	rbit	r3, r3
 80054c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ca:	4b67      	ldr	r3, [pc, #412]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80054d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054d6:	fa92 f2a2 	rbit	r2, r2
 80054da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80054dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054de:	fab2 f282 	clz	r2, r2
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	f042 0220 	orr.w	r2, r2, #32
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f002 021f 	and.w	r2, r2, #31
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d17b      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e0f3      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d13c      	bne.n	8005580 <HAL_RCC_ClockConfig+0x178>
 8005506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800550a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550e:	fa93 f3a3 	rbit	r3, r3
 8005512:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d102      	bne.n	8005530 <HAL_RCC_ClockConfig+0x128>
 800552a:	4b4f      	ldr	r3, [pc, #316]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	e00f      	b.n	8005550 <HAL_RCC_ClockConfig+0x148>
 8005530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005534:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005538:	fa93 f3a3 	rbit	r3, r3
 800553c:	647b      	str	r3, [r7, #68]	; 0x44
 800553e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005542:	643b      	str	r3, [r7, #64]	; 0x40
 8005544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554c:	4b46      	ldr	r3, [pc, #280]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005554:	63ba      	str	r2, [r7, #56]	; 0x38
 8005556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005558:	fa92 f2a2 	rbit	r2, r2
 800555c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800555e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005560:	fab2 f282 	clz	r2, r2
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	f042 0220 	orr.w	r2, r2, #32
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	f002 021f 	and.w	r2, r2, #31
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f202 	lsl.w	r2, r1, r2
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d13a      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0b2      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
 8005580:	2302      	movs	r3, #2
 8005582:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	fa93 f3a3 	rbit	r3, r3
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d102      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x1a0>
 80055a2:	4b31      	ldr	r3, [pc, #196]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	e00d      	b.n	80055c4 <HAL_RCC_ClockConfig+0x1bc>
 80055a8:	2302      	movs	r3, #2
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	fa93 f3a3 	rbit	r3, r3
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
 80055b4:	2302      	movs	r3, #2
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	fa93 f3a3 	rbit	r3, r3
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	4b29      	ldr	r3, [pc, #164]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2202      	movs	r2, #2
 80055c6:	61ba      	str	r2, [r7, #24]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	fa92 f2a2 	rbit	r2, r2
 80055ce:	617a      	str	r2, [r7, #20]
  return result;
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	fab2 f282 	clz	r2, r2
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	f042 0220 	orr.w	r2, r2, #32
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	f002 021f 	and.w	r2, r2, #31
 80055e2:	2101      	movs	r1, #1
 80055e4:	fa01 f202 	lsl.w	r2, r1, r2
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e079      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055f2:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f023 0203 	bic.w	r2, r3, #3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	491a      	ldr	r1, [pc, #104]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005600:	4313      	orrs	r3, r2
 8005602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005604:	f7fc fa1a 	bl	8001a3c <HAL_GetTick>
 8005608:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560a:	e00a      	b.n	8005622 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560c:	f7fc fa16 	bl	8001a3c <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f241 3288 	movw	r2, #5000	; 0x1388
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e061      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005622:	4b11      	ldr	r3, [pc, #68]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f003 020c 	and.w	r2, r3, #12
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	429a      	cmp	r2, r3
 8005632:	d1eb      	bne.n	800560c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d214      	bcs.n	800566c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 0207 	bic.w	r2, r3, #7
 800564a:	4906      	ldr	r1, [pc, #24]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b04      	ldr	r3, [pc, #16]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d005      	beq.n	800566c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e040      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
 8005664:	40022000 	.word	0x40022000
 8005668:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005678:	4b1d      	ldr	r3, [pc, #116]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	491a      	ldr	r1, [pc, #104]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 8005686:	4313      	orrs	r3, r2
 8005688:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4912      	ldr	r1, [pc, #72]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056aa:	f000 f829 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 80056ae:	4601      	mov	r1, r0
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b8:	22f0      	movs	r2, #240	; 0xf0
 80056ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	fa92 f2a2 	rbit	r2, r2
 80056c2:	60fa      	str	r2, [r7, #12]
  return result;
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	fab2 f282 	clz	r2, r2
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	40d3      	lsrs	r3, r2
 80056ce:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <HAL_RCC_ClockConfig+0x2ec>)
 80056d0:	5cd3      	ldrb	r3, [r2, r3]
 80056d2:	fa21 f303 	lsr.w	r3, r1, r3
 80056d6:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <HAL_RCC_ClockConfig+0x2f0>)
 80056d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80056da:	4b08      	ldr	r3, [pc, #32]	; (80056fc <HAL_RCC_ClockConfig+0x2f4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fc f968 	bl	80019b4 <HAL_InitTick>
  
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3778      	adds	r7, #120	; 0x78
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000
 80056f4:	08006158 	.word	0x08006158
 80056f8:	20000000 	.word	0x20000000
 80056fc:	20000004 	.word	0x20000004

08005700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	b08b      	sub	sp, #44	; 0x2c
 8005704:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	2300      	movs	r3, #0
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	2300      	movs	r3, #0
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800571a:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b04      	cmp	r3, #4
 8005728:	d002      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0x30>
 800572a:	2b08      	cmp	r3, #8
 800572c:	d003      	beq.n	8005736 <HAL_RCC_GetSysClockFreq+0x36>
 800572e:	e03c      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005730:	4b24      	ldr	r3, [pc, #144]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005732:	623b      	str	r3, [r7, #32]
      break;
 8005734:	e03c      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800573c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005740:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	fa92 f2a2 	rbit	r2, r2
 8005748:	607a      	str	r2, [r7, #4]
  return result;
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	fab2 f282 	clz	r2, r2
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	40d3      	lsrs	r3, r2
 8005754:	4a1c      	ldr	r2, [pc, #112]	; (80057c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005756:	5cd3      	ldrb	r3, [r2, r3]
 8005758:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800575a:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	220f      	movs	r2, #15
 8005764:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	fa92 f2a2 	rbit	r2, r2
 800576c:	60fa      	str	r2, [r7, #12]
  return result;
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	fab2 f282 	clz	r2, r2
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	40d3      	lsrs	r3, r2
 8005778:	4a14      	ldr	r2, [pc, #80]	; (80057cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800577a:	5cd3      	ldrb	r3, [r2, r3]
 800577c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005788:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
 8005798:	e004      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800579e:	fb02 f303 	mul.w	r3, r2, r3
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	623b      	str	r3, [r7, #32]
      break;
 80057a8:	e002      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80057ac:	623b      	str	r3, [r7, #32]
      break;
 80057ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057b0:	6a3b      	ldr	r3, [r7, #32]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	372c      	adds	r7, #44	; 0x2c
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	00f42400 	.word	0x00f42400
 80057c8:	08006168 	.word	0x08006168
 80057cc:	08006178 	.word	0x08006178
 80057d0:	003d0900 	.word	0x003d0900
 80057d4:	007a1200 	.word	0x007a1200

080057d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b092      	sub	sp, #72	; 0x48
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80d4 	beq.w	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057fc:	4b4e      	ldr	r3, [pc, #312]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10e      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005808:	4b4b      	ldr	r3, [pc, #300]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4a4a      	ldr	r2, [pc, #296]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005812:	61d3      	str	r3, [r2, #28]
 8005814:	4b48      	ldr	r3, [pc, #288]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005820:	2301      	movs	r3, #1
 8005822:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005826:	4b45      	ldr	r3, [pc, #276]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d118      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005832:	4b42      	ldr	r3, [pc, #264]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a41      	ldr	r2, [pc, #260]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800583e:	f7fc f8fd 	bl	8001a3c <HAL_GetTick>
 8005842:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005844:	e008      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005846:	f7fc f8f9 	bl	8001a3c <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b64      	cmp	r3, #100	; 0x64
 8005852:	d901      	bls.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e169      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005858:	4b38      	ldr	r3, [pc, #224]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0f0      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005864:	4b34      	ldr	r3, [pc, #208]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800586e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8084 	beq.w	800597e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005880:	429a      	cmp	r2, r3
 8005882:	d07c      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005884:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800588e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005892:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	fa93 f3a3 	rbit	r3, r3
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800589e:	fab3 f383 	clz	r3, r3
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	4b26      	ldr	r3, [pc, #152]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058a8:	4413      	add	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	461a      	mov	r2, r3
 80058ae:	2301      	movs	r3, #1
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	fa93 f3a3 	rbit	r3, r3
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80058c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058c2:	fab3 f383 	clz	r3, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058d6:	4a18      	ldr	r2, [pc, #96]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d04b      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e6:	f7fc f8a9 	bl	8001a3c <HAL_GetTick>
 80058ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ec:	e00a      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ee:	f7fc f8a5 	bl	8001a3c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e113      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005904:	2302      	movs	r3, #2
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	fa93 f3a3 	rbit	r3, r3
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	2302      	movs	r3, #2
 8005912:	623b      	str	r3, [r7, #32]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	fa93 f3a3 	rbit	r3, r3
 800591a:	61fb      	str	r3, [r7, #28]
  return result;
 800591c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800591e:	fab3 f383 	clz	r3, r3
 8005922:	b2db      	uxtb	r3, r3
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f043 0302 	orr.w	r3, r3, #2
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d108      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005932:	4b01      	ldr	r3, [pc, #4]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	e00d      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005938:	40021000 	.word	0x40021000
 800593c:	40007000 	.word	0x40007000
 8005940:	10908100 	.word	0x10908100
 8005944:	2302      	movs	r3, #2
 8005946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	4b78      	ldr	r3, [pc, #480]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2202      	movs	r2, #2
 8005956:	613a      	str	r2, [r7, #16]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	fa92 f2a2 	rbit	r2, r2
 800595e:	60fa      	str	r2, [r7, #12]
  return result;
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	fab2 f282 	clz	r2, r2
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	f002 021f 	and.w	r2, r2, #31
 8005972:	2101      	movs	r1, #1
 8005974:	fa01 f202 	lsl.w	r2, r1, r2
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0b7      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800597e:	4b6d      	ldr	r3, [pc, #436]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	496a      	ldr	r1, [pc, #424]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800598c:	4313      	orrs	r3, r2
 800598e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005990:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005994:	2b01      	cmp	r3, #1
 8005996:	d105      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005998:	4b66      	ldr	r3, [pc, #408]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4a65      	ldr	r2, [pc, #404]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059b0:	4b60      	ldr	r3, [pc, #384]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	f023 0203 	bic.w	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	495d      	ldr	r1, [pc, #372]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d008      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059ce:	4b59      	ldr	r3, [pc, #356]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	4956      	ldr	r1, [pc, #344]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059ec:	4b51      	ldr	r3, [pc, #324]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	494e      	ldr	r1, [pc, #312]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a0a:	4b4a      	ldr	r3, [pc, #296]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	f023 0210 	bic.w	r2, r3, #16
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	4947      	ldr	r1, [pc, #284]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005a28:	4b42      	ldr	r3, [pc, #264]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	493f      	ldr	r1, [pc, #252]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d008      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a46:	4b3b      	ldr	r3, [pc, #236]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	f023 0220 	bic.w	r2, r3, #32
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	4938      	ldr	r1, [pc, #224]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a64:	4b33      	ldr	r3, [pc, #204]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	4930      	ldr	r1, [pc, #192]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d008      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a82:	4b2c      	ldr	r3, [pc, #176]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	4929      	ldr	r1, [pc, #164]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005aa0:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	4921      	ldr	r1, [pc, #132]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005abe:	4b1d      	ldr	r3, [pc, #116]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	491a      	ldr	r1, [pc, #104]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005adc:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	4912      	ldr	r1, [pc, #72]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005afa:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	490b      	ldr	r1, [pc, #44]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	4903      	ldr	r1, [pc, #12]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3748      	adds	r7, #72	; 0x48
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40021000 	.word	0x40021000

08005b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e049      	b.n	8005bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fb fc44 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f000 f8fe 	bl	8005d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_TIM_ConfigClockSource+0x1c>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e0b6      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x18a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c20:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3e:	d03e      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0xd8>
 8005c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c44:	f200 8087 	bhi.w	8005d56 <HAL_TIM_ConfigClockSource+0x170>
 8005c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4c:	f000 8086 	beq.w	8005d5c <HAL_TIM_ConfigClockSource+0x176>
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c54:	d87f      	bhi.n	8005d56 <HAL_TIM_ConfigClockSource+0x170>
 8005c56:	2b70      	cmp	r3, #112	; 0x70
 8005c58:	d01a      	beq.n	8005c90 <HAL_TIM_ConfigClockSource+0xaa>
 8005c5a:	2b70      	cmp	r3, #112	; 0x70
 8005c5c:	d87b      	bhi.n	8005d56 <HAL_TIM_ConfigClockSource+0x170>
 8005c5e:	2b60      	cmp	r3, #96	; 0x60
 8005c60:	d050      	beq.n	8005d04 <HAL_TIM_ConfigClockSource+0x11e>
 8005c62:	2b60      	cmp	r3, #96	; 0x60
 8005c64:	d877      	bhi.n	8005d56 <HAL_TIM_ConfigClockSource+0x170>
 8005c66:	2b50      	cmp	r3, #80	; 0x50
 8005c68:	d03c      	beq.n	8005ce4 <HAL_TIM_ConfigClockSource+0xfe>
 8005c6a:	2b50      	cmp	r3, #80	; 0x50
 8005c6c:	d873      	bhi.n	8005d56 <HAL_TIM_ConfigClockSource+0x170>
 8005c6e:	2b40      	cmp	r3, #64	; 0x40
 8005c70:	d058      	beq.n	8005d24 <HAL_TIM_ConfigClockSource+0x13e>
 8005c72:	2b40      	cmp	r3, #64	; 0x40
 8005c74:	d86f      	bhi.n	8005d56 <HAL_TIM_ConfigClockSource+0x170>
 8005c76:	2b30      	cmp	r3, #48	; 0x30
 8005c78:	d064      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x15e>
 8005c7a:	2b30      	cmp	r3, #48	; 0x30
 8005c7c:	d86b      	bhi.n	8005d56 <HAL_TIM_ConfigClockSource+0x170>
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d060      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x15e>
 8005c82:	2b20      	cmp	r3, #32
 8005c84:	d867      	bhi.n	8005d56 <HAL_TIM_ConfigClockSource+0x170>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d05c      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x15e>
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d05a      	beq.n	8005d44 <HAL_TIM_ConfigClockSource+0x15e>
 8005c8e:	e062      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ca0:	f000 f974 	bl	8005f8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	609a      	str	r2, [r3, #8]
      break;
 8005cbc:	e04f      	b.n	8005d5e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cce:	f000 f95d 	bl	8005f8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce0:	609a      	str	r2, [r3, #8]
      break;
 8005ce2:	e03c      	b.n	8005d5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	f000 f8d1 	bl	8005e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2150      	movs	r1, #80	; 0x50
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f92a 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005d02:	e02c      	b.n	8005d5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d10:	461a      	mov	r2, r3
 8005d12:	f000 f8f0 	bl	8005ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2160      	movs	r1, #96	; 0x60
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f91a 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005d22:	e01c      	b.n	8005d5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d30:	461a      	mov	r2, r3
 8005d32:	f000 f8b1 	bl	8005e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2140      	movs	r1, #64	; 0x40
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 f90a 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005d42:	e00c      	b.n	8005d5e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f000 f901 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005d54:	e003      	b.n	8005d5e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	73fb      	strb	r3, [r7, #15]
      break;
 8005d5a:	e000      	b.n	8005d5e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a3c      	ldr	r2, [pc, #240]	; (8005e7c <TIM_Base_SetConfig+0x104>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00f      	beq.n	8005db0 <TIM_Base_SetConfig+0x38>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d96:	d00b      	beq.n	8005db0 <TIM_Base_SetConfig+0x38>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a39      	ldr	r2, [pc, #228]	; (8005e80 <TIM_Base_SetConfig+0x108>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d007      	beq.n	8005db0 <TIM_Base_SetConfig+0x38>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a38      	ldr	r2, [pc, #224]	; (8005e84 <TIM_Base_SetConfig+0x10c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_Base_SetConfig+0x38>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a37      	ldr	r2, [pc, #220]	; (8005e88 <TIM_Base_SetConfig+0x110>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2d      	ldr	r2, [pc, #180]	; (8005e7c <TIM_Base_SetConfig+0x104>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d01b      	beq.n	8005e02 <TIM_Base_SetConfig+0x8a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d017      	beq.n	8005e02 <TIM_Base_SetConfig+0x8a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2a      	ldr	r2, [pc, #168]	; (8005e80 <TIM_Base_SetConfig+0x108>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <TIM_Base_SetConfig+0x8a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a29      	ldr	r2, [pc, #164]	; (8005e84 <TIM_Base_SetConfig+0x10c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00f      	beq.n	8005e02 <TIM_Base_SetConfig+0x8a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a28      	ldr	r2, [pc, #160]	; (8005e88 <TIM_Base_SetConfig+0x110>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00b      	beq.n	8005e02 <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a27      	ldr	r2, [pc, #156]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a26      	ldr	r2, [pc, #152]	; (8005e90 <TIM_Base_SetConfig+0x118>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_Base_SetConfig+0x8a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <TIM_Base_SetConfig+0x11c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d108      	bne.n	8005e14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a10      	ldr	r2, [pc, #64]	; (8005e7c <TIM_Base_SetConfig+0x104>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d00f      	beq.n	8005e60 <TIM_Base_SetConfig+0xe8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a11      	ldr	r2, [pc, #68]	; (8005e88 <TIM_Base_SetConfig+0x110>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00b      	beq.n	8005e60 <TIM_Base_SetConfig+0xe8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <TIM_Base_SetConfig+0x114>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d007      	beq.n	8005e60 <TIM_Base_SetConfig+0xe8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a0f      	ldr	r2, [pc, #60]	; (8005e90 <TIM_Base_SetConfig+0x118>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d003      	beq.n	8005e60 <TIM_Base_SetConfig+0xe8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a0e      	ldr	r2, [pc, #56]	; (8005e94 <TIM_Base_SetConfig+0x11c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d103      	bne.n	8005e68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	615a      	str	r2, [r3, #20]
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800

08005e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 030a 	bic.w	r3, r3, #10
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b087      	sub	sp, #28
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f023 0210 	bic.w	r2, r3, #16
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	031b      	lsls	r3, r3, #12
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f043 0307 	orr.w	r3, r3, #7
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	609a      	str	r2, [r3, #8]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	021a      	lsls	r2, r3, #8
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	609a      	str	r2, [r3, #8]
}
 8005fc0:	bf00      	nop
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e063      	b.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a2b      	ldr	r2, [pc, #172]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d108      	bne.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800601e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006030:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4313      	orrs	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d018      	beq.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d013      	beq.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a18      	ldr	r2, [pc, #96]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00e      	beq.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d009      	beq.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a12      	ldr	r2, [pc, #72]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d004      	beq.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a13      	ldr	r2, [pc, #76]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10c      	bne.n	800609a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006086:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	4313      	orrs	r3, r2
 8006090:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40013400 	.word	0x40013400
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40014000 	.word	0x40014000

080060cc <memset>:
 80060cc:	4402      	add	r2, r0
 80060ce:	4603      	mov	r3, r0
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d100      	bne.n	80060d6 <memset+0xa>
 80060d4:	4770      	bx	lr
 80060d6:	f803 1b01 	strb.w	r1, [r3], #1
 80060da:	e7f9      	b.n	80060d0 <memset+0x4>

080060dc <__libc_init_array>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	4d0d      	ldr	r5, [pc, #52]	; (8006114 <__libc_init_array+0x38>)
 80060e0:	4c0d      	ldr	r4, [pc, #52]	; (8006118 <__libc_init_array+0x3c>)
 80060e2:	1b64      	subs	r4, r4, r5
 80060e4:	10a4      	asrs	r4, r4, #2
 80060e6:	2600      	movs	r6, #0
 80060e8:	42a6      	cmp	r6, r4
 80060ea:	d109      	bne.n	8006100 <__libc_init_array+0x24>
 80060ec:	4d0b      	ldr	r5, [pc, #44]	; (800611c <__libc_init_array+0x40>)
 80060ee:	4c0c      	ldr	r4, [pc, #48]	; (8006120 <__libc_init_array+0x44>)
 80060f0:	f000 f826 	bl	8006140 <_init>
 80060f4:	1b64      	subs	r4, r4, r5
 80060f6:	10a4      	asrs	r4, r4, #2
 80060f8:	2600      	movs	r6, #0
 80060fa:	42a6      	cmp	r6, r4
 80060fc:	d105      	bne.n	800610a <__libc_init_array+0x2e>
 80060fe:	bd70      	pop	{r4, r5, r6, pc}
 8006100:	f855 3b04 	ldr.w	r3, [r5], #4
 8006104:	4798      	blx	r3
 8006106:	3601      	adds	r6, #1
 8006108:	e7ee      	b.n	80060e8 <__libc_init_array+0xc>
 800610a:	f855 3b04 	ldr.w	r3, [r5], #4
 800610e:	4798      	blx	r3
 8006110:	3601      	adds	r6, #1
 8006112:	e7f2      	b.n	80060fa <__libc_init_array+0x1e>
 8006114:	08006188 	.word	0x08006188
 8006118:	08006188 	.word	0x08006188
 800611c:	08006188 	.word	0x08006188
 8006120:	0800618c 	.word	0x0800618c

08006124 <memcpy>:
 8006124:	440a      	add	r2, r1
 8006126:	4291      	cmp	r1, r2
 8006128:	f100 33ff 	add.w	r3, r0, #4294967295
 800612c:	d100      	bne.n	8006130 <memcpy+0xc>
 800612e:	4770      	bx	lr
 8006130:	b510      	push	{r4, lr}
 8006132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800613a:	4291      	cmp	r1, r2
 800613c:	d1f9      	bne.n	8006132 <memcpy+0xe>
 800613e:	bd10      	pop	{r4, pc}

08006140 <_init>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	bf00      	nop
 8006144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006146:	bc08      	pop	{r3}
 8006148:	469e      	mov	lr, r3
 800614a:	4770      	bx	lr

0800614c <_fini>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr
