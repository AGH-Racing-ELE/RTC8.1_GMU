
GMU_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800673c  0800673c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800673c  0800673c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800673c  0800673c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006740  08006740  00016740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000049c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a8  200004a8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011fd3  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000368d  00000000  00000000  00032052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001170  00000000  00000000  000356e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d32  00000000  00000000  00036850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fdf4  00000000  00000000  00037582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001821e  00000000  00000000  00057376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000beb00  00000000  00000000  0006f594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004674  00000000  00000000  0012e094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00132708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066f4 	.word	0x080066f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080066f4 	.word	0x080066f4

080001c8 <ADC_Init>:

volatile uint16_t adcValue[10];
uint16_t adcValueMean;

void ADC_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_OPAMP_Start(&hopamp1);
 80001cc:	4806      	ldr	r0, [pc, #24]	; (80001e8 <ADC_Init+0x20>)
 80001ce:	f004 fb65 	bl	800489c <HAL_OPAMP_Start>
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80001d2:	2100      	movs	r1, #0
 80001d4:	4805      	ldr	r0, [pc, #20]	; (80001ec <ADC_Init+0x24>)
 80001d6:	f002 fb07 	bl	80027e8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adcValue,10);
 80001da:	220a      	movs	r2, #10
 80001dc:	4904      	ldr	r1, [pc, #16]	; (80001f0 <ADC_Init+0x28>)
 80001de:	4803      	ldr	r0, [pc, #12]	; (80001ec <ADC_Init+0x24>)
 80001e0:	f001 ff00 	bl	8001fe4 <HAL_ADC_Start_DMA>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	20000114 	.word	0x20000114
 80001f0:	20000028 	.word	0x20000028

080001f4 <getADCValue>:

uint16_t getADCValue(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	uint32_t adcValueTmp = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i<=10; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	70fb      	strb	r3, [r7, #3]
 8000202:	e00b      	b.n	800021c <getADCValue+0x28>
	{
		adcValueTmp += adcValue[i];
 8000204:	78fb      	ldrb	r3, [r7, #3]
 8000206:	4a0f      	ldr	r2, [pc, #60]	; (8000244 <getADCValue+0x50>)
 8000208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800020c:	b29b      	uxth	r3, r3
 800020e:	461a      	mov	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4413      	add	r3, r2
 8000214:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0; i<=10; i++)
 8000216:	78fb      	ldrb	r3, [r7, #3]
 8000218:	3301      	adds	r3, #1
 800021a:	70fb      	strb	r3, [r7, #3]
 800021c:	78fb      	ldrb	r3, [r7, #3]
 800021e:	2b0a      	cmp	r3, #10
 8000220:	d9f0      	bls.n	8000204 <getADCValue+0x10>
	}
	return adcValueMean = (adcValueTmp / 10);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4a08      	ldr	r2, [pc, #32]	; (8000248 <getADCValue+0x54>)
 8000226:	fba2 2303 	umull	r2, r3, r2, r3
 800022a:	08db      	lsrs	r3, r3, #3
 800022c:	b29a      	uxth	r2, r3
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <getADCValue+0x58>)
 8000230:	801a      	strh	r2, [r3, #0]
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <getADCValue+0x58>)
 8000234:	881b      	ldrh	r3, [r3, #0]
}
 8000236:	4618      	mov	r0, r3
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	cccccccd 	.word	0xcccccccd
 800024c:	2000003c 	.word	0x2000003c

08000250 <AppInit>:


Gearbox_t gearbox;

void AppInit(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	gearboxInit(&gearbox);
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <AppInit+0x18>)
 8000256:	f000 f993 	bl	8000580 <gearboxInit>
	ADC_Init();
 800025a:	f7ff ffb5 	bl	80001c8 <ADC_Init>
	CAN_Handler_Init();
 800025e:	f000 f893 	bl	8000388 <CAN_Handler_Init>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000040 	.word	0x20000040

0800026c <canRxProcess>:

void canRxProcess()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	static uint8_t clutch_data;

	if(CAN_Handler_IsGearUpCommanded())
 8000270:	f000 f8b8 	bl	80003e4 <CAN_Handler_IsGearUpCommanded>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d003      	beq.n	8000282 <canRxProcess+0x16>
	{
		startUpshift(&gearbox);
 800027a:	4812      	ldr	r0, [pc, #72]	; (80002c4 <canRxProcess+0x58>)
 800027c:	f000 fcbc 	bl	8000bf8 <startUpshift>
		return;
 8000280:	e01e      	b.n	80002c0 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsGearDownCommanded())
 8000282:	f000 f8cb 	bl	800041c <CAN_Handler_IsGearDownCommanded>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d003      	beq.n	8000294 <canRxProcess+0x28>
	{
		startDownshift(&gearbox);
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <canRxProcess+0x58>)
 800028e:	f000 fcc4 	bl	8000c1a <startDownshift>
		return;
 8000292:	e015      	b.n	80002c0 <canRxProcess+0x54>
	}
	if(CAN_Handler_IsClutchCommanded(&clutch_data))
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <canRxProcess+0x5c>)
 8000296:	f000 f8dd 	bl	8000454 <CAN_Handler_IsClutchCommanded>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d00f      	beq.n	80002c0 <canRxProcess+0x54>
	{
		if(clutch_data == 255)
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <canRxProcess+0x5c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2bff      	cmp	r3, #255	; 0xff
 80002a6:	d103      	bne.n	80002b0 <canRxProcess+0x44>
			{
				clutch(true);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fcc7 	bl	8000c3c <clutch>
			}
			else if(clutch_data == 0)
			{
				clutch(false);
			}
				return;
 80002ae:	e006      	b.n	80002be <canRxProcess+0x52>
			else if(clutch_data == 0)
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <canRxProcess+0x5c>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d102      	bne.n	80002be <canRxProcess+0x52>
				clutch(false);
 80002b8:	2000      	movs	r0, #0
 80002ba:	f000 fcbf 	bl	8000c3c <clutch>
				return;
 80002be:	bf00      	nop
	}

}
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000040 	.word	0x20000040
 80002c8:	20000064 	.word	0x20000064

080002cc <sendCANFrame>:

void sendCANFrame(void)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af04      	add	r7, sp, #16

	CAN_Handler_SendGmu1Frame(gearbox.actual_gear, HAL_GPIO_ReadPin(CLUTCH_GPIO_Port, CLUTCH_Pin), gearbox.gearPosADC, gearbox._state, 0, 0, gearbox.gear_cut);
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <sendCANFrame+0x54>)
 80002d4:	7b5c      	ldrb	r4, [r3, #13]
 80002d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002da:	4812      	ldr	r0, [pc, #72]	; (8000324 <sendCANFrame+0x58>)
 80002dc:	f004 f9f0 	bl	80046c0 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4618      	mov	r0, r3
 80002e4:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <sendCANFrame+0x54>)
 80002e6:	881a      	ldrh	r2, [r3, #0]
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <sendCANFrame+0x54>)
 80002ea:	7b19      	ldrb	r1, [r3, #12]
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <sendCANFrame+0x54>)
 80002ee:	7edb      	ldrb	r3, [r3, #27]
 80002f0:	9302      	str	r3, [sp, #8]
 80002f2:	2300      	movs	r3, #0
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	2300      	movs	r3, #0
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	460b      	mov	r3, r1
 80002fc:	4601      	mov	r1, r0
 80002fe:	4620      	mov	r0, r4
 8000300:	f000 f8c8 	bl	8000494 <CAN_Handler_SendGmu1Frame>
	CAN_Handler_SendGmu2Frame(0, 0, gearbox.upshiftTime, gearbox.downshiftTime);
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <sendCANFrame+0x54>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	b29a      	uxth	r2, r3
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <sendCANFrame+0x54>)
 800030c:	6a1b      	ldr	r3, [r3, #32]
 800030e:	b29b      	uxth	r3, r3
 8000310:	2100      	movs	r1, #0
 8000312:	2000      	movs	r0, #0
 8000314:	f000 f8f4 	bl	8000500 <CAN_Handler_SendGmu2Frame>
}
 8000318:	bf00      	nop
 800031a:	3704      	adds	r7, #4
 800031c:	46bd      	mov	sp, r7
 800031e:	bd90      	pop	{r4, r7, pc}
 8000320:	20000040 	.word	0x20000040
 8000324:	48000400 	.word	0x48000400

08000328 <AppProcess>:
void statusLED(void)
{
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
}
void AppProcess(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
	uint32_t CANRXtick = HAL_GetTick();
 800032e:	f001 fc45 	bl	8001bbc <HAL_GetTick>
 8000332:	6078      	str	r0, [r7, #4]
	uint32_t CANSendFrameTick = HAL_GetTick();
 8000334:	f001 fc42 	bl	8001bbc <HAL_GetTick>
 8000338:	6038      	str	r0, [r7, #0]

	while(1)
	{
		gearbox.gearPosADC = getADCValue();
 800033a:	f7ff ff5b 	bl	80001f4 <getADCValue>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <AppProcess+0x5c>)
 8000344:	801a      	strh	r2, [r3, #0]
		updateGear(&gearbox);
 8000346:	480f      	ldr	r0, [pc, #60]	; (8000384 <AppProcess+0x5c>)
 8000348:	f000 f947 	bl	80005da <updateGear>
		processCallback(&gearbox);
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <AppProcess+0x5c>)
 800034e:	f000 f9b7 	bl	80006c0 <processCallback>

		if((HAL_GetTick() - CANRXtick) > 1)
 8000352:	f001 fc33 	bl	8001bbc <HAL_GetTick>
 8000356:	4602      	mov	r2, r0
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	2b01      	cmp	r3, #1
 800035e:	d904      	bls.n	800036a <AppProcess+0x42>
		{
			canRxProcess();
 8000360:	f7ff ff84 	bl	800026c <canRxProcess>
			CANRXtick = HAL_GetTick();
 8000364:	f001 fc2a 	bl	8001bbc <HAL_GetTick>
 8000368:	6078      	str	r0, [r7, #4]
		}
		if((HAL_GetTick() - CANSendFrameTick) > 2)
 800036a:	f001 fc27 	bl	8001bbc <HAL_GetTick>
 800036e:	4602      	mov	r2, r0
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	2b02      	cmp	r3, #2
 8000376:	d9e0      	bls.n	800033a <AppProcess+0x12>
		{
			sendCANFrame();
 8000378:	f7ff ffa8 	bl	80002cc <sendCANFrame>
			CANSendFrameTick = HAL_GetTick();
 800037c:	f001 fc1e 	bl	8001bbc <HAL_GetTick>
 8000380:	6038      	str	r0, [r7, #0]
		gearbox.gearPosADC = getADCValue();
 8000382:	e7da      	b.n	800033a <AppProcess+0x12>
 8000384:	20000040 	.word	0x20000040

08000388 <CAN_Handler_Init>:

struct can_frame cf_gear_up, cf_gear_down, cf_clutch;
struct can_frame cf_gmu1, cf_gmu2;


void CAN_Handler_Init(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

	CAN_Init();
 800038c:	f001 f9cc 	bl	8001728 <CAN_Init>

	CAN_InitFrame(&cf_gear_up, 0x000, 0, 1);
 8000390:	2301      	movs	r3, #1
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	480e      	ldr	r0, [pc, #56]	; (80003d0 <CAN_Handler_Init+0x48>)
 8000398:	f001 f9d2 	bl	8001740 <CAN_InitFrame>
	CAN_InitFrame(&cf_gear_down, 0x001, 0, 1);
 800039c:	2301      	movs	r3, #1
 800039e:	2200      	movs	r2, #0
 80003a0:	2101      	movs	r1, #1
 80003a2:	480c      	ldr	r0, [pc, #48]	; (80003d4 <CAN_Handler_Init+0x4c>)
 80003a4:	f001 f9cc 	bl	8001740 <CAN_InitFrame>
	CAN_InitFrame(&cf_clutch, 0x002, 0, 1);
 80003a8:	2301      	movs	r3, #1
 80003aa:	2200      	movs	r2, #0
 80003ac:	2102      	movs	r1, #2
 80003ae:	480a      	ldr	r0, [pc, #40]	; (80003d8 <CAN_Handler_Init+0x50>)
 80003b0:	f001 f9c6 	bl	8001740 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu1, 0x080, 10, 8);
 80003b4:	2308      	movs	r3, #8
 80003b6:	220a      	movs	r2, #10
 80003b8:	2180      	movs	r1, #128	; 0x80
 80003ba:	4808      	ldr	r0, [pc, #32]	; (80003dc <CAN_Handler_Init+0x54>)
 80003bc:	f001 f9c0 	bl	8001740 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu2, 0x081, 100, 8);
 80003c0:	2308      	movs	r3, #8
 80003c2:	2264      	movs	r2, #100	; 0x64
 80003c4:	2181      	movs	r1, #129	; 0x81
 80003c6:	4806      	ldr	r0, [pc, #24]	; (80003e0 <CAN_Handler_Init+0x58>)
 80003c8:	f001 f9ba 	bl	8001740 <CAN_InitFrame>

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000068 	.word	0x20000068
 80003d4:	20000088 	.word	0x20000088
 80003d8:	200000a8 	.word	0x200000a8
 80003dc:	200000c8 	.word	0x200000c8
 80003e0:	200000e8 	.word	0x200000e8

080003e4 <CAN_Handler_IsGearUpCommanded>:

uint8_t CAN_Handler_IsGearUpCommanded(){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

	static uint32_t last_tick = 0;

	if((cf_gear_up.tick_ms != last_tick) && (cf_gear_up.core.data[0] == 255)){
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <CAN_Handler_IsGearUpCommanded+0x30>)
 80003ea:	699a      	ldr	r2, [r3, #24]
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <CAN_Handler_IsGearUpCommanded+0x34>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d009      	beq.n	8000408 <CAN_Handler_IsGearUpCommanded+0x24>
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <CAN_Handler_IsGearUpCommanded+0x30>)
 80003f6:	7b1b      	ldrb	r3, [r3, #12]
 80003f8:	2bff      	cmp	r3, #255	; 0xff
 80003fa:	d105      	bne.n	8000408 <CAN_Handler_IsGearUpCommanded+0x24>
		last_tick = cf_gear_up.tick_ms;
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <CAN_Handler_IsGearUpCommanded+0x30>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a05      	ldr	r2, [pc, #20]	; (8000418 <CAN_Handler_IsGearUpCommanded+0x34>)
 8000402:	6013      	str	r3, [r2, #0]
		return 1;
 8000404:	2301      	movs	r3, #1
 8000406:	e000      	b.n	800040a <CAN_Handler_IsGearUpCommanded+0x26>
	}
	else{
		return 0;
 8000408:	2300      	movs	r3, #0
	}


}
 800040a:	4618      	mov	r0, r3
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	20000068 	.word	0x20000068
 8000418:	20000108 	.word	0x20000108

0800041c <CAN_Handler_IsGearDownCommanded>:

uint8_t CAN_Handler_IsGearDownCommanded(){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

	static uint32_t last_tick_ds = 0;

	if((cf_gear_down.tick_ms != last_tick_ds) && (cf_gear_down.core.data[0] == 255)){
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <CAN_Handler_IsGearDownCommanded+0x30>)
 8000422:	699a      	ldr	r2, [r3, #24]
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <CAN_Handler_IsGearDownCommanded+0x34>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	429a      	cmp	r2, r3
 800042a:	d009      	beq.n	8000440 <CAN_Handler_IsGearDownCommanded+0x24>
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <CAN_Handler_IsGearDownCommanded+0x30>)
 800042e:	7b1b      	ldrb	r3, [r3, #12]
 8000430:	2bff      	cmp	r3, #255	; 0xff
 8000432:	d105      	bne.n	8000440 <CAN_Handler_IsGearDownCommanded+0x24>
		last_tick_ds = cf_gear_down.tick_ms;
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <CAN_Handler_IsGearDownCommanded+0x30>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a05      	ldr	r2, [pc, #20]	; (8000450 <CAN_Handler_IsGearDownCommanded+0x34>)
 800043a:	6013      	str	r3, [r2, #0]
		return 1;
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <CAN_Handler_IsGearDownCommanded+0x26>
	}
	else{
		return 0;
 8000440:	2300      	movs	r3, #0
	}


}
 8000442:	4618      	mov	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	20000088 	.word	0x20000088
 8000450:	2000010c 	.word	0x2000010c

08000454 <CAN_Handler_IsClutchCommanded>:

uint8_t CAN_Handler_IsClutchCommanded(uint8_t* data){
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]

	static uint32_t last_tick = 0;

	if(cf_clutch.tick_ms != last_tick){
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <CAN_Handler_IsClutchCommanded+0x38>)
 800045e:	699a      	ldr	r2, [r3, #24]
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <CAN_Handler_IsClutchCommanded+0x3c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	429a      	cmp	r2, r3
 8000466:	d009      	beq.n	800047c <CAN_Handler_IsClutchCommanded+0x28>
		last_tick = cf_clutch.tick_ms;
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <CAN_Handler_IsClutchCommanded+0x38>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a08      	ldr	r2, [pc, #32]	; (8000490 <CAN_Handler_IsClutchCommanded+0x3c>)
 800046e:	6013      	str	r3, [r2, #0]
		*data = cf_clutch.core.data[0];
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <CAN_Handler_IsClutchCommanded+0x38>)
 8000472:	7b1a      	ldrb	r2, [r3, #12]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	701a      	strb	r2, [r3, #0]
		return 1;
 8000478:	2301      	movs	r3, #1
 800047a:	e000      	b.n	800047e <CAN_Handler_IsClutchCommanded+0x2a>
	}
	else{
		return 0;
 800047c:	2300      	movs	r3, #0
	}


}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	200000a8 	.word	0x200000a8
 8000490:	20000110 	.word	0x20000110

08000494 <CAN_Handler_SendGmu1Frame>:

void CAN_Handler_SendGmu1Frame(uint8_t gear, uint8_t clutch, uint16_t gear_pos_adc, uint8_t state, uint8_t air_preas, uint8_t reset_det, uint8_t gear_cut){
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4604      	mov	r4, r0
 800049c:	4608      	mov	r0, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	461a      	mov	r2, r3
 80004a2:	4623      	mov	r3, r4
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	4603      	mov	r3, r0
 80004a8:	71bb      	strb	r3, [r7, #6]
 80004aa:	460b      	mov	r3, r1
 80004ac:	80bb      	strh	r3, [r7, #4]
 80004ae:	4613      	mov	r3, r2
 80004b0:	70fb      	strb	r3, [r7, #3]

	cf_gmu1.core.data[0] = gear;
 80004b2:	4a12      	ldr	r2, [pc, #72]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	7313      	strb	r3, [r2, #12]
	cf_gmu1.core.data[1] = clutch;
 80004b8:	4a10      	ldr	r2, [pc, #64]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	7353      	strb	r3, [r2, #13]
	cf_gmu1.core.data[2] = (uint8_t)((gear_pos_adc >> 8) & 0xFF);
 80004be:	88bb      	ldrh	r3, [r7, #4]
 80004c0:	0a1b      	lsrs	r3, r3, #8
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004c8:	739a      	strb	r2, [r3, #14]
	cf_gmu1.core.data[3] = (uint8_t)(gear_pos_adc & 0xFF);
 80004ca:	88bb      	ldrh	r3, [r7, #4]
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004d0:	73da      	strb	r2, [r3, #15]
	cf_gmu1.core.data[4] = state;
 80004d2:	4a0a      	ldr	r2, [pc, #40]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	7413      	strb	r3, [r2, #16]
	cf_gmu1.core.data[5] = air_preas;
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004da:	7e3b      	ldrb	r3, [r7, #24]
 80004dc:	7453      	strb	r3, [r2, #17]
	cf_gmu1.core.data[6] = (uint8_t)((gear_cut)&0xFF);
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80004e4:	7493      	strb	r3, [r2, #18]
	cf_gmu1.core.data[7] = reset_det;
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004e8:	7f3b      	ldrb	r3, [r7, #28]
 80004ea:	74d3      	strb	r3, [r2, #19]

	CAN_SendFrame(&cf_gmu1);
 80004ec:	4803      	ldr	r0, [pc, #12]	; (80004fc <CAN_Handler_SendGmu1Frame+0x68>)
 80004ee:	f001 f97f 	bl	80017f0 <CAN_SendFrame>
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000c8 	.word	0x200000c8

08000500 <CAN_Handler_SendGmu2Frame>:

void CAN_Handler_SendGmu2Frame(uint16_t partial_upshift_t, uint16_t partial_downshift_t, uint16_t upshift_t, uint16_t downshift_t){
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4604      	mov	r4, r0
 8000508:	4608      	mov	r0, r1
 800050a:	4611      	mov	r1, r2
 800050c:	461a      	mov	r2, r3
 800050e:	4623      	mov	r3, r4
 8000510:	80fb      	strh	r3, [r7, #6]
 8000512:	4603      	mov	r3, r0
 8000514:	80bb      	strh	r3, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	807b      	strh	r3, [r7, #2]
 800051a:	4613      	mov	r3, r2
 800051c:	803b      	strh	r3, [r7, #0]

	cf_gmu2.core.data[0] = (uint8_t)((partial_upshift_t >> 8) & 0xFF);
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000528:	731a      	strb	r2, [r3, #12]
	cf_gmu2.core.data[1] = (uint8_t)(partial_upshift_t & 0xFF);
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000530:	735a      	strb	r2, [r3, #13]
	cf_gmu2.core.data[2] = (uint8_t)((partial_downshift_t >> 8) & 0xFF);
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	b29b      	uxth	r3, r3
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 800053c:	739a      	strb	r2, [r3, #14]
	cf_gmu2.core.data[3] = (uint8_t)(partial_downshift_t & 0xFF);
 800053e:	88bb      	ldrh	r3, [r7, #4]
 8000540:	b2da      	uxtb	r2, r3
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000544:	73da      	strb	r2, [r3, #15]
	cf_gmu2.core.data[4] = (uint8_t)((upshift_t >> 8) & 0xFF);
 8000546:	887b      	ldrh	r3, [r7, #2]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b29b      	uxth	r3, r3
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000550:	741a      	strb	r2, [r3, #16]
	cf_gmu2.core.data[5] = (uint8_t)(upshift_t & 0xFF);
 8000552:	887b      	ldrh	r3, [r7, #2]
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000558:	745a      	strb	r2, [r3, #17]
	cf_gmu2.core.data[6] = (uint8_t)((downshift_t >> 8) & 0xFF);
 800055a:	883b      	ldrh	r3, [r7, #0]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	b29b      	uxth	r3, r3
 8000560:	b2da      	uxtb	r2, r3
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000564:	749a      	strb	r2, [r3, #18]
	cf_gmu2.core.data[7] = (uint8_t)(downshift_t & 0xFF);
 8000566:	883b      	ldrh	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b04      	ldr	r3, [pc, #16]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 800056c:	74da      	strb	r2, [r3, #19]

	CAN_SendFrame(&cf_gmu2);
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <CAN_Handler_SendGmu2Frame+0x7c>)
 8000570:	f001 f93e 	bl	80017f0 <CAN_SendFrame>
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bd90      	pop	{r4, r7, pc}
 800057c:	200000e8 	.word	0x200000e8

08000580 <gearboxInit>:
#include "main.h"

static bool getTimeout(uint32_t dupa, uint32_t anus);

void gearboxInit(Gearbox_t* gearbox)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	gearbox->neutral_adc = 800;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800058e:	805a      	strh	r2, [r3, #2]
	gearbox->gear1_adc = 1300;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f240 5214 	movw	r2, #1300	; 0x514
 8000596:	809a      	strh	r2, [r3, #4]
	gearbox->gear2_adc = 1700;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800059e:	80da      	strh	r2, [r3, #6]
	gearbox->gear3_adc = 2150;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f640 0266 	movw	r2, #2150	; 0x866
 80005a6:	811a      	strh	r2, [r3, #8]
	gearbox->gear4_adc = 2550;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f640 12f6 	movw	r2, #2550	; 0x9f6
 80005ae:	815a      	strh	r2, [r3, #10]

	gearbox->_state = Idle;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	731a      	strb	r2, [r3, #12]

	gearbox->shift_start_tick = 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
	gearbox->timestamp_tick = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
	gearbox->start_gear_sens = 0;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	831a      	strh	r2, [r3, #24]
	gearbox->start_gear = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	769a      	strb	r2, [r3, #26]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <updateGear>:
{
	gearbox->gearPosADC = ADCValue;
}

void updateGear(Gearbox_t* gearbox)
{
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
	if((gearbox->gearPosADC>=(gearbox->neutral_adc-100))&&(gearbox->gearPosADC<=(gearbox->neutral_adc+100)))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	461a      	mov	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	885b      	ldrh	r3, [r3, #2]
 80005ec:	3b64      	subs	r3, #100	; 0x64
 80005ee:	429a      	cmp	r2, r3
 80005f0:	db0b      	blt.n	800060a <updateGear+0x30>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	885b      	ldrh	r3, [r3, #2]
 80005fc:	3364      	adds	r3, #100	; 0x64
 80005fe:	429a      	cmp	r2, r3
 8000600:	dc03      	bgt.n	800060a <updateGear+0x30>
	{
		gearbox->actual_gear = 0;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	735a      	strb	r2, [r3, #13]
 8000608:	e053      	b.n	80006b2 <updateGear+0xd8>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear1_adc-100))&&(gearbox->gearPosADC<=(gearbox->gear1_adc+100)))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	889b      	ldrh	r3, [r3, #4]
 8000614:	3b64      	subs	r3, #100	; 0x64
 8000616:	429a      	cmp	r2, r3
 8000618:	db0b      	blt.n	8000632 <updateGear+0x58>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	3364      	adds	r3, #100	; 0x64
 8000626:	429a      	cmp	r2, r3
 8000628:	dc03      	bgt.n	8000632 <updateGear+0x58>
	{
		gearbox->actual_gear = 1;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2201      	movs	r2, #1
 800062e:	735a      	strb	r2, [r3, #13]
 8000630:	e03f      	b.n	80006b2 <updateGear+0xd8>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear2_adc-100))&&(gearbox->gearPosADC<=(gearbox->gear2_adc+100)))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	88db      	ldrh	r3, [r3, #6]
 800063c:	3b64      	subs	r3, #100	; 0x64
 800063e:	429a      	cmp	r2, r3
 8000640:	db0b      	blt.n	800065a <updateGear+0x80>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	88db      	ldrh	r3, [r3, #6]
 800064c:	3364      	adds	r3, #100	; 0x64
 800064e:	429a      	cmp	r2, r3
 8000650:	dc03      	bgt.n	800065a <updateGear+0x80>
	{
		gearbox->actual_gear = 2;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2202      	movs	r2, #2
 8000656:	735a      	strb	r2, [r3, #13]
 8000658:	e02b      	b.n	80006b2 <updateGear+0xd8>
	}
	else if((gearbox->gearPosADC>=(gearbox->gear3_adc-100))&&(gearbox->gearPosADC<=(gearbox->gear3_adc+100)))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	891b      	ldrh	r3, [r3, #8]
 8000664:	3b64      	subs	r3, #100	; 0x64
 8000666:	429a      	cmp	r2, r3
 8000668:	db0b      	blt.n	8000682 <updateGear+0xa8>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	891b      	ldrh	r3, [r3, #8]
 8000674:	3364      	adds	r3, #100	; 0x64
 8000676:	429a      	cmp	r2, r3
 8000678:	dc03      	bgt.n	8000682 <updateGear+0xa8>
		{
			gearbox->actual_gear = 3;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2203      	movs	r2, #3
 800067e:	735a      	strb	r2, [r3, #13]
 8000680:	e017      	b.n	80006b2 <updateGear+0xd8>
		}
	else if((gearbox->gearPosADC>=(gearbox->gear4_adc-100))&&(gearbox->gearPosADC<=(gearbox->gear4_adc+100)))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	461a      	mov	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	895b      	ldrh	r3, [r3, #10]
 800068c:	3b64      	subs	r3, #100	; 0x64
 800068e:	429a      	cmp	r2, r3
 8000690:	db0b      	blt.n	80006aa <updateGear+0xd0>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	895b      	ldrh	r3, [r3, #10]
 800069c:	3364      	adds	r3, #100	; 0x64
 800069e:	429a      	cmp	r2, r3
 80006a0:	dc03      	bgt.n	80006aa <updateGear+0xd0>
		{
			gearbox->actual_gear = 4;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2204      	movs	r2, #4
 80006a6:	735a      	strb	r2, [r3, #13]
 80006a8:	e003      	b.n	80006b2 <updateGear+0xd8>
		}
	else
		{
			gearbox->actual_gear = 0xff;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	735a      	strb	r2, [r3, #13]
		}

}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <processCallback>:

void processCallback(Gearbox_t* gearbox)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	switch(gearbox->_state)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7b1b      	ldrb	r3, [r3, #12]
 80006cc:	2b0c      	cmp	r3, #12
 80006ce:	d84d      	bhi.n	800076c <processCallback+0xac>
 80006d0:	a201      	add	r2, pc, #4	; (adr r2, 80006d8 <processCallback+0x18>)
 80006d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d6:	bf00      	nop
 80006d8:	08000775 	.word	0x08000775
 80006dc:	0800070d 	.word	0x0800070d
 80006e0:	08000715 	.word	0x08000715
 80006e4:	0800071d 	.word	0x0800071d
 80006e8:	08000725 	.word	0x08000725
 80006ec:	0800072d 	.word	0x0800072d
 80006f0:	08000735 	.word	0x08000735
 80006f4:	0800073d 	.word	0x0800073d
 80006f8:	08000745 	.word	0x08000745
 80006fc:	0800074d 	.word	0x0800074d
 8000700:	08000755 	.word	0x08000755
 8000704:	0800075d 	.word	0x0800075d
 8000708:	08000765 	.word	0x08000765
	{
		case Idle:
		break;

		case StartUpshift:
			startUpshiftCallback(gearbox);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 f837 	bl	8000780 <startUpshiftCallback>
		break;
 8000712:	e030      	b.n	8000776 <processCallback+0xb6>

		case UpshiftFromNeutral:
			upshiftFromNeutral(gearbox);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f876 	bl	8000806 <upshiftFromNeutral>
		break;
 800071a:	e02c      	b.n	8000776 <processCallback+0xb6>

		case UpshiftGearCut:
			upshiftGearCut(gearbox);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f896 	bl	800084e <upshiftGearCut>
		break;
 8000722:	e028      	b.n	8000776 <processCallback+0xb6>

		case UpshiftFinish:
			upshiftFinish(gearbox);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f8b8 	bl	800089a <upshiftFinish>
		break;
 800072a:	e024      	b.n	8000776 <processCallback+0xb6>

		case StartDownshift:
			startDownshiftCallback(gearbox);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f8ed 	bl	800090c <startDownshiftCallback>
		break;
 8000732:	e020      	b.n	8000776 <processCallback+0xb6>

		case DownshiftToNeutral:
			downshiftToNeutral(gearbox);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 f92d 	bl	8000994 <downshiftToNeutral>
		break;
 800073a:	e01c      	b.n	8000776 <processCallback+0xb6>

		case DownshiftRevMatch:
			downshiftRevMatch(gearbox);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f951 	bl	80009e4 <downshiftRevMatch>
		break;
 8000742:	e018      	b.n	8000776 <processCallback+0xb6>

		case DownshiftFinish:
			downshiftFinish(gearbox);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f975 	bl	8000a34 <downshiftFinish>
		break;
 800074a:	e014      	b.n	8000776 <processCallback+0xb6>

		case OL_US_GearCut:
			openLoop_upshift_gearCut(gearbox);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f9ab 	bl	8000aa8 <openLoop_upshift_gearCut>
		break;
 8000752:	e010      	b.n	8000776 <processCallback+0xb6>

		case OL_US_Finish:
			openLoop_upshift_finish(gearbox);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f9c9 	bl	8000aec <openLoop_upshift_finish>
		break;
 800075a:	e00c      	b.n	8000776 <processCallback+0xb6>

		case OL_DS_Clutch:
			openLoop_downshift_clutch(gearbox);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f9f5 	bl	8000b4c <openLoop_downshift_clutch>
		break;
 8000762:	e008      	b.n	8000776 <processCallback+0xb6>

		case OL_DS_Finish:
			openLoop_downshift_finish(gearbox);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 fa15 	bl	8000b94 <openLoop_downshift_finish>
		break;
 800076a:	e004      	b.n	8000776 <processCallback+0xb6>

		default:
			gearbox->_state = Idle;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	731a      	strb	r2, [r3, #12]
		break;
 8000772:	e000      	b.n	8000776 <processCallback+0xb6>
		break;
 8000774:	bf00      	nop

	}
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop

08000780 <startUpshiftCallback>:

void startUpshiftCallback(Gearbox_t* gearbox)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	gearbox->start_gear = gearbox->actual_gear;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7b5a      	ldrb	r2, [r3, #13]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	769a      	strb	r2, [r3, #26]
	gearbox->shift_start_tick = HAL_GetTick();
 8000790:	f001 fa14 	bl	8001bbc <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	611a      	str	r2, [r3, #16]
	if(gearbox->start_gear > 5)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7e9b      	ldrb	r3, [r3, #26]
 800079e:	2b05      	cmp	r3, #5
 80007a0:	d90f      	bls.n	80007c2 <startUpshiftCallback+0x42>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f003 ffa0 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80007b0:	f001 fa04 	bl	8001bbc <HAL_GetTick>
 80007b4:	4602      	mov	r2, r0
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_US_GearCut;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2209      	movs	r2, #9
 80007be:	731a      	strb	r2, [r3, #12]
		return;
 80007c0:	e01e      	b.n	8000800 <startUpshiftCallback+0x80>
	}
	if(gearbox->start_gear == 4)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e9b      	ldrb	r3, [r3, #26]
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d103      	bne.n	80007d2 <startUpshiftCallback+0x52>
	{
		gearbox->_state = Idle;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2200      	movs	r2, #0
 80007ce:	731a      	strb	r2, [r3, #12]
		return;
 80007d0:	e016      	b.n	8000800 <startUpshiftCallback+0x80>
	}
	HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f003 ff88 	bl	80046f0 <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 80007e0:	f001 f9ec 	bl	8001bbc <HAL_GetTick>
 80007e4:	4602      	mov	r2, r0
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	615a      	str	r2, [r3, #20]

	if(gearbox->start_gear == 0)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7e9b      	ldrb	r3, [r3, #26]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d103      	bne.n	80007fa <startUpshiftCallback+0x7a>
	{
		gearbox->_state = UpshiftFromNeutral;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2202      	movs	r2, #2
 80007f6:	731a      	strb	r2, [r3, #12]
 80007f8:	e002      	b.n	8000800 <startUpshiftCallback+0x80>
	}
	else
	{
		gearbox->_state = UpshiftGearCut;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2203      	movs	r2, #3
 80007fe:	731a      	strb	r2, [r3, #12]
	}
}
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <upshiftFromNeutral>:
void upshiftFromNeutral(Gearbox_t* gearbox)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == 1) || (getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT)))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	7b5b      	ldrb	r3, [r3, #13]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d008      	beq.n	8000828 <upshiftFromNeutral+0x22>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	21c8      	movs	r1, #200	; 0xc8
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fa1f 	bl	8000c60 <getTimeout>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <upshiftFromNeutral+0x40>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f003 ff5d 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000836:	f001 f9c1 	bl	8001bbc <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	615a      	str	r2, [r3, #20]
		gearbox->_state = Idle;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	731a      	strb	r2, [r3, #12]
	}
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <upshiftGearCut>:

void upshiftGearCut(Gearbox_t* gearbox)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, US_ACTUATOR_DELAY)||(gearbox->actual_gear == 0xff))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	2114      	movs	r1, #20
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f9ff 	bl	8000c60 <getTimeout>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d103      	bne.n	8000870 <upshiftGearCut+0x22>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7b5b      	ldrb	r3, [r3, #13]
 800086c:	2bff      	cmp	r3, #255	; 0xff
 800086e:	d110      	bne.n	8000892 <upshiftGearCut+0x44>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2110      	movs	r1, #16
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f003 ff3a 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000882:	f001 f99b 	bl	8001bbc <HAL_GetTick>
 8000886:	4602      	mov	r2, r0
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	615a      	str	r2, [r3, #20]
		gearbox->_state = UpshiftFinish;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2204      	movs	r2, #4
 8000890:	731a      	strb	r2, [r3, #12]
	}
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <upshiftFinish>:

void upshiftFinish(Gearbox_t* gearbox)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear+1)||(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT)))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	7b5b      	ldrb	r3, [r3, #13]
 80008a6:	461a      	mov	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7e9b      	ldrb	r3, [r3, #26]
 80008ac:	3301      	adds	r3, #1
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d008      	beq.n	80008c4 <upshiftFinish+0x2a>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	21c8      	movs	r1, #200	; 0xc8
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f9d1 	bl	8000c60 <getTimeout>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d01e      	beq.n	8000902 <upshiftFinish+0x68>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2110      	movs	r1, #16
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f003 ff10 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f003 ff09 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	227f      	movs	r2, #127	; 0x7f
 80008e2:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 80008e4:	f001 f96a 	bl	8001bbc <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	615a      	str	r2, [r3, #20]
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	695a      	ldr	r2, [r3, #20]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	1ad2      	subs	r2, r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	61da      	str	r2, [r3, #28]
		gearbox->_state = Idle;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	731a      	strb	r2, [r3, #12]
	}
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <startDownshiftCallback>:

void startDownshiftCallback(Gearbox_t* gearbox)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	gearbox->shift_start_tick = HAL_GetTick();
 8000914:	f001 f952 	bl	8001bbc <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	611a      	str	r2, [r3, #16]
	gearbox->start_gear = gearbox->actual_gear;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	7b5a      	ldrb	r2, [r3, #13]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	769a      	strb	r2, [r3, #26]

	if(gearbox->start_gear > 4)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7e9b      	ldrb	r3, [r3, #26]
 800092a:	2b04      	cmp	r3, #4
 800092c:	d90e      	bls.n	800094c <startDownshiftCallback+0x40>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000934:	4816      	ldr	r0, [pc, #88]	; (8000990 <startDownshiftCallback+0x84>)
 8000936:	f003 fedb 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 800093a:	f001 f93f 	bl	8001bbc <HAL_GetTick>
 800093e:	4602      	mov	r2, r0
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_DS_Clutch;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	220b      	movs	r2, #11
 8000948:	731a      	strb	r2, [r3, #12]
		return;
 800094a:	e01d      	b.n	8000988 <startDownshiftCallback+0x7c>
	}
	else if(gearbox->start_gear == 0)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7e9b      	ldrb	r3, [r3, #26]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <startDownshiftCallback+0x50>
	{
		gearbox->_state = Idle;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	731a      	strb	r2, [r3, #12]
		return;
 800095a:	e015      	b.n	8000988 <startDownshiftCallback+0x7c>
	}

	HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <startDownshiftCallback+0x84>)
 8000964:	f003 fec4 	bl	80046f0 <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 8000968:	f001 f928 	bl	8001bbc <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	615a      	str	r2, [r3, #20]

	if(gearbox->start_gear == 1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7e9b      	ldrb	r3, [r3, #26]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d103      	bne.n	8000982 <startDownshiftCallback+0x76>
	{
		gearbox->_state = DownshiftToNeutral;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2206      	movs	r2, #6
 800097e:	731a      	strb	r2, [r3, #12]
 8000980:	e002      	b.n	8000988 <startDownshiftCallback+0x7c>
	}
	else
	{
		gearbox->_state = DownshiftRevMatch;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2207      	movs	r2, #7
 8000986:	731a      	strb	r2, [r3, #12]
	}
}
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	48000400 	.word	0x48000400

08000994 <downshiftToNeutral>:

void downshiftToNeutral(Gearbox_t* gearbox)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	2128      	movs	r1, #40	; 0x28
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f95c 	bl	8000c60 <getTimeout>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d014      	beq.n	80009d8 <downshiftToNeutral+0x44>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b4:	480a      	ldr	r0, [pc, #40]	; (80009e0 <downshiftToNeutral+0x4c>)
 80009b6:	f003 fe9b 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80009ba:	f001 f8ff 	bl	8001bbc <HAL_GetTick>
 80009be:	4602      	mov	r2, r0
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	615a      	str	r2, [r3, #20]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	695a      	ldr	r2, [r3, #20]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	691b      	ldr	r3, [r3, #16]
 80009cc:	1ad2      	subs	r2, r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	621a      	str	r2, [r3, #32]
		gearbox->_state = DownshiftFinish;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2208      	movs	r2, #8
 80009d6:	731a      	strb	r2, [r3, #12]
	}
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	48000400 	.word	0x48000400

080009e4 <downshiftRevMatch>:

void downshiftRevMatch(Gearbox_t* gearbox)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY) || (gearbox->actual_gear == 0xff))
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	2128      	movs	r1, #40	; 0x28
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 f934 	bl	8000c60 <getTimeout>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d103      	bne.n	8000a06 <downshiftRevMatch+0x22>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7b5b      	ldrb	r3, [r3, #13]
 8000a02:	2bff      	cmp	r3, #255	; 0xff
 8000a04:	d110      	bne.n	8000a28 <downshiftRevMatch+0x44>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <downshiftRevMatch+0x4c>)
 8000a0e:	f003 fe6f 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000a12:	f001 f8d3 	bl	8001bbc <HAL_GetTick>
 8000a16:	4602      	mov	r2, r0
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	615a      	str	r2, [r3, #20]
		gearbox->gear_cut = 0;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	76da      	strb	r2, [r3, #27]
		gearbox->_state = DownshiftFinish;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2208      	movs	r2, #8
 8000a26:	731a      	strb	r2, [r3, #12]
	}
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	48000400 	.word	0x48000400

08000a34 <downshiftFinish>:

void downshiftFinish(Gearbox_t* gearbox)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear -1 ) || (getTimeout(gearbox->timestamp_tick, DS_FINISH_TIMEOUT)))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7b5b      	ldrb	r3, [r3, #13]
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7e9b      	ldrb	r3, [r3, #26]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d008      	beq.n	8000a5e <downshiftFinish+0x2a>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	21fa      	movs	r1, #250	; 0xfa
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f904 	bl	8000c60 <getTimeout>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d01d      	beq.n	8000a9a <downshiftFinish+0x66>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <downshiftFinish+0x70>)
 8000a66:	f003 fe43 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <downshiftFinish+0x70>)
 8000a72:	f003 fe3d 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	227f      	movs	r2, #127	; 0x7f
 8000a7a:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000a7c:	f001 f89e 	bl	8001bbc <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	615a      	str	r2, [r3, #20]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	695a      	ldr	r2, [r3, #20]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	1ad2      	subs	r2, r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	621a      	str	r2, [r3, #32]
		gearbox->_state = Idle;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	731a      	strb	r2, [r3, #12]
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	48000400 	.word	0x48000400

08000aa8 <openLoop_upshift_gearCut>:

void openLoop_upshift_gearCut(Gearbox_t* gearbox)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_US_GEARCUT_DEALAY))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	2164      	movs	r1, #100	; 0x64
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f8d2 	bl	8000c60 <getTimeout>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d010      	beq.n	8000ae4 <openLoop_upshift_gearCut+0x3c>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f003 fe11 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	22ff      	movs	r2, #255	; 0xff
 8000ad2:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000ad4:	f001 f872 	bl	8001bbc <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	615a      	str	r2, [r3, #20]
		gearbox->_state = OL_US_Finish;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	731a      	strb	r2, [r3, #12]
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <openLoop_upshift_finish>:

void openLoop_upshift_finish(Gearbox_t* gearbox)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	21c8      	movs	r1, #200	; 0xc8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f8b0 	bl	8000c60 <getTimeout>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d01e      	beq.n	8000b44 <openLoop_upshift_finish+0x58>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2110      	movs	r1, #16
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f003 fdef 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f003 fde8 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	227f      	movs	r2, #127	; 0x7f
 8000b24:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000b26:	f001 f849 	bl	8001bbc <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	615a      	str	r2, [r3, #20]
		gearbox->upshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	1ad2      	subs	r2, r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	61da      	str	r2, [r3, #28]
		gearbox->_state = Idle;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	731a      	strb	r2, [r3, #12]
	}
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <openLoop_downshift_clutch>:

void openLoop_downshift_clutch(Gearbox_t* gearbox)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	2128      	movs	r1, #40	; 0x28
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f880 	bl	8000c60 <getTimeout>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d010      	beq.n	8000b88 <openLoop_downshift_clutch+0x3c>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <openLoop_downshift_clutch+0x44>)
 8000b6e:	f003 fdbf 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000b72:	f001 f823 	bl	8001bbc <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	615a      	str	r2, [r3, #20]
		gearbox->gear_cut = 0;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	76da      	strb	r2, [r3, #27]
		gearbox->_state = OL_DS_Finish;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	220c      	movs	r2, #12
 8000b86:	731a      	strb	r2, [r3, #12]
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	48000400 	.word	0x48000400

08000b94 <openLoop_downshift_finish>:

void openLoop_downshift_finish(Gearbox_t* gearbox)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_DS_CLUTCH_DELAY))
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	2164      	movs	r1, #100	; 0x64
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f85c 	bl	8000c60 <getTimeout>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d01d      	beq.n	8000bea <openLoop_downshift_finish+0x56>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb4:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <openLoop_downshift_finish+0x60>)
 8000bb6:	f003 fd9b 	bl	80046f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc0:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <openLoop_downshift_finish+0x60>)
 8000bc2:	f003 fd95 	bl	80046f0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	227f      	movs	r2, #127	; 0x7f
 8000bca:	76da      	strb	r2, [r3, #27]
		gearbox->timestamp_tick = HAL_GetTick();
 8000bcc:	f000 fff6 	bl	8001bbc <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	615a      	str	r2, [r3, #20]
		gearbox->downshiftTime = (gearbox->timestamp_tick - gearbox->shift_start_tick);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	695a      	ldr	r2, [r3, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	1ad2      	subs	r2, r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	621a      	str	r2, [r3, #32]
		gearbox->_state = Idle;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	731a      	strb	r2, [r3, #12]
	}
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <startUpshift>:

void startUpshift(Gearbox_t* gearbox)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	7b1b      	ldrb	r3, [r3, #12]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <startUpshift+0x16>
		gearbox->_state = StartUpshift;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	731a      	strb	r2, [r3, #12]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <startDownshift>:
void startDownshift(Gearbox_t* gearbox)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7b1b      	ldrb	r3, [r3, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <startDownshift+0x16>
		gearbox->_state = StartDownshift;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2205      	movs	r2, #5
 8000c2e:	731a      	strb	r2, [r3, #12]
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <clutch>:

void clutch(bool ON)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <clutch+0x20>)
 8000c50:	f003 fd4e 	bl	80046f0 <HAL_GPIO_WritePin>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	48000400 	.word	0x48000400

08000c60 <getTimeout>:
	else
		return false;
}

static bool getTimeout(uint32_t actual_time, uint32_t maximum_waiting_time)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
	if((HAL_GetTick() - actual_time) >= maximum_waiting_time)
 8000c6a:	f000 ffa7 	bl	8001bbc <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d801      	bhi.n	8000c7e <getTimeout+0x1e>
	{
		return true;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <getTimeout+0x20>
	}
	else
		return false;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000caa:	4b88      	ldr	r3, [pc, #544]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000cb2:	4b86      	ldr	r3, [pc, #536]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b84      	ldr	r3, [pc, #528]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cc0:	4b82      	ldr	r3, [pc, #520]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cc6:	4b81      	ldr	r3, [pc, #516]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b7f      	ldr	r3, [pc, #508]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd4:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b7c      	ldr	r3, [pc, #496]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b7a      	ldr	r3, [pc, #488]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8000ce6:	4b79      	ldr	r3, [pc, #484]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000ce8:	2210      	movs	r2, #16
 8000cea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cec:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf4:	4b75      	ldr	r3, [pc, #468]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d00:	4b72      	ldr	r3, [pc, #456]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d06:	4871      	ldr	r0, [pc, #452]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000d08:	f000 ff8c 	bl	8001c24 <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d12:	f000 fadb 	bl	80012cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	486a      	ldr	r0, [pc, #424]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000d22:	f002 f8e5 	bl	8002ef0 <HAL_ADCEx_MultiModeConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000d2c:	f000 face 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d30:	2303      	movs	r3, #3
 8000d32:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	485f      	ldr	r0, [pc, #380]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000d4e:	f001 fde5 	bl	800291c <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000d58:	f000 fab8 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4859      	ldr	r0, [pc, #356]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000d66:	f001 fdd9 	bl	800291c <HAL_ADC_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000d70:	f000 faac 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d74:	2303      	movs	r3, #3
 8000d76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4853      	ldr	r0, [pc, #332]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000d7e:	f001 fdcd 	bl	800291c <HAL_ADC_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8000d88:	f000 faa0 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	484d      	ldr	r0, [pc, #308]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000d96:	f001 fdc1 	bl	800291c <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000da0:	f000 fa94 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000da4:	2305      	movs	r3, #5
 8000da6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4847      	ldr	r0, [pc, #284]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000dae:	f001 fdb5 	bl	800291c <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000db8:	f000 fa88 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000dbc:	2306      	movs	r3, #6
 8000dbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4841      	ldr	r0, [pc, #260]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000dc6:	f001 fda9 	bl	800291c <HAL_ADC_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_ADC1_Init+0x14c>
  {
    Error_Handler();
 8000dd0:	f000 fa7c 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	483b      	ldr	r0, [pc, #236]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000dde:	f001 fd9d 	bl	800291c <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x164>
  {
    Error_Handler();
 8000de8:	f000 fa70 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000dec:	2308      	movs	r3, #8
 8000dee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4619      	mov	r1, r3
 8000df4:	4835      	ldr	r0, [pc, #212]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000df6:	f001 fd91 	bl	800291c <HAL_ADC_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000e00:	f000 fa64 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000e04:	2309      	movs	r3, #9
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	482f      	ldr	r0, [pc, #188]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000e0e:	f001 fd85 	bl	800291c <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC1_Init+0x194>
  {
    Error_Handler();
 8000e18:	f000 fa58 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4829      	ldr	r0, [pc, #164]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000e26:	f001 fd79 	bl	800291c <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000e30:	f000 fa4c 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000e34:	230b      	movs	r3, #11
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4823      	ldr	r0, [pc, #140]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000e3e:	f001 fd6d 	bl	800291c <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8000e48:	f000 fa40 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	481d      	ldr	r0, [pc, #116]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000e56:	f001 fd61 	bl	800291c <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x1dc>
  {
    Error_Handler();
 8000e60:	f000 fa34 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000e64:	230d      	movs	r3, #13
 8000e66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000e6e:	f001 fd55 	bl	800291c <HAL_ADC_ConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x1f4>
  {
    Error_Handler();
 8000e78:	f000 fa28 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000e7c:	230e      	movs	r3, #14
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000e86:	f001 fd49 	bl	800291c <HAL_ADC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x20c>
  {
    Error_Handler();
 8000e90:	f000 fa1c 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000e94:	230f      	movs	r3, #15
 8000e96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480b      	ldr	r0, [pc, #44]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000e9e:	f001 fd3d 	bl	800291c <HAL_ADC_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0x224>
  {
    Error_Handler();
 8000ea8:	f000 fa10 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000eac:	2310      	movs	r3, #16
 8000eae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_ADC1_Init+0x244>)
 8000eb6:	f001 fd31 	bl	800291c <HAL_ADC_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x23c>
  {
    Error_Handler();
 8000ec0:	f000 fa04 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000114 	.word	0x20000114

08000ed0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee0:	d13c      	bne.n	8000f5c <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_ADC_MspInit+0x94>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <HAL_ADC_MspInit+0x94>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <HAL_ADC_MspInit+0x94>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000efc:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <HAL_ADC_MspInit+0x9c>)
 8000efe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f24:	2220      	movs	r2, #32
 8000f26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f2a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f32:	f003 f898 	bl	8004066 <HAL_DMA_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000f3c:	f000 f9c6 	bl	80012cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_ADC_MspInit+0x98>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	2012      	movs	r0, #18
 8000f52:	f003 f852 	bl	8003ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f56:	2012      	movs	r0, #18
 8000f58:	f003 f86b 	bl	8004032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	20000164 	.word	0x20000164
 8000f6c:	40020008 	.word	0x40020008

08000f70 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000f76:	4a18      	ldr	r2, [pc, #96]	; (8000fd8 <MX_CAN_Init+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000f8e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000f92:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000f96:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000f9a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_CAN_Init+0x64>)
 8000fc2:	f002 f9b7 	bl	8003334 <HAL_CAN_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000fcc:	f000 f97e 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001a8 	.word	0x200001a8
 8000fd8:	40006400 	.word	0x40006400

08000fdc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <HAL_CAN_MspInit+0xc0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d149      	bne.n	8001092 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <HAL_CAN_MspInit+0xc4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <HAL_CAN_MspInit+0xc4>)
 8001004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <HAL_CAN_MspInit+0xc4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_CAN_MspInit+0xc4>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <HAL_CAN_MspInit+0xc4>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <HAL_CAN_MspInit+0xc4>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800102e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001040:	2309      	movs	r3, #9
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f003 f9bd 	bl	80043cc <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2013      	movs	r0, #19
 8001058:	f002 ffcf 	bl	8003ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 800105c:	2013      	movs	r0, #19
 800105e:	f002 ffe8 	bl	8004032 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2014      	movs	r0, #20
 8001068:	f002 ffc7 	bl	8003ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800106c:	2014      	movs	r0, #20
 800106e:	f002 ffe0 	bl	8004032 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2015      	movs	r0, #21
 8001078:	f002 ffbf 	bl	8003ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800107c:	2015      	movs	r0, #21
 800107e:	f002 ffd8 	bl	8004032 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2016      	movs	r0, #22
 8001088:	f002 ffb7 	bl	8003ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 800108c:	2016      	movs	r0, #22
 800108e:	f002 ffd0 	bl	8004032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40006400 	.word	0x40006400
 80010a0:	40021000 	.word	0x40021000

080010a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_DMA_Init+0x38>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <MX_DMA_Init+0x38>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6153      	str	r3, [r2, #20]
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_DMA_Init+0x38>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	200b      	movs	r0, #11
 80010c8:	f002 ff97 	bl	8003ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010cc:	200b      	movs	r0, #11
 80010ce:	f002 ffb0 	bl	8004032 <HAL_NVIC_EnableIRQ>

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <MX_GPIO_Init+0xf8>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a37      	ldr	r2, [pc, #220]	; (80011d8 <MX_GPIO_Init+0xf8>)
 80010fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b35      	ldr	r3, [pc, #212]	; (80011d8 <MX_GPIO_Init+0xf8>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <MX_GPIO_Init+0xf8>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <MX_GPIO_Init+0xf8>)
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	6153      	str	r3, [r2, #20]
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <MX_GPIO_Init+0xf8>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <MX_GPIO_Init+0xf8>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a2b      	ldr	r2, [pc, #172]	; (80011d8 <MX_GPIO_Init+0xf8>)
 800112c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <MX_GPIO_Init+0xf8>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEAR_CUT_Pin|GEAR_UP_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f003 fad2 	bl	80046f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLUTCH_Pin|GEAR_DOWN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8001152:	4822      	ldr	r0, [pc, #136]	; (80011dc <MX_GPIO_Init+0xfc>)
 8001154:	f003 facc 	bl	80046f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_CUT_Pin;
 8001158:	2310      	movs	r3, #16
 800115a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_CUT_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001172:	f003 f92b 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CLUTCH_Pin|GEAR_DOWN_Pin;
 8001176:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	4813      	ldr	r0, [pc, #76]	; (80011dc <MX_GPIO_Init+0xfc>)
 8001190:	f003 f91c 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_UP_Pin;
 8001194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_UP_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f003 f90c 	bl	80043cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	4619      	mov	r1, r3
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_GPIO_Init+0xfc>)
 80011cc:	f003 f8fe 	bl	80043cc <HAL_GPIO_Init>

}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48000400 	.word	0x48000400

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e4:	f000 fc90 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e8:	f000 f816 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ec:	f7ff ff78 	bl	80010e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f0:	f7ff ff58 	bl	80010a4 <MX_DMA_Init>
  MX_CAN_Init();
 80011f4:	f7ff febc 	bl	8000f70 <MX_CAN_Init>
  MX_OPAMP1_Init();
 80011f8:	f000 f86e 	bl	80012d8 <MX_OPAMP1_Init>
  MX_ADC1_Init();
 80011fc:	f7ff fd44 	bl	8000c88 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001200:	f000 f960 	bl	80014c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 8001204:	f7ff f824 	bl	8000250 <AppInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <main+0x34>)
 800120a:	f004 fdf7 	bl	8005dfc <HAL_TIM_Base_Start_IT>
  AppProcess();
 800120e:	f7ff f88b 	bl	8000328 <AppProcess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001212:	e7fe      	b.n	8001212 <main+0x32>
 8001214:	20000204 	.word	0x20000204

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b090      	sub	sp, #64	; 0x40
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	2228      	movs	r2, #40	; 0x28
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fa2a 	bl	8006680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123a:	2301      	movs	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800123e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001242:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001244:	2301      	movs	r3, #1
 8001246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001248:	2301      	movs	r3, #1
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001256:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fb4d 	bl	8004900 <HAL_RCC_OscConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800126c:	f000 f82e 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	230f      	movs	r3, #15
 8001272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2102      	movs	r1, #2
 800128a:	4618      	mov	r0, r3
 800128c:	f004 fb76 	bl	800597c <HAL_RCC_ClockConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001296:	f000 f819 	bl	80012cc <Error_Handler>
  }
}
 800129a:	bf00      	nop
 800129c:	3740      	adds	r7, #64	; 0x40
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012b4:	d103      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012ba:	f003 fa31 	bl	8004720 <HAL_GPIO_TogglePin>
	}
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	48000400 	.word	0x48000400

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <Error_Handler+0x8>
	...

080012d8 <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_OPAMP1_Init+0x38>)
 80012de:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <MX_OPAMP1_Init+0x3c>)
 80012e0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_OPAMP1_Init+0x38>)
 80012e4:	2260      	movs	r2, #96	; 0x60
 80012e6:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_OPAMP1_Init+0x38>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_OPAMP1_Init+0x38>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_OPAMP1_Init+0x38>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_OPAMP1_Init+0x38>)
 80012fc:	f003 fa2a 	bl	8004754 <HAL_OPAMP_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 8001306:	f7ff ffe1 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001d0 	.word	0x200001d0
 8001314:	40010038 	.word	0x40010038

08001318 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0f      	ldr	r2, [pc, #60]	; (8001374 <HAL_OPAMP_MspInit+0x5c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d118      	bne.n	800136c <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_OPAMP_MspInit+0x60>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_OPAMP_MspInit+0x60>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	6153      	str	r3, [r2, #20]
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_OPAMP_MspInit+0x60>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GEAR_POS_Pin|GPIO_PIN_2;
 8001352:	2306      	movs	r3, #6
 8001354:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f003 f830 	bl	80043cc <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40010038 	.word	0x40010038
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x44>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x44>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x44>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x44>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 fbc0 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA1_Channel1_IRQHandler+0x10>)
 800141e:	f002 fec8 	bl	80041b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000164 	.word	0x20000164

0800142c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <ADC1_2_IRQHandler+0x10>)
 8001432:	f000 fef3 	bl	800221c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000114 	.word	0x20000114

08001440 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USB_HP_CAN_TX_IRQHandler+0x10>)
 8001446:	f002 fac6 	bl	80039d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001a8 	.word	0x200001a8

08001454 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800145a:	f002 fabc 	bl	80039d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200001a8 	.word	0x200001a8

08001468 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <CAN_RX1_IRQHandler+0x10>)
 800146e:	f002 fab2 	bl	80039d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001a8 	.word	0x200001a8

0800147c <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END CAN_SCE_IRQn 0 */
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM2_IRQHandler+0x10>)
 8001492:	f004 fd1d 	bl	8005ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000204 	.word	0x20000204

080014a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SystemInit+0x20>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <SystemInit+0x20>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_TIM2_Init+0x98>)
 80014e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_TIM2_Init+0x98>)
 80014ec:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM2_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 17999;
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_TIM2_Init+0x98>)
 80014fa:	f244 624f 	movw	r2, #17999	; 0x464f
 80014fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_TIM2_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_TIM2_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <MX_TIM2_Init+0x98>)
 800150e:	f004 fc1d 	bl	8005d4c <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001518:	f7ff fed8 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_TIM2_Init+0x98>)
 800152a:	f004 fdf0 	bl	800610e <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001534:	f7ff feca 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_TIM2_Init+0x98>)
 8001546:	f004 fffd 	bl	8006544 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001550:	f7ff febc 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000204 	.word	0x20000204

08001560 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001570:	d113      	bne.n	800159a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_TIM_Base_MspInit+0x44>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <HAL_TIM_Base_MspInit+0x44>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_TIM_Base_MspInit+0x44>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	2100      	movs	r1, #0
 800158e:	201c      	movs	r0, #28
 8001590:	f002 fd33 	bl	8003ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001594:	201c      	movs	r0, #28
 8001596:	f002 fd4c 	bl	8004032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ac:	f7ff ff78 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015b2:	490d      	ldr	r1, [pc, #52]	; (80015e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <LoopForever+0xe>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c8:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <LoopForever+0x16>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f005 f85b 	bl	8006690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015da:	f7ff fe01 	bl	80011e0 <main>

080015de <LoopForever>:

LoopForever:
    b LoopForever
 80015de:	e7fe      	b.n	80015de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015ec:	08006744 	.word	0x08006744
  ldr r2, =_sbss
 80015f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015f4:	200004a8 	.word	0x200004a8

080015f8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC3_IRQHandler>
	...

080015fc <CAN_FIFO_Add>:

#include "CAN_FIFO.h"



void CAN_FIFO_Add(struct CAN_FIFO *fifo, uint8_t *data_ptr){
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]

	if(fifo->empty){
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00b      	beq.n	8001628 <CAN_FIFO_Add+0x2c>
		fifo->data_ptr[fifo->last_element]=data_ptr;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	785b      	ldrb	r3, [r3, #1]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	605a      	str	r2, [r3, #4]
		fifo->empty=0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return;
 8001626:	e02c      	b.n	8001682 <CAN_FIFO_Add+0x86>
	}
	fifo->last_element=(fifo->last_element+1)%CAN_FIFO_SIZE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	3301      	adds	r3, #1
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <CAN_FIFO_Add+0x90>)
 8001630:	fb82 1203 	smull	r1, r2, r2, r3
 8001634:	1151      	asrs	r1, r2, #5
 8001636:	17da      	asrs	r2, r3, #31
 8001638:	1a8a      	subs	r2, r1, r2
 800163a:	2164      	movs	r1, #100	; 0x64
 800163c:	fb01 f202 	mul.w	r2, r1, r2
 8001640:	1a9a      	subs	r2, r3, r2
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	705a      	strb	r2, [r3, #1]
	if(fifo->last_element==fifo->first_element){
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	785a      	ldrb	r2, [r3, #1]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d10f      	bne.n	8001674 <CAN_FIFO_Add+0x78>
		fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <CAN_FIFO_Add+0x90>)
 800165c:	fb82 1203 	smull	r1, r2, r2, r3
 8001660:	1151      	asrs	r1, r2, #5
 8001662:	17da      	asrs	r2, r3, #31
 8001664:	1a8a      	subs	r2, r1, r2
 8001666:	2164      	movs	r1, #100	; 0x64
 8001668:	fb01 f202 	mul.w	r2, r1, r2
 800166c:	1a9a      	subs	r2, r3, r2
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	701a      	strb	r2, [r3, #0]
	}
	fifo->data_ptr[fifo->last_element]=data_ptr;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	785b      	ldrb	r3, [r3, #1]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	605a      	str	r2, [r3, #4]


}
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	51eb851f 	.word	0x51eb851f

08001690 <CAN_FIFO_Get>:

/* return 0 if FIFO is empty */
uint8_t* CAN_FIFO_Get(struct CAN_FIFO *fifo){
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

	uint8_t *temp;
	if(fifo->empty){
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <CAN_FIFO_Get+0x16>
		return 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e023      	b.n	80016ee <CAN_FIFO_Get+0x5e>
	}
	temp=fifo->data_ptr[fifo->first_element];
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60fb      	str	r3, [r7, #12]
	if(fifo->first_element==fifo->last_element){
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	785b      	ldrb	r3, [r3, #1]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d105      	bne.n	80016cc <CAN_FIFO_Get+0x3c>
		fifo->empty=1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return temp;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	e010      	b.n	80016ee <CAN_FIFO_Get+0x5e>
	}
	fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <CAN_FIFO_Get+0x6c>)
 80016d4:	fb82 1203 	smull	r1, r2, r2, r3
 80016d8:	1151      	asrs	r1, r2, #5
 80016da:	17da      	asrs	r2, r3, #31
 80016dc:	1a8a      	subs	r2, r1, r2
 80016de:	2164      	movs	r1, #100	; 0x64
 80016e0:	fb01 f202 	mul.w	r2, r1, r2
 80016e4:	1a9a      	subs	r2, r3, r2
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	701a      	strb	r2, [r3, #0]
	return temp;
 80016ec:	68fb      	ldr	r3, [r7, #12]

}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	51eb851f 	.word	0x51eb851f

08001700 <CAN_FIFO_Flush>:
uint8_t CAN_FIFO_Empty(struct CAN_FIFO *fifo){

	return fifo->empty;
}

void CAN_FIFO_Flush(struct CAN_FIFO *fifo){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

	fifo->first_element=0;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
	fifo->last_element=0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	705a      	strb	r2, [r3, #1]
	fifo->empty=1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <CAN_Init>:
	struct can_frame* pFrames[CAN_MAX_FRAME_NUM];
	uint8_t values_num;
}_can_info;


void CAN_Init(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	CAN_HW_Init();
 800172c:	f000 f8c6 	bl	80018bc <CAN_HW_Init>
	CAN_FIFO_Flush(&FIFO_CAN_TX);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <CAN_Init+0x14>)
 8001732:	f7ff ffe5 	bl	8001700 <CAN_FIFO_Flush>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000254 	.word	0x20000254

08001740 <CAN_InitFrame>:

void CAN_InitFrame(struct can_frame* pFrame, uint16_t id, uint16_t period, uint8_t dlc) {
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	461a      	mov	r2, r3
 800174e:	4603      	mov	r3, r0
 8001750:	817b      	strh	r3, [r7, #10]
 8001752:	460b      	mov	r3, r1
 8001754:	813b      	strh	r3, [r7, #8]
 8001756:	4613      	mov	r3, r2
 8001758:	71fb      	strb	r3, [r7, #7]
	
	pFrame->core.id = id;
 800175a:	897a      	ldrh	r2, [r7, #10]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	605a      	str	r2, [r3, #4]
	pFrame->period = period;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	893a      	ldrh	r2, [r7, #8]
 8001764:	829a      	strh	r2, [r3, #20]
	pFrame->core.dlc = dlc;
 8001766:	79fa      	ldrb	r2, [r7, #7]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	609a      	str	r2, [r3, #8]
	_can_info.pFrames[_can_info.frames_num] = pFrame;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <CAN_InitFrame+0x54>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4a08      	ldr	r2, [pc, #32]	; (8001794 <CAN_InitFrame+0x54>)
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	605a      	str	r2, [r3, #4]
	_can_info.frames_num++;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <CAN_InitFrame+0x54>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <CAN_InitFrame+0x54>)
 8001784:	701a      	strb	r2, [r3, #0]
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	200003ec 	.word	0x200003ec

08001798 <FilterFrame>:
	_can_info.values_num++;
}

/* returns index of frame in _can_info or
   returns 255 if didn't found matching frame*/
uint8_t FilterFrame(uint16_t id){
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
	
	uint8_t i;
	for(i = 0; i < _can_info.frames_num; i++){
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e00d      	b.n	80017c4 <FilterFrame+0x2c>
		if(_can_info.pFrames[i]->core.id == id){
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <FilterFrame+0x44>)
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d101      	bne.n	80017be <FilterFrame+0x26>
			return i;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	e008      	b.n	80017d0 <FilterFrame+0x38>
	for(i = 0; i < _can_info.frames_num; i++){
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	3301      	adds	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <FilterFrame+0x44>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d3ec      	bcc.n	80017a8 <FilterFrame+0x10>
		}
	}
	return 255;
 80017ce:	23ff      	movs	r3, #255	; 0xff
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	200003ec 	.word	0x200003ec

080017e0 <CAN_GetTickMs>:
	
	value = (value + pCan_value->ofs)*pCan_value->mult/pCan_value->div;
	return value;
}

inline uint32_t CAN_GetTickMs(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	return CAN_HW_GetTickMs();
 80017e4:	f000 f8ac 	bl	8001940 <CAN_HW_GetTickMs>
 80017e8:	4603      	mov	r3, r0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <CAN_SendFrame>:
	if(!pFrame->tick_ms) return 0;
	if(CAN_GetTickMs() - pFrame->tick_ms > pFrame->period*10) return 0;
	return 1;
}

inline uint8_t CAN_SendFrame(struct can_frame* pFrame) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	if(!CAN_HW_SendFrame(pFrame)){
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8a9 	bl	8001950 <CAN_HW_SendFrame>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d103      	bne.n	800180c <CAN_SendFrame+0x1c>
		CAN_FIFO_Add(&FIFO_CAN_TX, (uint8_t*)pFrame);
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4804      	ldr	r0, [pc, #16]	; (8001818 <CAN_SendFrame+0x28>)
 8001808:	f7ff fef8 	bl	80015fc <CAN_FIFO_Add>
	}
	return 1;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000254 	.word	0x20000254

0800181c <CAN_ReceiveCallback>:
void CAN_SetRxCallback(void (*callback)(struct can_frame* frame))
{
	CAN_RxCallback = callback;
}

inline void CAN_ReceiveCallback(struct can_msg* msg){
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	uint8_t index;
	index = FilterFrame(msg->id);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffb4 	bl	8001798 <FilterFrame>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
	if(index==255) return;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2bff      	cmp	r3, #255	; 0xff
 8001838:	d023      	beq.n	8001882 <CAN_ReceiveCallback+0x66>
	memcpy(_can_info.pFrames[index]->core.data, msg->data, 8);
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	4a13      	ldr	r2, [pc, #76]	; (800188c <CAN_ReceiveCallback+0x70>)
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f103 000c 	add.w	r0, r3, #12
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	330c      	adds	r3, #12
 800184c:	2208      	movs	r2, #8
 800184e:	4619      	mov	r1, r3
 8001850:	f004 ff42 	bl	80066d8 <memcpy>
	_can_info.pFrames[index]->tick_ms = CAN_GetTickMs();
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	4a0d      	ldr	r2, [pc, #52]	; (800188c <CAN_ReceiveCallback+0x70>)
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	685c      	ldr	r4, [r3, #4]
 800185e:	f7ff ffbf 	bl	80017e0 <CAN_GetTickMs>
 8001862:	4603      	mov	r3, r0
 8001864:	61a3      	str	r3, [r4, #24]
	if(CAN_RxCallback != NULL) CAN_RxCallback(_can_info.pFrames[index]);
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <CAN_ReceiveCallback+0x74>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00a      	beq.n	8001884 <CAN_ReceiveCallback+0x68>
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <CAN_ReceiveCallback+0x74>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	4905      	ldr	r1, [pc, #20]	; (800188c <CAN_ReceiveCallback+0x70>)
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	4790      	blx	r2
 8001880:	e000      	b.n	8001884 <CAN_ReceiveCallback+0x68>
	if(index==255) return;
 8001882:	bf00      	nop
}
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bd90      	pop	{r4, r7, pc}
 800188a:	bf00      	nop
 800188c:	200003ec 	.word	0x200003ec
 8001890:	20000250 	.word	0x20000250

08001894 <CAN_TxCompleteCallback>:

void CAN_TxCompleteCallback(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0

	uint8_t* pFrame;


	pFrame = CAN_FIFO_Get(&FIFO_CAN_TX);
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <CAN_TxCompleteCallback+0x24>)
 800189c:	f7ff fef8 	bl	8001690 <CAN_FIFO_Get>
 80018a0:	6078      	str	r0, [r7, #4]
	if(!pFrame) return;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <CAN_TxCompleteCallback+0x1c>
	CAN_SendFrame((struct can_frame*)pFrame);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ffa1 	bl	80017f0 <CAN_SendFrame>
 80018ae:	e000      	b.n	80018b2 <CAN_TxCompleteCallback+0x1e>
	if(!pFrame) return;
 80018b0:	bf00      	nop
}
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000254 	.word	0x20000254

080018bc <CAN_HW_Init>:
#include "CAN_LIB_HW.h"

uint8_t retransmision_counter;

void CAN_HW_Init(){
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0

	static CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <CAN_HW_Init+0x7c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <CAN_HW_Init+0x7c>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <CAN_HW_Init+0x7c>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <CAN_HW_Init+0x7c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <CAN_HW_Init+0x7c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80018de:	4b16      	ldr	r3, [pc, #88]	; (8001938 <CAN_HW_Init+0x7c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <CAN_HW_Init+0x7c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <CAN_HW_Init+0x7c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <CAN_HW_Init+0x7c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <CAN_HW_Init+0x7c>)
 80018f8:	220e      	movs	r2, #14
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&CAN_HANDLE, &sFilterConfig) != HAL_OK)
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <CAN_HW_Init+0x7c>)
 80018fe:	480f      	ldr	r0, [pc, #60]	; (800193c <CAN_HW_Init+0x80>)
 8001900:	f001 fe13 	bl	800352a <HAL_CAN_ConfigFilter>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <CAN_HW_Init+0x52>
	{
		/* Filter configuration Error */
		Error_Handler();
 800190a:	f7ff fcdf 	bl	80012cc <Error_Handler>
	}

	if (HAL_CAN_Start(&CAN_HANDLE) != HAL_OK)
 800190e:	480b      	ldr	r0, [pc, #44]	; (800193c <CAN_HW_Init+0x80>)
 8001910:	f001 fed5 	bl	80036be <HAL_CAN_Start>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <CAN_HW_Init+0x62>
	{
		/* Start Error */
		Error_Handler();
 800191a:	f7ff fcd7 	bl	80012cc <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&CAN_HANDLE, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN
 800191e:	f248 010f 	movw	r1, #32783	; 0x800f
 8001922:	4806      	ldr	r0, [pc, #24]	; (800193c <CAN_HW_Init+0x80>)
 8001924:	f002 f831 	bl	800398a <HAL_CAN_ActivateNotification>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <CAN_HW_Init+0x76>
			| CAN_IT_RX_FIFO0_FULL | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 800192e:	f7ff fccd 	bl	80012cc <Error_Handler>
	}

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000448 	.word	0x20000448
 800193c:	200001a8 	.word	0x200001a8

08001940 <CAN_HW_GetTickMs>:

inline uint32_t CAN_HW_GetTickMs(){
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001944:	f000 f93a 	bl	8001bbc <HAL_GetTick>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <CAN_HW_SendFrame>:

uint8_t CAN_HW_SendFrame(struct can_frame* pFrame){
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

	/* Check if mailbox is free */
    if ((CAN_HANDLE.Instance->TSR & CAN_TSR_TME0) == 0U) return 0;
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <CAN_HW_SendFrame+0xc0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <CAN_HW_SendFrame+0x1a>
 8001966:	2300      	movs	r3, #0
 8001968:	e04b      	b.n	8001a02 <CAN_HW_SendFrame+0xb2>

    /* Set up the Id */
    if(pFrame->core.isExtId){
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <CAN_HW_SendFrame+0x36>
    	CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_EXID_Pos) | CAN_ID_EXT | CAN_RTR_DATA);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	00da      	lsls	r2, r3, #3
 8001978:	4b25      	ldr	r3, [pc, #148]	; (8001a10 <CAN_HW_SendFrame+0xc0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0204 	orr.w	r2, r2, #4
 8001980:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001984:	e006      	b.n	8001994 <CAN_HW_SendFrame+0x44>
    }
    else{
        CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_STID_Pos) | CAN_RTR_DATA);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <CAN_HW_SendFrame+0xc0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0552      	lsls	r2, r2, #21
 8001990:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    }

    /* Set up the DLC */
    CAN_HANDLE.Instance->sTxMailBox[0].TDTR = pFrame->core.dlc;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <CAN_HW_SendFrame+0xc0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6892      	ldr	r2, [r2, #8]
 800199c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    /* Set up the data field */
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDHR,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7cdb      	ldrb	r3, [r3, #19]
 80019a4:	061a      	lsls	r2, r3, #24
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7c9b      	ldrb	r3, [r3, #18]
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7c5b      	ldrb	r3, [r3, #17]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7c1b      	ldrb	r3, [r3, #16]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <CAN_HW_SendFrame+0xc0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
              ((uint32_t)pFrame->core.data[7] << CAN_TDH0R_DATA7_Pos) |
              ((uint32_t)pFrame->core.data[6] << CAN_TDH0R_DATA6_Pos) |
              ((uint32_t)pFrame->core.data[5] << CAN_TDH0R_DATA5_Pos) |
              ((uint32_t)pFrame->core.data[4] << CAN_TDH0R_DATA4_Pos));
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDLR,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7bdb      	ldrb	r3, [r3, #15]
 80019ca:	061a      	lsls	r2, r3, #24
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7b9b      	ldrb	r3, [r3, #14]
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7b5b      	ldrb	r3, [r3, #13]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7b1b      	ldrb	r3, [r3, #12]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <CAN_HW_SendFrame+0xc0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
              ((uint32_t)pFrame->core.data[2] << CAN_TDL0R_DATA2_Pos) |
              ((uint32_t)pFrame->core.data[1] << CAN_TDL0R_DATA1_Pos) |
              ((uint32_t)pFrame->core.data[0] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(CAN_HANDLE.Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <CAN_HW_SendFrame+0xc0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <CAN_HW_SendFrame+0xc0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f042 0201 	orr.w	r2, r2, #1
 80019fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    return 1;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	200001a8 	.word	0x200001a8

08001a14 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 8001a1c:	f7ff ff3a 	bl	8001894 <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000444 	.word	0x20000444

08001a34 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 8001a3c:	f7ff ff2a 	bl	8001894 <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_CAN_TxMailbox0AbortCallback+0x1c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000444 	.word	0x20000444

08001a54 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

	static struct can_msg msg;
	static CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data);
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001a60:	2100      	movs	r1, #0
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f001 fe6f 	bl	8003746 <HAL_CAN_GetRxMessage>
	msg.dlc = RxHeader.DLC;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001a6e:	6093      	str	r3, [r2, #8]
	msg.id = RxHeader.StdId;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001a76:	6053      	str	r3, [r2, #4]
	CAN_ReceiveCallback(&msg);
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001a7a:	f7ff fecf 	bl	800181c <CAN_ReceiveCallback>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000498 	.word	0x20000498
 8001a8c:	20000470 	.word	0x20000470
 8001a90:	2000048c 	.word	0x2000048c

08001a94 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

	static uint32_t errorcode;
	errorcode = HAL_CAN_GetError(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f002 f997 	bl	8003de4 <HAL_CAN_GetError>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_CAN_ErrorCallback+0x58>)
 8001aba:	6013      	str	r3, [r2, #0]
	HAL_CAN_ResetError(hcan);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f002 f99d 	bl	8003dfc <HAL_CAN_ResetError>

	/* arbitration lost, retransmit */
	if(errorcode & HAL_CAN_ERROR_TX_ALST0){
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_CAN_ErrorCallback+0x58>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d013      	beq.n	8001af6 <HAL_CAN_ErrorCallback+0x4e>

		if(retransmision_counter < CAN_ARB_LOST_RETR){
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_CAN_ErrorCallback+0x5c>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b13      	cmp	r3, #19
 8001ad4:	d80f      	bhi.n	8001af6 <HAL_CAN_ErrorCallback+0x4e>
		    SET_BIT(CAN_HANDLE->Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			retransmision_counter++;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_CAN_ErrorCallback+0x5c>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_CAN_ErrorCallback+0x5c>)
 8001af4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200004a0 	.word	0x200004a0
 8001b04:	20000444 	.word	0x20000444

08001b08 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_Init+0x28>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a07      	ldr	r2, [pc, #28]	; (8001b30 <HAL_Init+0x28>)
 8001b12:	f043 0310 	orr.w	r3, r3, #16
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b18:	2003      	movs	r0, #3
 8001b1a:	f002 fa63 	bl	8003fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b1e:	200f      	movs	r0, #15
 8001b20:	f000 f808 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b24:	f7ff fc2a 	bl	800137c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40022000 	.word	0x40022000

08001b34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_InitTick+0x54>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x58>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 fa7b 	bl	800404e <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f002 fa43 	bl	8003ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_InitTick+0x5c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_IncTick+0x20>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_IncTick+0x24>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	200004a4 	.word	0x200004a4

08001bbc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_GetTick+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	200004a4 	.word	0x200004a4

08001bd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b09a      	sub	sp, #104	; 0x68
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e1c9      	b.n	8001fd8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d176      	bne.n	8001d44 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d152      	bne.n	8001d04 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff f929 	bl	8000ed0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d13b      	bne.n	8001d04 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f001 faeb 	bl	8003268 <ADC_Disable>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d12f      	bne.n	8001d04 <HAL_ADC_Init+0xe0>
 8001ca4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d12b      	bne.n	8001d04 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cb4:	f023 0302 	bic.w	r3, r3, #2
 8001cb8:	f043 0202 	orr.w	r2, r3, #2
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cce:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cde:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce0:	4b86      	ldr	r3, [pc, #536]	; (8001efc <HAL_ADC_Init+0x2d8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a86      	ldr	r2, [pc, #536]	; (8001f00 <HAL_ADC_Init+0x2dc>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9a      	lsrs	r2, r3, #18
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cf6:	e002      	b.n	8001cfe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f9      	bne.n	8001cf8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d20:	d110      	bne.n	8001d44 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f023 0312 	bic.w	r3, r3, #18
 8001d2a:	f043 0210 	orr.w	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f043 0201 	orr.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f040 8136 	bne.w	8001fbe <HAL_ADC_Init+0x39a>
 8001d52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 8131 	bne.w	8001fbe <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 8129 	bne.w	8001fbe <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d74:	f043 0202 	orr.w	r2, r3, #2
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d84:	d004      	beq.n	8001d90 <HAL_ADC_Init+0x16c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a5e      	ldr	r2, [pc, #376]	; (8001f04 <HAL_ADC_Init+0x2e0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <HAL_ADC_Init+0x170>
 8001d90:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <HAL_ADC_Init+0x2e4>)
 8001d92:	e000      	b.n	8001d96 <HAL_ADC_Init+0x172>
 8001d94:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_ADC_Init+0x2e8>)
 8001d96:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da0:	d102      	bne.n	8001da8 <HAL_ADC_Init+0x184>
 8001da2:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <HAL_ADC_Init+0x2e0>)
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	e01a      	b.n	8001dde <HAL_ADC_Init+0x1ba>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a55      	ldr	r2, [pc, #340]	; (8001f04 <HAL_ADC_Init+0x2e0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d103      	bne.n	8001dba <HAL_ADC_Init+0x196>
 8001db2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e011      	b.n	8001dde <HAL_ADC_Init+0x1ba>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a54      	ldr	r2, [pc, #336]	; (8001f10 <HAL_ADC_Init+0x2ec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d102      	bne.n	8001dca <HAL_ADC_Init+0x1a6>
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_ADC_Init+0x2f0>)
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e009      	b.n	8001dde <HAL_ADC_Init+0x1ba>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <HAL_ADC_Init+0x2f0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d102      	bne.n	8001dda <HAL_ADC_Init+0x1b6>
 8001dd4:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <HAL_ADC_Init+0x2ec>)
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e001      	b.n	8001dde <HAL_ADC_Init+0x1ba>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d108      	bne.n	8001dfe <HAL_ADC_Init+0x1da>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_Init+0x1da>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_ADC_Init+0x1dc>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d11c      	bne.n	8001e3e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d107      	bne.n	8001e26 <HAL_ADC_Init+0x202>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_Init+0x202>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <HAL_ADC_Init+0x204>
 8001e26:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d108      	bne.n	8001e3e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7e5b      	ldrb	r3, [r3, #25]
 8001e42:	035b      	lsls	r3, r3, #13
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e48:	2a01      	cmp	r2, #1
 8001e4a:	d002      	beq.n	8001e52 <HAL_ADC_Init+0x22e>
 8001e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e50:	e000      	b.n	8001e54 <HAL_ADC_Init+0x230>
 8001e52:	2200      	movs	r2, #0
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e64:	4313      	orrs	r3, r2
 8001e66:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d11b      	bne.n	8001eaa <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7e5b      	ldrb	r3, [r3, #25]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	045a      	lsls	r2, r3, #17
 8001e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8001e8c:	e00d      	b.n	8001eaa <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e96:	f043 0220 	orr.w	r2, r3, #32
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d03a      	beq.n	8001f28 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_ADC_Init+0x2ec>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_ADC_Init+0x2a2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_ADC_Init+0x2f0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d128      	bne.n	8001f18 <HAL_ADC_Init+0x2f4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001ece:	d012      	beq.n	8001ef6 <HAL_ADC_Init+0x2d2>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_ADC_Init+0x2cc>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001ee2:	d002      	beq.n	8001eea <HAL_ADC_Init+0x2c6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	e018      	b.n	8001f1c <HAL_ADC_Init+0x2f8>
 8001eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eee:	e015      	b.n	8001f1c <HAL_ADC_Init+0x2f8>
 8001ef0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ef4:	e012      	b.n	8001f1c <HAL_ADC_Init+0x2f8>
 8001ef6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001efa:	e00f      	b.n	8001f1c <HAL_ADC_Init+0x2f8>
 8001efc:	20000000 	.word	0x20000000
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	50000100 	.word	0x50000100
 8001f08:	50000300 	.word	0x50000300
 8001f0c:	50000700 	.word	0x50000700
 8001f10:	50000400 	.word	0x50000400
 8001f14:	50000500 	.word	0x50000500
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f20:	4313      	orrs	r3, r2
 8001f22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f24:	4313      	orrs	r3, r2
 8001f26:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d114      	bne.n	8001f60 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f44:	f023 0302 	bic.w	r3, r3, #2
 8001f48:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7e1b      	ldrb	r3, [r3, #24]
 8001f4e:	039a      	lsls	r2, r3, #14
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_ADC_Init+0x3bc>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f70:	430b      	orrs	r3, r1
 8001f72:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d10c      	bne.n	8001f96 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f023 010f 	bic.w	r1, r3, #15
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
 8001f94:	e007      	b.n	8001fa6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 020f 	bic.w	r2, r2, #15
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f023 0303 	bic.w	r3, r3, #3
 8001fb4:	f043 0201 	orr.w	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
 8001fbc:	e00a      	b.n	8001fd4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f023 0312 	bic.w	r3, r3, #18
 8001fc6:	f043 0210 	orr.w	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001fd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3768      	adds	r7, #104	; 0x68
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	fff0c007 	.word	0xfff0c007

08001fe4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 80f7 	bne.w	80021f2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_ADC_Start_DMA+0x2e>
 800200e:	2302      	movs	r3, #2
 8002010:	e0f2      	b.n	80021f8 <HAL_ADC_Start_DMA+0x214>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002022:	d004      	beq.n	800202e <HAL_ADC_Start_DMA+0x4a>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a75      	ldr	r2, [pc, #468]	; (8002200 <HAL_ADC_Start_DMA+0x21c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d109      	bne.n	8002042 <HAL_ADC_Start_DMA+0x5e>
 800202e:	4b75      	ldr	r3, [pc, #468]	; (8002204 <HAL_ADC_Start_DMA+0x220>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	2b00      	cmp	r3, #0
 8002038:	bf0c      	ite	eq
 800203a:	2301      	moveq	r3, #1
 800203c:	2300      	movne	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	e008      	b.n	8002054 <HAL_ADC_Start_DMA+0x70>
 8002042:	4b71      	ldr	r3, [pc, #452]	; (8002208 <HAL_ADC_Start_DMA+0x224>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf0c      	ite	eq
 800204e:	2301      	moveq	r3, #1
 8002050:	2300      	movne	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80c5 	beq.w	80021e4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f001 f8a0 	bl	80031a0 <ADC_Enable>
 8002060:	4603      	mov	r3, r0
 8002062:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 80b7 	bne.w	80021da <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002070:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002088:	d004      	beq.n	8002094 <HAL_ADC_Start_DMA+0xb0>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5c      	ldr	r2, [pc, #368]	; (8002200 <HAL_ADC_Start_DMA+0x21c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d106      	bne.n	80020a2 <HAL_ADC_Start_DMA+0xbe>
 8002094:	4b5b      	ldr	r3, [pc, #364]	; (8002204 <HAL_ADC_Start_DMA+0x220>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2b00      	cmp	r3, #0
 800209e:	d010      	beq.n	80020c2 <HAL_ADC_Start_DMA+0xde>
 80020a0:	e005      	b.n	80020ae <HAL_ADC_Start_DMA+0xca>
 80020a2:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_ADC_Start_DMA+0x224>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_ADC_Start_DMA+0xde>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b6:	d004      	beq.n	80020c2 <HAL_ADC_Start_DMA+0xde>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a53      	ldr	r2, [pc, #332]	; (800220c <HAL_ADC_Start_DMA+0x228>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d115      	bne.n	80020ee <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d036      	beq.n	800214a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80020ec:	e02d      	b.n	800214a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002102:	d004      	beq.n	800210e <HAL_ADC_Start_DMA+0x12a>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <HAL_ADC_Start_DMA+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10a      	bne.n	8002124 <HAL_ADC_Start_DMA+0x140>
 800210e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	e008      	b.n	8002136 <HAL_ADC_Start_DMA+0x152>
 8002124:	4b39      	ldr	r3, [pc, #228]	; (800220c <HAL_ADC_Start_DMA+0x228>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf14      	ite	ne
 8002130:	2301      	movne	r3, #1
 8002132:	2300      	moveq	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002142:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002156:	d106      	bne.n	8002166 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f023 0206 	bic.w	r2, r3, #6
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
 8002164:	e002      	b.n	800216c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	4a25      	ldr	r2, [pc, #148]	; (8002210 <HAL_ADC_Start_DMA+0x22c>)
 800217a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	4a24      	ldr	r2, [pc, #144]	; (8002214 <HAL_ADC_Start_DMA+0x230>)
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002188:	4a23      	ldr	r2, [pc, #140]	; (8002218 <HAL_ADC_Start_DMA+0x234>)
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	221c      	movs	r2, #28
 8002192:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0210 	orr.w	r2, r2, #16
 80021a2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3340      	adds	r3, #64	; 0x40
 80021be:	4619      	mov	r1, r3
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f001 ff96 	bl	80040f4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0204 	orr.w	r2, r2, #4
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e00d      	b.n	80021f6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021e2:	e008      	b.n	80021f6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80021f0:	e001      	b.n	80021f6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
 80021f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	50000100 	.word	0x50000100
 8002204:	50000300 	.word	0x50000300
 8002208:	50000700 	.word	0x50000700
 800220c:	50000400 	.word	0x50000400
 8002210:	080030d5 	.word	0x080030d5
 8002214:	0800314f 	.word	0x0800314f
 8002218:	0800316b 	.word	0x0800316b

0800221c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_ADC_IRQHandler+0x38>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 80bc 	beq.w	80023d8 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 80b6 	beq.w	80023d8 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800228c:	d004      	beq.n	8002298 <HAL_ADC_IRQHandler+0x7c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a90      	ldr	r2, [pc, #576]	; (80024d4 <HAL_ADC_IRQHandler+0x2b8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d106      	bne.n	80022a6 <HAL_ADC_IRQHandler+0x8a>
 8002298:	4b8f      	ldr	r3, [pc, #572]	; (80024d8 <HAL_ADC_IRQHandler+0x2bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d03e      	beq.n	8002322 <HAL_ADC_IRQHandler+0x106>
 80022a4:	e005      	b.n	80022b2 <HAL_ADC_IRQHandler+0x96>
 80022a6:	4b8d      	ldr	r3, [pc, #564]	; (80024dc <HAL_ADC_IRQHandler+0x2c0>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d037      	beq.n	8002322 <HAL_ADC_IRQHandler+0x106>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ba:	d004      	beq.n	80022c6 <HAL_ADC_IRQHandler+0xaa>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a84      	ldr	r2, [pc, #528]	; (80024d4 <HAL_ADC_IRQHandler+0x2b8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d106      	bne.n	80022d4 <HAL_ADC_IRQHandler+0xb8>
 80022c6:	4b84      	ldr	r3, [pc, #528]	; (80024d8 <HAL_ADC_IRQHandler+0x2bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d027      	beq.n	8002322 <HAL_ADC_IRQHandler+0x106>
 80022d2:	e005      	b.n	80022e0 <HAL_ADC_IRQHandler+0xc4>
 80022d4:	4b81      	ldr	r3, [pc, #516]	; (80024dc <HAL_ADC_IRQHandler+0x2c0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d020      	beq.n	8002322 <HAL_ADC_IRQHandler+0x106>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e8:	d004      	beq.n	80022f4 <HAL_ADC_IRQHandler+0xd8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a79      	ldr	r2, [pc, #484]	; (80024d4 <HAL_ADC_IRQHandler+0x2b8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d106      	bne.n	8002302 <HAL_ADC_IRQHandler+0xe6>
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_ADC_IRQHandler+0x2bc>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	2b09      	cmp	r3, #9
 80022fe:	d010      	beq.n	8002322 <HAL_ADC_IRQHandler+0x106>
 8002300:	e005      	b.n	800230e <HAL_ADC_IRQHandler+0xf2>
 8002302:	4b76      	ldr	r3, [pc, #472]	; (80024dc <HAL_ADC_IRQHandler+0x2c0>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2b09      	cmp	r3, #9
 800230c:	d009      	beq.n	8002322 <HAL_ADC_IRQHandler+0x106>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002316:	d004      	beq.n	8002322 <HAL_ADC_IRQHandler+0x106>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a70      	ldr	r2, [pc, #448]	; (80024e0 <HAL_ADC_IRQHandler+0x2c4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d104      	bne.n	800232c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	e00f      	b.n	800234c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002334:	d004      	beq.n	8002340 <HAL_ADC_IRQHandler+0x124>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a66      	ldr	r2, [pc, #408]	; (80024d4 <HAL_ADC_IRQHandler+0x2b8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d102      	bne.n	8002346 <HAL_ADC_IRQHandler+0x12a>
 8002340:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002344:	e000      	b.n	8002348 <HAL_ADC_IRQHandler+0x12c>
 8002346:	4b66      	ldr	r3, [pc, #408]	; (80024e0 <HAL_ADC_IRQHandler+0x2c4>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002356:	2b00      	cmp	r3, #0
 8002358:	d137      	bne.n	80023ca <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002360:	2b00      	cmp	r3, #0
 8002362:	d132      	bne.n	80023ca <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d02d      	beq.n	80023ca <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d11a      	bne.n	80023b2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 020c 	bic.w	r2, r2, #12
 800238a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d112      	bne.n	80023ca <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f043 0201 	orr.w	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
 80023b0:	e00b      	b.n	80023ca <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f043 0210 	orr.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fc02 	bl	8001bd4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	220c      	movs	r2, #12
 80023d6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <HAL_ADC_IRQHandler+0x1d0>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10b      	bne.n	8002404 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8138 	beq.w	8002668 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8132 	beq.w	8002668 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002418:	d004      	beq.n	8002424 <HAL_ADC_IRQHandler+0x208>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_ADC_IRQHandler+0x2b8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d106      	bne.n	8002432 <HAL_ADC_IRQHandler+0x216>
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <HAL_ADC_IRQHandler+0x2bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2b00      	cmp	r3, #0
 800242e:	d03e      	beq.n	80024ae <HAL_ADC_IRQHandler+0x292>
 8002430:	e005      	b.n	800243e <HAL_ADC_IRQHandler+0x222>
 8002432:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_ADC_IRQHandler+0x2c0>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2b00      	cmp	r3, #0
 800243c:	d037      	beq.n	80024ae <HAL_ADC_IRQHandler+0x292>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002446:	d004      	beq.n	8002452 <HAL_ADC_IRQHandler+0x236>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <HAL_ADC_IRQHandler+0x2b8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d106      	bne.n	8002460 <HAL_ADC_IRQHandler+0x244>
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_ADC_IRQHandler+0x2bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2b05      	cmp	r3, #5
 800245c:	d027      	beq.n	80024ae <HAL_ADC_IRQHandler+0x292>
 800245e:	e005      	b.n	800246c <HAL_ADC_IRQHandler+0x250>
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_ADC_IRQHandler+0x2c0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2b05      	cmp	r3, #5
 800246a:	d020      	beq.n	80024ae <HAL_ADC_IRQHandler+0x292>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002474:	d004      	beq.n	8002480 <HAL_ADC_IRQHandler+0x264>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <HAL_ADC_IRQHandler+0x2b8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d106      	bne.n	800248e <HAL_ADC_IRQHandler+0x272>
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_ADC_IRQHandler+0x2bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	2b09      	cmp	r3, #9
 800248a:	d010      	beq.n	80024ae <HAL_ADC_IRQHandler+0x292>
 800248c:	e005      	b.n	800249a <HAL_ADC_IRQHandler+0x27e>
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <HAL_ADC_IRQHandler+0x2c0>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2b09      	cmp	r3, #9
 8002498:	d009      	beq.n	80024ae <HAL_ADC_IRQHandler+0x292>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a2:	d004      	beq.n	80024ae <HAL_ADC_IRQHandler+0x292>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0d      	ldr	r2, [pc, #52]	; (80024e0 <HAL_ADC_IRQHandler+0x2c4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d104      	bne.n	80024b8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	e018      	b.n	80024ea <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c0:	d004      	beq.n	80024cc <HAL_ADC_IRQHandler+0x2b0>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <HAL_ADC_IRQHandler+0x2b8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d10b      	bne.n	80024e4 <HAL_ADC_IRQHandler+0x2c8>
 80024cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024d0:	e009      	b.n	80024e6 <HAL_ADC_IRQHandler+0x2ca>
 80024d2:	bf00      	nop
 80024d4:	50000100 	.word	0x50000100
 80024d8:	50000300 	.word	0x50000300
 80024dc:	50000700 	.word	0x50000700
 80024e0:	50000400 	.word	0x50000400
 80024e4:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_ADC_IRQHandler+0x514>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 80b0 	bne.w	800265a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 80a3 	bne.w	800265a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 809d 	bne.w	800265a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8097 	beq.w	800265a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002534:	d004      	beq.n	8002540 <HAL_ADC_IRQHandler+0x324>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7e      	ldr	r2, [pc, #504]	; (8002734 <HAL_ADC_IRQHandler+0x518>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d106      	bne.n	800254e <HAL_ADC_IRQHandler+0x332>
 8002540:	4b7d      	ldr	r3, [pc, #500]	; (8002738 <HAL_ADC_IRQHandler+0x51c>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03e      	beq.n	80025ca <HAL_ADC_IRQHandler+0x3ae>
 800254c:	e005      	b.n	800255a <HAL_ADC_IRQHandler+0x33e>
 800254e:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_ADC_IRQHandler+0x520>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2b00      	cmp	r3, #0
 8002558:	d037      	beq.n	80025ca <HAL_ADC_IRQHandler+0x3ae>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002562:	d004      	beq.n	800256e <HAL_ADC_IRQHandler+0x352>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a72      	ldr	r2, [pc, #456]	; (8002734 <HAL_ADC_IRQHandler+0x518>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d106      	bne.n	800257c <HAL_ADC_IRQHandler+0x360>
 800256e:	4b72      	ldr	r3, [pc, #456]	; (8002738 <HAL_ADC_IRQHandler+0x51c>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2b06      	cmp	r3, #6
 8002578:	d027      	beq.n	80025ca <HAL_ADC_IRQHandler+0x3ae>
 800257a:	e005      	b.n	8002588 <HAL_ADC_IRQHandler+0x36c>
 800257c:	4b6f      	ldr	r3, [pc, #444]	; (800273c <HAL_ADC_IRQHandler+0x520>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	2b06      	cmp	r3, #6
 8002586:	d020      	beq.n	80025ca <HAL_ADC_IRQHandler+0x3ae>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002590:	d004      	beq.n	800259c <HAL_ADC_IRQHandler+0x380>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a67      	ldr	r2, [pc, #412]	; (8002734 <HAL_ADC_IRQHandler+0x518>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d106      	bne.n	80025aa <HAL_ADC_IRQHandler+0x38e>
 800259c:	4b66      	ldr	r3, [pc, #408]	; (8002738 <HAL_ADC_IRQHandler+0x51c>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2b07      	cmp	r3, #7
 80025a6:	d010      	beq.n	80025ca <HAL_ADC_IRQHandler+0x3ae>
 80025a8:	e005      	b.n	80025b6 <HAL_ADC_IRQHandler+0x39a>
 80025aa:	4b64      	ldr	r3, [pc, #400]	; (800273c <HAL_ADC_IRQHandler+0x520>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2b07      	cmp	r3, #7
 80025b4:	d009      	beq.n	80025ca <HAL_ADC_IRQHandler+0x3ae>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025be:	d004      	beq.n	80025ca <HAL_ADC_IRQHandler+0x3ae>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a5a      	ldr	r2, [pc, #360]	; (8002730 <HAL_ADC_IRQHandler+0x514>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d104      	bne.n	80025d4 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	e00f      	b.n	80025f4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025dc:	d004      	beq.n	80025e8 <HAL_ADC_IRQHandler+0x3cc>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a54      	ldr	r2, [pc, #336]	; (8002734 <HAL_ADC_IRQHandler+0x518>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d102      	bne.n	80025ee <HAL_ADC_IRQHandler+0x3d2>
 80025e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025ec:	e000      	b.n	80025f0 <HAL_ADC_IRQHandler+0x3d4>
 80025ee:	4b50      	ldr	r3, [pc, #320]	; (8002730 <HAL_ADC_IRQHandler+0x514>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d12d      	bne.n	800265a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d11a      	bne.n	8002642 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800261a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d112      	bne.n	800265a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
 8002640:	e00b      	b.n	800265a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f936 	bl	80028cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2260      	movs	r2, #96	; 0x60
 8002666:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266e:	2b00      	cmp	r3, #0
 8002670:	d011      	beq.n	8002696 <HAL_ADC_IRQHandler+0x47a>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00c      	beq.n	8002696 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fab7 	bl	8001bfc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_ADC_IRQHandler+0x4aa>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f91c 	bl	80028f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026c4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d012      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x4da>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f90e 	bl	8002908 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d04f      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x584>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d04a      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e02d      	b.n	8002774 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002720:	d004      	beq.n	800272c <HAL_ADC_IRQHandler+0x510>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a03      	ldr	r2, [pc, #12]	; (8002734 <HAL_ADC_IRQHandler+0x518>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d109      	bne.n	8002740 <HAL_ADC_IRQHandler+0x524>
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <HAL_ADC_IRQHandler+0x51c>)
 800272e:	e008      	b.n	8002742 <HAL_ADC_IRQHandler+0x526>
 8002730:	50000400 	.word	0x50000400
 8002734:	50000100 	.word	0x50000100
 8002738:	50000300 	.word	0x50000300
 800273c:	50000700 	.word	0x50000700
 8002740:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_ADC_IRQHandler+0x5c8>)
 8002742:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10a      	bne.n	8002774 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800275e:	2301      	movs	r3, #1
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e007      	b.n	8002774 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002770:	2301      	movs	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d10e      	bne.n	8002798 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f043 0202 	orr.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fa3c 	bl	8001c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d018      	beq.n	80027dc <HAL_ADC_IRQHandler+0x5c0>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f043 0208 	orr.w	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f882 	bl	80028e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80027dc:	bf00      	nop
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	50000700 	.word	0x50000700

080027e8 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_ADCEx_Calibration_Start+0x1c>
 8002800:	2302      	movs	r3, #2
 8002802:	e05f      	b.n	80028c4 <HAL_ADCEx_Calibration_Start+0xdc>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fd2b 	bl	8003268 <ADC_Disable>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d14e      	bne.n	80028ba <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002830:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d107      	bne.n	8002848 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002846:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002856:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002858:	f7ff f9b0 	bl	8001bbc <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800285e:	e01c      	b.n	800289a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002860:	f7ff f9ac 	bl	8001bbc <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b0a      	cmp	r3, #10
 800286c:	d915      	bls.n	800289a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800287c:	d10d      	bne.n	800289a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f023 0312 	bic.w	r3, r3, #18
 8002886:	f043 0210 	orr.w	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e014      	b.n	80028c4 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028a8:	d0da      	beq.n	8002860 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f023 0303 	bic.w	r3, r3, #3
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800291c:	b480      	push	{r7}
 800291e:	b09b      	sub	sp, #108	; 0x6c
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x22>
 800293a:	2302      	movs	r3, #2
 800293c:	e2c8      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x5b4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 82ac 	bne.w	8002eae <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b04      	cmp	r3, #4
 800295c:	d81c      	bhi.n	8002998 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	461a      	mov	r2, r3
 8002972:	231f      	movs	r3, #31
 8002974:	4093      	lsls	r3, r2
 8002976:	43db      	mvns	r3, r3
 8002978:	4019      	ands	r1, r3
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	4413      	add	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa00 f203 	lsl.w	r2, r0, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
 8002996:	e063      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b09      	cmp	r3, #9
 800299e:	d81e      	bhi.n	80029de <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	3b1e      	subs	r3, #30
 80029b4:	221f      	movs	r2, #31
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	4019      	ands	r1, r3
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	3b1e      	subs	r3, #30
 80029d0:	fa00 f203 	lsl.w	r2, r0, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	635a      	str	r2, [r3, #52]	; 0x34
 80029dc:	e040      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b0e      	cmp	r3, #14
 80029e4:	d81e      	bhi.n	8002a24 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	3b3c      	subs	r3, #60	; 0x3c
 80029fa:	221f      	movs	r2, #31
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4019      	ands	r1, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	3b3c      	subs	r3, #60	; 0x3c
 8002a16:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	639a      	str	r2, [r3, #56]	; 0x38
 8002a22:	e01d      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	3b5a      	subs	r3, #90	; 0x5a
 8002a38:	221f      	movs	r2, #31
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	4019      	ands	r1, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	3b5a      	subs	r3, #90	; 0x5a
 8002a54:	fa00 f203 	lsl.w	r2, r0, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 80e5 	bne.w	8002c3a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d91c      	bls.n	8002ab2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6999      	ldr	r1, [r3, #24]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	3b1e      	subs	r3, #30
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	4019      	ands	r1, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6898      	ldr	r0, [r3, #8]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b1e      	subs	r3, #30
 8002aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	619a      	str	r2, [r3, #24]
 8002ab0:	e019      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6959      	ldr	r1, [r3, #20]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	4019      	ands	r1, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6898      	ldr	r0, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	fa00 f203 	lsl.w	r2, r0, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d84f      	bhi.n	8002ba8 <HAL_ADC_ConfigChannel+0x28c>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <HAL_ADC_ConfigChannel+0x1f4>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b21 	.word	0x08002b21
 8002b14:	08002b43 	.word	0x08002b43
 8002b18:	08002b65 	.word	0x08002b65
 8002b1c:	08002b87 	.word	0x08002b87
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b26:	4b99      	ldr	r3, [pc, #612]	; (8002d8c <HAL_ADC_ConfigChannel+0x470>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	0691      	lsls	r1, r2, #26
 8002b30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b32:	430a      	orrs	r2, r1
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b3e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b40:	e07b      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b48:	4b90      	ldr	r3, [pc, #576]	; (8002d8c <HAL_ADC_ConfigChannel+0x470>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	0691      	lsls	r1, r2, #26
 8002b52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b54:	430a      	orrs	r2, r1
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b60:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b62:	e06a      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b6a:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <HAL_ADC_ConfigChannel+0x470>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	0691      	lsls	r1, r2, #26
 8002b74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b76:	430a      	orrs	r2, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b82:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002b84:	e059      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b8c:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <HAL_ADC_ConfigChannel+0x470>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	0691      	lsls	r1, r2, #26
 8002b96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ba4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ba6:	e048      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	069b      	lsls	r3, r3, #26
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d107      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	069b      	lsls	r3, r3, #26
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d107      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	069b      	lsls	r3, r3, #26
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d107      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	069b      	lsls	r3, r3, #26
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c36:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002c38:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d108      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x33e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x33e>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x340>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 8131 	bne.w	8002ec4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d00f      	beq.n	8002c8a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	400a      	ands	r2, r1
 8002c84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002c88:	e049      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d91c      	bls.n	8002ce6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6999      	ldr	r1, [r3, #24]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b1b      	subs	r3, #27
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4019      	ands	r1, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	6898      	ldr	r0, [r3, #8]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b1b      	subs	r3, #27
 8002cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	619a      	str	r2, [r3, #24]
 8002ce4:	e01b      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6959      	ldr	r1, [r3, #20]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	4019      	ands	r1, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6898      	ldr	r0, [r3, #8]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	fa00 f203 	lsl.w	r2, r0, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d26:	d004      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x416>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_ADC_ConfigChannel+0x474>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x41a>
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_ADC_ConfigChannel+0x478>)
 8002d34:	e000      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x41c>
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <HAL_ADC_ConfigChannel+0x47c>)
 8002d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d105      	bne.n	8002d4e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d52:	2b11      	cmp	r3, #17
 8002d54:	d105      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d66:	2b12      	cmp	r3, #18
 8002d68:	f040 80ac 	bne.w	8002ec4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f040 80a5 	bne.w	8002ec4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d82:	d10b      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x480>
 8002d84:	4b02      	ldr	r3, [pc, #8]	; (8002d90 <HAL_ADC_ConfigChannel+0x474>)
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e023      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x4b6>
 8002d8a:	bf00      	nop
 8002d8c:	83fff000 	.word	0x83fff000
 8002d90:	50000100 	.word	0x50000100
 8002d94:	50000300 	.word	0x50000300
 8002d98:	50000700 	.word	0x50000700
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a4e      	ldr	r2, [pc, #312]	; (8002edc <HAL_ADC_ConfigChannel+0x5c0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d103      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x492>
 8002da6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e011      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x4b6>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d102      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x4a2>
 8002db8:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e009      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x4b6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a48      	ldr	r2, [pc, #288]	; (8002ee4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d102      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x4b2>
 8002dc8:	4b45      	ldr	r3, [pc, #276]	; (8002ee0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e001      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x4b6>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d108      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x4d6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x4d6>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x4d8>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d150      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x4fe>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x4fe>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x500>
 8002e1a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d13c      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d11d      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x548>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e30:	d118      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2a      	ldr	r2, [pc, #168]	; (8002eec <HAL_ADC_ConfigChannel+0x5d0>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	0c9a      	lsrs	r2, r3, #18
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e54:	e002      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f9      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e62:	e02e      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b11      	cmp	r3, #17
 8002e6a:	d10b      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x568>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e74:	d106      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e80:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e82:	e01e      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b12      	cmp	r3, #18
 8002e8a:	d11a      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e96:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e98:	e013      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002eac:	e00a      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002ec0:	e000      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ec2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ecc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	376c      	adds	r7, #108	; 0x6c
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	50000100 	.word	0x50000100
 8002ee0:	50000400 	.word	0x50000400
 8002ee4:	50000500 	.word	0x50000500
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	431bde83 	.word	0x431bde83

08002ef0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b099      	sub	sp, #100	; 0x64
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f08:	d102      	bne.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	e01a      	b.n	8002f46 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6a      	ldr	r2, [pc, #424]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d103      	bne.n	8002f22 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002f1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	e011      	b.n	8002f46 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a67      	ldr	r2, [pc, #412]	; (80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d102      	bne.n	8002f32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f2c:	4b66      	ldr	r3, [pc, #408]	; (80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	e009      	b.n	8002f46 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a64      	ldr	r2, [pc, #400]	; (80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d102      	bne.n	8002f42 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f3c:	4b61      	ldr	r3, [pc, #388]	; (80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	e001      	b.n	8002f46 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0b0      	b.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e0a9      	b.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 808d 	bne.w	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 8086 	bne.w	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f8c:	d004      	beq.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d101      	bne.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002f9a:	e000      	b.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f9c:	4b4c      	ldr	r3, [pc, #304]	; (80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002f9e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d040      	beq.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fba:	035b      	lsls	r3, r3, #13
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d108      	bne.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e000      	b.n	8002fe6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d15c      	bne.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003006:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	d14b      	bne.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800300c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003014:	f023 030f 	bic.w	r3, r3, #15
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	6811      	ldr	r1, [r2, #0]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	430a      	orrs	r2, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003026:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003028:	e03c      	b.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800302a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003034:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d108      	bne.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d123      	bne.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d107      	bne.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003078:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800307a:	2b00      	cmp	r3, #0
 800307c:	d112      	bne.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800307e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003086:	f023 030f 	bic.w	r3, r3, #15
 800308a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800308c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800308e:	e009      	b.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	f043 0220 	orr.w	r2, r3, #32
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80030a2:	e000      	b.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030a4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80030ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80030b2:	4618      	mov	r0, r3
 80030b4:	3764      	adds	r7, #100	; 0x64
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	50000100 	.word	0x50000100
 80030c4:	50000400 	.word	0x50000400
 80030c8:	50000500 	.word	0x50000500
 80030cc:	50000300 	.word	0x50000300
 80030d0:	50000700 	.word	0x50000700

080030d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d126      	bne.n	800313c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003104:	2b00      	cmp	r3, #0
 8003106:	d115      	bne.n	8003134 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800310c:	2b00      	cmp	r3, #0
 800310e:	d111      	bne.n	8003134 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7fe fd4d 	bl	8001bd4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800313a:	e004      	b.n	8003146 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7fe fd43 	bl	8001be8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7fe fd3d 	bl	8001c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d108      	bne.n	80031cc <ADC_Enable+0x2c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <ADC_Enable+0x2c>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <ADC_Enable+0x2e>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d143      	bne.n	800325a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <ADC_Enable+0xc4>)
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e02f      	b.n	800325c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800320c:	f7fe fcd6 	bl	8001bbc <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003212:	e01b      	b.n	800324c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003214:	f7fe fcd2 	bl	8001bbc <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d914      	bls.n	800324c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d00d      	beq.n	800324c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f043 0210 	orr.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e007      	b.n	800325c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d1dc      	bne.n	8003214 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	8000003f 	.word	0x8000003f

08003268 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d108      	bne.n	8003294 <ADC_Disable+0x2c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <ADC_Disable+0x2c>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <ADC_Disable+0x2e>
 8003294:	2300      	movs	r3, #0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d047      	beq.n	800332a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030d 	and.w	r3, r3, #13
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10f      	bne.n	80032c8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0202 	orr.w	r2, r2, #2
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2203      	movs	r2, #3
 80032be:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80032c0:	f7fe fc7c 	bl	8001bbc <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032c6:	e029      	b.n	800331c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f043 0210 	orr.w	r2, r3, #16
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e023      	b.n	800332c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032e4:	f7fe fc6a 	bl	8001bbc <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d914      	bls.n	800331c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d10d      	bne.n	800331c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f043 0210 	orr.w	r2, r3, #16
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	f043 0201 	orr.w	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e007      	b.n	800332c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d0dc      	beq.n	80032e4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0ed      	b.n	8003522 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fd fe42 	bl	8000fdc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0201 	orr.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003368:	f7fe fc28 	bl	8001bbc <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800336e:	e012      	b.n	8003396 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003370:	f7fe fc24 	bl	8001bbc <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b0a      	cmp	r3, #10
 800337c:	d90b      	bls.n	8003396 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2205      	movs	r2, #5
 800338e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e0c5      	b.n	8003522 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0e5      	beq.n	8003370 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0202 	bic.w	r2, r2, #2
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b4:	f7fe fc02 	bl	8001bbc <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033ba:	e012      	b.n	80033e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033bc:	f7fe fbfe 	bl	8001bbc <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b0a      	cmp	r3, #10
 80033c8:	d90b      	bls.n	80033e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2205      	movs	r2, #5
 80033da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e09f      	b.n	8003522 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7e1b      	ldrb	r3, [r3, #24]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d108      	bne.n	800340a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e007      	b.n	800341a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003418:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	7e5b      	ldrb	r3, [r3, #25]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d108      	bne.n	8003434 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e007      	b.n	8003444 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003442:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7e9b      	ldrb	r3, [r3, #26]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d108      	bne.n	800345e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0220 	orr.w	r2, r2, #32
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	e007      	b.n	800346e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0220 	bic.w	r2, r2, #32
 800346c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7edb      	ldrb	r3, [r3, #27]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d108      	bne.n	8003488 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0210 	bic.w	r2, r2, #16
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e007      	b.n	8003498 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0210 	orr.w	r2, r2, #16
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7f1b      	ldrb	r3, [r3, #28]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d108      	bne.n	80034b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0208 	orr.w	r2, r2, #8
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	e007      	b.n	80034c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0208 	bic.w	r2, r2, #8
 80034c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7f5b      	ldrb	r3, [r3, #29]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d108      	bne.n	80034dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0204 	orr.w	r2, r2, #4
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e007      	b.n	80034ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0204 	bic.w	r2, r2, #4
 80034ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	ea42 0103 	orr.w	r1, r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	1e5a      	subs	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800352a:	b480      	push	{r7}
 800352c:	b087      	sub	sp, #28
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003540:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d003      	beq.n	8003550 <HAL_CAN_ConfigFilter+0x26>
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	2b02      	cmp	r3, #2
 800354c:	f040 80aa 	bne.w	80036a4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003556:	f043 0201 	orr.w	r2, r3, #1
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2201      	movs	r2, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	43db      	mvns	r3, r3
 800357a:	401a      	ands	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d123      	bne.n	80035d2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	43db      	mvns	r3, r3
 8003594:	401a      	ands	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80035ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	3248      	adds	r2, #72	; 0x48
 80035b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80035c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80035c8:	6979      	ldr	r1, [r7, #20]
 80035ca:	3348      	adds	r3, #72	; 0x48
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d122      	bne.n	8003620 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80035fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3248      	adds	r2, #72	; 0x48
 8003600:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003614:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003616:	6979      	ldr	r1, [r7, #20]
 8003618:	3348      	adds	r3, #72	; 0x48
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	43db      	mvns	r3, r3
 8003632:	401a      	ands	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800363a:	e007      	b.n	800364c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	431a      	orrs	r2, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d109      	bne.n	8003668 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	43db      	mvns	r3, r3
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003666:	e007      	b.n	8003678 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	431a      	orrs	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d107      	bne.n	8003690 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	431a      	orrs	r2, r3
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003696:	f023 0201 	bic.w	r2, r3, #1
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e006      	b.n	80036b2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d12e      	bne.n	8003730 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ea:	f7fe fa67 	bl	8001bbc <HAL_GetTick>
 80036ee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80036f0:	e012      	b.n	8003718 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036f2:	f7fe fa63 	bl	8001bbc <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b0a      	cmp	r3, #10
 80036fe:	d90b      	bls.n	8003718 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2205      	movs	r2, #5
 8003710:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e012      	b.n	800373e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e006      	b.n	800373e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
  }
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003746:	b480      	push	{r7}
 8003748:	b087      	sub	sp, #28
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800375a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d003      	beq.n	800376a <HAL_CAN_GetRxMessage+0x24>
 8003762:	7dfb      	ldrb	r3, [r7, #23]
 8003764:	2b02      	cmp	r3, #2
 8003766:	f040 8103 	bne.w	8003970 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10e      	bne.n	800378e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0f7      	b.n	800397e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d107      	bne.n	80037ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0e8      	b.n	800397e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	331b      	adds	r3, #27
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	4413      	add	r3, r2
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0204 	and.w	r2, r3, #4
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	331b      	adds	r3, #27
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	4413      	add	r3, r2
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0d5b      	lsrs	r3, r3, #21
 80037da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e00b      	b.n	80037fc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	331b      	adds	r3, #27
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	4413      	add	r3, r2
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	08db      	lsrs	r3, r3, #3
 80037f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	331b      	adds	r3, #27
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	4413      	add	r3, r2
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0202 	and.w	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	331b      	adds	r3, #27
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2208      	movs	r2, #8
 800382e:	611a      	str	r2, [r3, #16]
 8003830:	e00b      	b.n	800384a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	331b      	adds	r3, #27
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4413      	add	r3, r2
 800383e:	3304      	adds	r3, #4
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 020f 	and.w	r2, r3, #15
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	331b      	adds	r3, #27
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	4413      	add	r3, r2
 8003856:	3304      	adds	r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	b2da      	uxtb	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	331b      	adds	r3, #27
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	4413      	add	r3, r2
 800386e:	3304      	adds	r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	0c1b      	lsrs	r3, r3, #16
 8003874:	b29a      	uxth	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	4413      	add	r3, r2
 8003884:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4413      	add	r3, r2
 800389a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	0a1a      	lsrs	r2, r3, #8
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	0c1a      	lsrs	r2, r3, #16
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	3302      	adds	r3, #2
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0e1a      	lsrs	r2, r3, #24
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	3303      	adds	r3, #3
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	3304      	adds	r3, #4
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	4413      	add	r3, r2
 8003900:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	0a1a      	lsrs	r2, r3, #8
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	3305      	adds	r3, #5
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	4413      	add	r3, r2
 800391a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0c1a      	lsrs	r2, r3, #16
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	3306      	adds	r3, #6
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	4413      	add	r3, r2
 8003934:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0e1a      	lsrs	r2, r3, #24
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	3307      	adds	r3, #7
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d108      	bne.n	800395c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0220 	orr.w	r2, r2, #32
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	e007      	b.n	800396c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0220 	orr.w	r2, r2, #32
 800396a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e006      	b.n	800397e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
  }
}
 800397e:	4618      	mov	r0, r3
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800399a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d002      	beq.n	80039a8 <HAL_CAN_ActivateNotification+0x1e>
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d109      	bne.n	80039bc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6959      	ldr	r1, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e006      	b.n	80039ca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
  }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b08a      	sub	sp, #40	; 0x28
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d07c      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d023      	beq.n	8003a6e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fd ffeb 	bl	8001a14 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a3e:	e016      	b.n	8003a6e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
 8003a52:	e00c      	b.n	8003a6e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
 8003a66:	e002      	b.n	8003a6e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fd ffe3 	bl	8001a34 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d024      	beq.n	8003ac2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f959 	bl	8003d44 <HAL_CAN_TxMailbox1CompleteCallback>
 8003a92:	e016      	b.n	8003ac2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	e00c      	b.n	8003ac2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aba:	e002      	b.n	8003ac2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f955 	bl	8003d6c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d024      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ad4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f939 	bl	8003d58 <HAL_CAN_TxMailbox2CompleteCallback>
 8003ae6:	e016      	b.n	8003b16 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
 8003afa:	e00c      	b.n	8003b16 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0e:	e002      	b.n	8003b16 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f935 	bl	8003d80 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2210      	movs	r2, #16
 8003b38:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2208      	movs	r2, #8
 8003b54:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fd ff9c 	bl	8001a94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fd ff6d 	bl	8001a54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00c      	beq.n	8003b9e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2210      	movs	r2, #16
 8003b9c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d006      	beq.n	8003bc0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8f4 	bl	8003da8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f8db 	bl	8003d94 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00b      	beq.n	8003c00 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d006      	beq.n	8003c00 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8de 	bl	8003dbc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d006      	beq.n	8003c22 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f8d7 	bl	8003dd0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d07b      	beq.n	8003d24 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d072      	beq.n	8003d1c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f043 0304 	orr.w	r3, r3, #4
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d043      	beq.n	8003d1c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d03e      	beq.n	8003d1c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ca4:	2b60      	cmp	r3, #96	; 0x60
 8003ca6:	d02b      	beq.n	8003d00 <HAL_CAN_IRQHandler+0x32a>
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d82e      	bhi.n	8003d0a <HAL_CAN_IRQHandler+0x334>
 8003cac:	2b50      	cmp	r3, #80	; 0x50
 8003cae:	d022      	beq.n	8003cf6 <HAL_CAN_IRQHandler+0x320>
 8003cb0:	2b50      	cmp	r3, #80	; 0x50
 8003cb2:	d82a      	bhi.n	8003d0a <HAL_CAN_IRQHandler+0x334>
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	d019      	beq.n	8003cec <HAL_CAN_IRQHandler+0x316>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d826      	bhi.n	8003d0a <HAL_CAN_IRQHandler+0x334>
 8003cbc:	2b30      	cmp	r3, #48	; 0x30
 8003cbe:	d010      	beq.n	8003ce2 <HAL_CAN_IRQHandler+0x30c>
 8003cc0:	2b30      	cmp	r3, #48	; 0x30
 8003cc2:	d822      	bhi.n	8003d0a <HAL_CAN_IRQHandler+0x334>
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d002      	beq.n	8003cce <HAL_CAN_IRQHandler+0x2f8>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d005      	beq.n	8003cd8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ccc:	e01d      	b.n	8003d0a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	f043 0308 	orr.w	r3, r3, #8
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cd6:	e019      	b.n	8003d0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	f043 0310 	orr.w	r3, r3, #16
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ce0:	e014      	b.n	8003d0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	f043 0320 	orr.w	r3, r3, #32
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cea:	e00f      	b.n	8003d0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cf4:	e00a      	b.n	8003d0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cfe:	e005      	b.n	8003d0c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d08:	e000      	b.n	8003d0c <HAL_CAN_IRQHandler+0x336>
            break;
 8003d0a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d1a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2204      	movs	r2, #4
 8003d22:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd feb6 	bl	8001aa8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3728      	adds	r7, #40	; 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e0e:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003e10:	7bbb      	ldrb	r3, [r7, #14]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d002      	beq.n	8003e1c <HAL_CAN_ResetError+0x20>
 8003e16:	7bbb      	ldrb	r3, [r7, #14]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d103      	bne.n	8003e24 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24
 8003e22:	e007      	b.n	8003e34 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <__NVIC_SetPriorityGrouping+0x44>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e60:	4013      	ands	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e76:	4a04      	ldr	r2, [pc, #16]	; (8003e88 <__NVIC_SetPriorityGrouping+0x44>)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	60d3      	str	r3, [r2, #12]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e90:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	f003 0307 	and.w	r3, r3, #7
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	db0b      	blt.n	8003ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	f003 021f 	and.w	r2, r3, #31
 8003ec0:	4907      	ldr	r1, [pc, #28]	; (8003ee0 <__NVIC_EnableIRQ+0x38>)
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2001      	movs	r0, #1
 8003eca:	fa00 f202 	lsl.w	r2, r0, r2
 8003ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	e000e100 	.word	0xe000e100

08003ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	db0a      	blt.n	8003f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	490c      	ldr	r1, [pc, #48]	; (8003f30 <__NVIC_SetPriority+0x4c>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	0112      	lsls	r2, r2, #4
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	440b      	add	r3, r1
 8003f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f0c:	e00a      	b.n	8003f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4908      	ldr	r1, [pc, #32]	; (8003f34 <__NVIC_SetPriority+0x50>)
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	3b04      	subs	r3, #4
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	440b      	add	r3, r1
 8003f22:	761a      	strb	r2, [r3, #24]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	e000e100 	.word	0xe000e100
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f1c3 0307 	rsb	r3, r3, #7
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf28      	it	cs
 8003f56:	2304      	movcs	r3, #4
 8003f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d902      	bls.n	8003f68 <NVIC_EncodePriority+0x30>
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3b03      	subs	r3, #3
 8003f66:	e000      	b.n	8003f6a <NVIC_EncodePriority+0x32>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	43d9      	mvns	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	4313      	orrs	r3, r2
         );
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3724      	adds	r7, #36	; 0x24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb0:	d301      	bcc.n	8003fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e00f      	b.n	8003fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	; (8003fe0 <SysTick_Config+0x40>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fbe:	210f      	movs	r1, #15
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	f7ff ff8e 	bl	8003ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <SysTick_Config+0x40>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <SysTick_Config+0x40>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	e000e010 	.word	0xe000e010

08003fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff29 	bl	8003e44 <__NVIC_SetPriorityGrouping>
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	4603      	mov	r3, r0
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800400c:	f7ff ff3e 	bl	8003e8c <__NVIC_GetPriorityGrouping>
 8004010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	6978      	ldr	r0, [r7, #20]
 8004018:	f7ff ff8e 	bl	8003f38 <NVIC_EncodePriority>
 800401c:	4602      	mov	r2, r0
 800401e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ff5d 	bl	8003ee4 <__NVIC_SetPriority>
}
 800402a:	bf00      	nop
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	4603      	mov	r3, r0
 800403a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800403c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff ff31 	bl	8003ea8 <__NVIC_EnableIRQ>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff ffa2 	bl	8003fa0 <SysTick_Config>
 800405c:	4603      	mov	r3, r0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e037      	b.n	80040ec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004092:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004096:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80040a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f940 	bl	8004354 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}  
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_DMA_Start_IT+0x20>
 8004110:	2302      	movs	r3, #2
 8004112:	e04a      	b.n	80041aa <HAL_DMA_Start_IT+0xb6>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004122:	2b01      	cmp	r3, #1
 8004124:	d13a      	bne.n	800419c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2202      	movs	r2, #2
 800412a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8d4 	bl	80042f8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 020e 	orr.w	r2, r2, #14
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e00f      	b.n	800418a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 020a 	orr.w	r2, r2, #10
 8004178:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0204 	bic.w	r2, r2, #4
 8004188:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e005      	b.n	80041a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
 80041a6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2204      	movs	r2, #4
 80041d0:	409a      	lsls	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d024      	beq.n	8004224 <HAL_DMA_IRQHandler+0x72>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01f      	beq.n	8004224 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d107      	bne.n	8004202 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0204 	bic.w	r2, r2, #4
 8004200:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	2104      	movs	r1, #4
 800420c:	fa01 f202 	lsl.w	r2, r1, r2
 8004210:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d06a      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004222:	e065      	b.n	80042f0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	2202      	movs	r2, #2
 800422a:	409a      	lsls	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d02c      	beq.n	800428e <HAL_DMA_IRQHandler+0xdc>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d027      	beq.n	800428e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 020a 	bic.w	r2, r2, #10
 800425a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426c:	2102      	movs	r1, #2
 800426e:	fa01 f202 	lsl.w	r2, r1, r2
 8004272:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	d035      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800428c:	e030      	b.n	80042f0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2208      	movs	r2, #8
 8004294:	409a      	lsls	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d028      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x13e>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d023      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 020e 	bic.w	r2, r2, #14
 80042b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f202 	lsl.w	r2, r1, r2
 80042c6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d004      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
    }
  }
}  
 80042ee:	e7ff      	b.n	80042f0 <HAL_DMA_IRQHandler+0x13e>
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f202 	lsl.w	r2, r1, r2
 8004314:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b10      	cmp	r3, #16
 8004324:	d108      	bne.n	8004338 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004336:	e007      	b.n	8004348 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	60da      	str	r2, [r3, #12]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <DMA_CalcBaseAndBitshift+0x60>)
 8004364:	429a      	cmp	r2, r3
 8004366:	d80f      	bhi.n	8004388 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004370:	4413      	add	r3, r2
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <DMA_CalcBaseAndBitshift+0x68>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	009a      	lsls	r2, r3, #2
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a0f      	ldr	r2, [pc, #60]	; (80043c0 <DMA_CalcBaseAndBitshift+0x6c>)
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004386:	e00e      	b.n	80043a6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <DMA_CalcBaseAndBitshift+0x70>)
 8004390:	4413      	add	r3, r2
 8004392:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <DMA_CalcBaseAndBitshift+0x68>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	009a      	lsls	r2, r3, #2
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <DMA_CalcBaseAndBitshift+0x74>)
 80043a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40020407 	.word	0x40020407
 80043b8:	bffdfff8 	.word	0xbffdfff8
 80043bc:	cccccccd 	.word	0xcccccccd
 80043c0:	40020000 	.word	0x40020000
 80043c4:	bffdfbf8 	.word	0xbffdfbf8
 80043c8:	40020400 	.word	0x40020400

080043cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043da:	e154      	b.n	8004686 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	fa01 f303 	lsl.w	r3, r1, r3
 80043e8:	4013      	ands	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8146 	beq.w	8004680 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d005      	beq.n	800440c <HAL_GPIO_Init+0x40>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d130      	bne.n	800446e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004442:	2201      	movs	r2, #1
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	f003 0201 	and.w	r2, r3, #1
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b03      	cmp	r3, #3
 8004478:	d017      	beq.n	80044aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	2203      	movs	r2, #3
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d123      	bne.n	80044fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	08da      	lsrs	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3208      	adds	r2, #8
 80044be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	220f      	movs	r2, #15
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	08da      	lsrs	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3208      	adds	r2, #8
 80044f8:	6939      	ldr	r1, [r7, #16]
 80044fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	2203      	movs	r2, #3
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4013      	ands	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0203 	and.w	r2, r3, #3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80a0 	beq.w	8004680 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004540:	4b58      	ldr	r3, [pc, #352]	; (80046a4 <HAL_GPIO_Init+0x2d8>)
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	4a57      	ldr	r2, [pc, #348]	; (80046a4 <HAL_GPIO_Init+0x2d8>)
 8004546:	f043 0301 	orr.w	r3, r3, #1
 800454a:	6193      	str	r3, [r2, #24]
 800454c:	4b55      	ldr	r3, [pc, #340]	; (80046a4 <HAL_GPIO_Init+0x2d8>)
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004558:	4a53      	ldr	r2, [pc, #332]	; (80046a8 <HAL_GPIO_Init+0x2dc>)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	089b      	lsrs	r3, r3, #2
 800455e:	3302      	adds	r3, #2
 8004560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	220f      	movs	r2, #15
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004582:	d019      	beq.n	80045b8 <HAL_GPIO_Init+0x1ec>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a49      	ldr	r2, [pc, #292]	; (80046ac <HAL_GPIO_Init+0x2e0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <HAL_GPIO_Init+0x1e8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a48      	ldr	r2, [pc, #288]	; (80046b0 <HAL_GPIO_Init+0x2e4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00d      	beq.n	80045b0 <HAL_GPIO_Init+0x1e4>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a47      	ldr	r2, [pc, #284]	; (80046b4 <HAL_GPIO_Init+0x2e8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d007      	beq.n	80045ac <HAL_GPIO_Init+0x1e0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a46      	ldr	r2, [pc, #280]	; (80046b8 <HAL_GPIO_Init+0x2ec>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d101      	bne.n	80045a8 <HAL_GPIO_Init+0x1dc>
 80045a4:	2304      	movs	r3, #4
 80045a6:	e008      	b.n	80045ba <HAL_GPIO_Init+0x1ee>
 80045a8:	2305      	movs	r3, #5
 80045aa:	e006      	b.n	80045ba <HAL_GPIO_Init+0x1ee>
 80045ac:	2303      	movs	r3, #3
 80045ae:	e004      	b.n	80045ba <HAL_GPIO_Init+0x1ee>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e002      	b.n	80045ba <HAL_GPIO_Init+0x1ee>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_GPIO_Init+0x1ee>
 80045b8:	2300      	movs	r3, #0
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	f002 0203 	and.w	r2, r2, #3
 80045c0:	0092      	lsls	r2, r2, #2
 80045c2:	4093      	lsls	r3, r2
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045ca:	4937      	ldr	r1, [pc, #220]	; (80046a8 <HAL_GPIO_Init+0x2dc>)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	3302      	adds	r3, #2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045d8:	4b38      	ldr	r3, [pc, #224]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80045fc:	4a2f      	ldr	r2, [pc, #188]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004602:	4b2e      	ldr	r3, [pc, #184]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	43db      	mvns	r3, r3
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4013      	ands	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004626:	4a25      	ldr	r2, [pc, #148]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800462c:	4b23      	ldr	r3, [pc, #140]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	43db      	mvns	r3, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004650:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004656:	4b19      	ldr	r3, [pc, #100]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	43db      	mvns	r3, r3
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800467a:	4a10      	ldr	r2, [pc, #64]	; (80046bc <HAL_GPIO_Init+0x2f0>)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	3301      	adds	r3, #1
 8004684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	f47f aea3 	bne.w	80043dc <HAL_GPIO_Init+0x10>
  }
}
 8004696:	bf00      	nop
 8004698:	bf00      	nop
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40010000 	.word	0x40010000
 80046ac:	48000400 	.word	0x48000400
 80046b0:	48000800 	.word	0x48000800
 80046b4:	48000c00 	.word	0x48000c00
 80046b8:	48001000 	.word	0x48001000
 80046bc:	40010400 	.word	0x40010400

080046c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	887b      	ldrh	r3, [r7, #2]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]
 80046dc:	e001      	b.n	80046e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]
 80046fc:	4613      	mov	r3, r2
 80046fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004700:	787b      	ldrb	r3, [r7, #1]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004706:	887a      	ldrh	r2, [r7, #2]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800470c:	e002      	b.n	8004714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800470e:	887a      	ldrh	r2, [r7, #2]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4013      	ands	r3, r2
 8004738:	041a      	lsls	r2, r3, #16
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	43d9      	mvns	r1, r3
 800473e:	887b      	ldrh	r3, [r7, #2]
 8004740:	400b      	ands	r3, r1
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e08f      	b.n	800488a <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b05      	cmp	r3, #5
 8004774:	d101      	bne.n	800477a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e087      	b.n	800488a <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d101      	bne.n	800478a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07f      	b.n	800488a <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004790:	4b40      	ldr	r3, [pc, #256]	; (8004894 <HAL_OPAMP_Init+0x140>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4a3f      	ldr	r2, [pc, #252]	; (8004894 <HAL_OPAMP_Init+0x140>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6193      	str	r3, [r2, #24]
 800479c:	4b3d      	ldr	r3, [pc, #244]	; (8004894 <HAL_OPAMP_Init+0x140>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d103      	bne.n	80047bc <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fc fdab 	bl	8001318 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d003      	beq.n	80047d2 <HAL_OPAMP_Init+0x7e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b60      	cmp	r3, #96	; 0x60
 80047d0:	d125      	bne.n	800481e <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b2f      	ldr	r3, [pc, #188]	; (8004898 <HAL_OPAMP_Init+0x144>)
 80047da:	4013      	ands	r3, r2
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6851      	ldr	r1, [r2, #4]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	68d2      	ldr	r2, [r2, #12]
 80047e4:	4311      	orrs	r1, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6912      	ldr	r2, [r2, #16]
 80047ea:	4311      	orrs	r1, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6992      	ldr	r2, [r2, #24]
 80047f0:	4311      	orrs	r1, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	69d2      	ldr	r2, [r2, #28]
 80047f6:	4311      	orrs	r1, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6a12      	ldr	r2, [r2, #32]
 80047fc:	4311      	orrs	r1, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004808:	04d2      	lsls	r2, r2, #19
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004810:	0612      	lsls	r2, r2, #24
 8004812:	4311      	orrs	r1, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	430b      	orrs	r3, r1
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	e02a      	b.n	8004874 <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <HAL_OPAMP_Init+0x144>)
 8004826:	4013      	ands	r3, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6851      	ldr	r1, [r2, #4]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6892      	ldr	r2, [r2, #8]
 8004830:	4311      	orrs	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68d2      	ldr	r2, [r2, #12]
 8004836:	4311      	orrs	r1, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6912      	ldr	r2, [r2, #16]
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6952      	ldr	r2, [r2, #20]
 8004842:	4311      	orrs	r1, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6992      	ldr	r2, [r2, #24]
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	69d2      	ldr	r2, [r2, #28]
 800484e:	4311      	orrs	r1, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6a12      	ldr	r2, [r2, #32]
 8004854:	4311      	orrs	r1, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800485a:	4311      	orrs	r1, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004860:	04d2      	lsls	r2, r2, #19
 8004862:	4311      	orrs	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004868:	0612      	lsls	r2, r2, #24
 800486a:	4311      	orrs	r1, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	430b      	orrs	r3, r1
 8004872:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d103      	bne.n	8004888 <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004888:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000
 8004898:	e0003811 	.word	0xe0003811

0800489c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	e01d      	b.n	80048f0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b05      	cmp	r3, #5
 80048be:	d102      	bne.n	80048c6 <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	e014      	b.n	80048f0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d10c      	bne.n	80048ec <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2204      	movs	r2, #4
 80048e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80048ea:	e001      	b.n	80048f0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004906:	af00      	add	r7, sp, #0
 8004908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800490c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004910:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004916:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	f001 b823 	b.w	800596c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 817d 	beq.w	8004c36 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800493c:	4bbc      	ldr	r3, [pc, #752]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b04      	cmp	r3, #4
 8004946:	d00c      	beq.n	8004962 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004948:	4bb9      	ldr	r3, [pc, #740]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	2b08      	cmp	r3, #8
 8004952:	d15c      	bne.n	8004a0e <HAL_RCC_OscConfig+0x10e>
 8004954:	4bb6      	ldr	r3, [pc, #728]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d155      	bne.n	8004a0e <HAL_RCC_OscConfig+0x10e>
 8004962:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004966:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800496e:	fa93 f3a3 	rbit	r3, r3
 8004972:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004976:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497a:	fab3 f383 	clz	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	b2db      	uxtb	r3, r3
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	d102      	bne.n	8004994 <HAL_RCC_OscConfig+0x94>
 800498e:	4ba8      	ldr	r3, [pc, #672]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	e015      	b.n	80049c0 <HAL_RCC_OscConfig+0xc0>
 8004994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004998:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80049a0:	fa93 f3a3 	rbit	r3, r3
 80049a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80049a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80049b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80049bc:	4b9c      	ldr	r3, [pc, #624]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80049c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80049cc:	fa92 f2a2 	rbit	r2, r2
 80049d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80049d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80049d8:	fab2 f282 	clz	r2, r2
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	f042 0220 	orr.w	r2, r2, #32
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	f002 021f 	and.w	r2, r2, #31
 80049e8:	2101      	movs	r1, #1
 80049ea:	fa01 f202 	lsl.w	r2, r1, r2
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 811f 	beq.w	8004c34 <HAL_RCC_OscConfig+0x334>
 80049f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f040 8116 	bne.w	8004c34 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f000 bfaf 	b.w	800596c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a1e:	d106      	bne.n	8004a2e <HAL_RCC_OscConfig+0x12e>
 8004a20:	4b83      	ldr	r3, [pc, #524]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a82      	ldr	r2, [pc, #520]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e036      	b.n	8004a9c <HAL_RCC_OscConfig+0x19c>
 8004a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x158>
 8004a3e:	4b7c      	ldr	r3, [pc, #496]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a7b      	ldr	r2, [pc, #492]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	4b79      	ldr	r3, [pc, #484]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a78      	ldr	r2, [pc, #480]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e021      	b.n	8004a9c <HAL_RCC_OscConfig+0x19c>
 8004a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0x184>
 8004a6a:	4b71      	ldr	r3, [pc, #452]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a70      	ldr	r2, [pc, #448]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b6e      	ldr	r3, [pc, #440]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a6d      	ldr	r2, [pc, #436]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0x19c>
 8004a84:	4b6a      	ldr	r3, [pc, #424]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a69      	ldr	r2, [pc, #420]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b67      	ldr	r3, [pc, #412]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a66      	ldr	r2, [pc, #408]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a9c:	4b64      	ldr	r3, [pc, #400]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa0:	f023 020f 	bic.w	r2, r3, #15
 8004aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	495f      	ldr	r1, [pc, #380]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d059      	beq.n	8004b7a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7fd f879 	bl	8001bbc <HAL_GetTick>
 8004aca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fd f874 	bl	8001bbc <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b64      	cmp	r3, #100	; 0x64
 8004ade:	d902      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	f000 bf43 	b.w	800596c <HAL_RCC_OscConfig+0x106c>
 8004ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004afa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d102      	bne.n	8004b18 <HAL_RCC_OscConfig+0x218>
 8004b12:	4b47      	ldr	r3, [pc, #284]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	e015      	b.n	8004b44 <HAL_RCC_OscConfig+0x244>
 8004b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b24:	fa93 f3a3 	rbit	r3, r3
 8004b28:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b30:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b34:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b38:	fa93 f3a3 	rbit	r3, r3
 8004b3c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b40:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b48:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004b4c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b50:	fa92 f2a2 	rbit	r2, r2
 8004b54:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004b58:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004b5c:	fab2 f282 	clz	r2, r2
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	f042 0220 	orr.w	r2, r2, #32
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	f002 021f 	and.w	r2, r2, #31
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ab      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x1d0>
 8004b78:	e05d      	b.n	8004c36 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7a:	f7fd f81f 	bl	8001bbc <HAL_GetTick>
 8004b7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fd f81a 	bl	8001bbc <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b64      	cmp	r3, #100	; 0x64
 8004b92:	d902      	bls.n	8004b9a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	f000 bee9 	b.w	800596c <HAL_RCC_OscConfig+0x106c>
 8004b9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b9e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004ba6:	fa93 f3a3 	rbit	r3, r3
 8004baa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004bae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d102      	bne.n	8004bcc <HAL_RCC_OscConfig+0x2cc>
 8004bc6:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	e015      	b.n	8004bf8 <HAL_RCC_OscConfig+0x2f8>
 8004bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004bd8:	fa93 f3a3 	rbit	r3, r3
 8004bdc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004be8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004bec:	fa93 f3a3 	rbit	r3, r3
 8004bf0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_RCC_OscConfig+0x330>)
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bfc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c00:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c04:	fa92 f2a2 	rbit	r2, r2
 8004c08:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004c0c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004c10:	fab2 f282 	clz	r2, r2
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	f042 0220 	orr.w	r2, r2, #32
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f002 021f 	and.w	r2, r2, #31
 8004c20:	2101      	movs	r1, #1
 8004c22:	fa01 f202 	lsl.w	r2, r1, r2
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ab      	bne.n	8004b84 <HAL_RCC_OscConfig+0x284>
 8004c2c:	e003      	b.n	8004c36 <HAL_RCC_OscConfig+0x336>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 817d 	beq.w	8004f46 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c4c:	4ba6      	ldr	r3, [pc, #664]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c58:	4ba3      	ldr	r3, [pc, #652]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d172      	bne.n	8004d4a <HAL_RCC_OscConfig+0x44a>
 8004c64:	4ba0      	ldr	r3, [pc, #640]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d16c      	bne.n	8004d4a <HAL_RCC_OscConfig+0x44a>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004c7a:	fa93 f3a3 	rbit	r3, r3
 8004c7e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004c82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x3a0>
 8004c9a:	4b93      	ldr	r3, [pc, #588]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	e013      	b.n	8004cc8 <HAL_RCC_OscConfig+0x3c8>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004cb8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004cbc:	fa93 f3a3 	rbit	r3, r3
 8004cc0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004cc4:	4b88      	ldr	r3, [pc, #544]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	2202      	movs	r2, #2
 8004cca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004cce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004cd2:	fa92 f2a2 	rbit	r2, r2
 8004cd6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004cda:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004cde:	fab2 f282 	clz	r2, r2
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	f042 0220 	orr.w	r2, r2, #32
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	f002 021f 	and.w	r2, r2, #31
 8004cee:	2101      	movs	r1, #1
 8004cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCC_OscConfig+0x410>
 8004cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d002      	beq.n	8004d10 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f000 be2e 	b.w	800596c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d10:	4b75      	ldr	r3, [pc, #468]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	21f8      	movs	r1, #248	; 0xf8
 8004d26:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d2e:	fa91 f1a1 	rbit	r1, r1
 8004d32:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d36:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d3a:	fab1 f181 	clz	r1, r1
 8004d3e:	b2c9      	uxtb	r1, r1
 8004d40:	408b      	lsls	r3, r1
 8004d42:	4969      	ldr	r1, [pc, #420]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d48:	e0fd      	b.n	8004f46 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8088 	beq.w	8004e6c <HAL_RCC_OscConfig+0x56c>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004d6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d72:	fab3 f383 	clz	r3, r3
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	461a      	mov	r2, r3
 8004d84:	2301      	movs	r3, #1
 8004d86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7fc ff18 	bl	8001bbc <HAL_GetTick>
 8004d8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d90:	e00a      	b.n	8004da8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d92:	f7fc ff13 	bl	8001bbc <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d902      	bls.n	8004da8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	f000 bde2 	b.w	800596c <HAL_RCC_OscConfig+0x106c>
 8004da8:	2302      	movs	r3, #2
 8004daa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004dba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x4d8>
 8004dd2:	4b45      	ldr	r3, [pc, #276]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	e013      	b.n	8004e00 <HAL_RCC_OscConfig+0x500>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004de2:	fa93 f3a3 	rbit	r3, r3
 8004de6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004dea:	2302      	movs	r3, #2
 8004dec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004df0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004df4:	fa93 f3a3 	rbit	r3, r3
 8004df8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004dfc:	4b3a      	ldr	r3, [pc, #232]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2202      	movs	r2, #2
 8004e02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e0a:	fa92 f2a2 	rbit	r2, r2
 8004e0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e16:	fab2 f282 	clz	r2, r2
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	f042 0220 	orr.w	r2, r2, #32
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	f002 021f 	and.w	r2, r2, #31
 8004e26:	2101      	movs	r1, #1
 8004e28:	fa01 f202 	lsl.w	r2, r1, r2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0af      	beq.n	8004d92 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e32:	4b2d      	ldr	r3, [pc, #180]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	21f8      	movs	r1, #248	; 0xf8
 8004e48:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e50:	fa91 f1a1 	rbit	r1, r1
 8004e54:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004e58:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004e5c:	fab1 f181 	clz	r1, r1
 8004e60:	b2c9      	uxtb	r1, r1
 8004e62:	408b      	lsls	r3, r1
 8004e64:	4920      	ldr	r1, [pc, #128]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	600b      	str	r3, [r1, #0]
 8004e6a:	e06c      	b.n	8004f46 <HAL_RCC_OscConfig+0x646>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004e76:	fa93 f3a3 	rbit	r3, r3
 8004e7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004e7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	461a      	mov	r2, r3
 8004e94:	2300      	movs	r3, #0
 8004e96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fc fe90 	bl	8001bbc <HAL_GetTick>
 8004e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ea2:	f7fc fe8b 	bl	8001bbc <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d902      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	f000 bd5a 	b.w	800596c <HAL_RCC_OscConfig+0x106c>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ec2:	fa93 f3a3 	rbit	r3, r3
 8004ec6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d104      	bne.n	8004eec <HAL_RCC_OscConfig+0x5ec>
 8004ee2:	4b01      	ldr	r3, [pc, #4]	; (8004ee8 <HAL_RCC_OscConfig+0x5e8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	e015      	b.n	8004f14 <HAL_RCC_OscConfig+0x614>
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	2302      	movs	r3, #2
 8004eee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ef6:	fa93 f3a3 	rbit	r3, r3
 8004efa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004efe:	2302      	movs	r3, #2
 8004f00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f08:	fa93 f3a3 	rbit	r3, r3
 8004f0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f10:	4bc8      	ldr	r3, [pc, #800]	; (8005234 <HAL_RCC_OscConfig+0x934>)
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2202      	movs	r2, #2
 8004f16:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f1e:	fa92 f2a2 	rbit	r2, r2
 8004f22:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f26:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f2a:	fab2 f282 	clz	r2, r2
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	f042 0220 	orr.w	r2, r2, #32
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	f002 021f 	and.w	r2, r2, #31
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ad      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8110 	beq.w	800517c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d079      	beq.n	8005060 <HAL_RCC_OscConfig+0x760>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f76:	fa93 f3a3 	rbit	r3, r3
 8004f7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f82:	fab3 f383 	clz	r3, r3
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4bab      	ldr	r3, [pc, #684]	; (8005238 <HAL_RCC_OscConfig+0x938>)
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	461a      	mov	r2, r3
 8004f92:	2301      	movs	r3, #1
 8004f94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f96:	f7fc fe11 	bl	8001bbc <HAL_GetTick>
 8004f9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fa0:	f7fc fe0c 	bl	8001bbc <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d902      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	f000 bcdb 	b.w	800596c <HAL_RCC_OscConfig+0x106c>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fc0:	fa93 f3a3 	rbit	r3, r3
 8004fc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	fa93 f2a3 	rbit	r2, r3
 8004fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	fa93 f2a3 	rbit	r2, r3
 8005006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800500e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005010:	4b88      	ldr	r3, [pc, #544]	; (8005234 <HAL_RCC_OscConfig+0x934>)
 8005012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005018:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800501c:	2102      	movs	r1, #2
 800501e:	6019      	str	r1, [r3, #0]
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	fa93 f1a3 	rbit	r1, r3
 800502e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005032:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005036:	6019      	str	r1, [r3, #0]
  return result;
 8005038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800504c:	b2db      	uxtb	r3, r3
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2101      	movs	r1, #1
 8005054:	fa01 f303 	lsl.w	r3, r1, r3
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0a0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x6a0>
 800505e:	e08d      	b.n	800517c <HAL_RCC_OscConfig+0x87c>
 8005060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005064:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005070:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	fa93 f2a3 	rbit	r2, r3
 800507a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005082:	601a      	str	r2, [r3, #0]
  return result;
 8005084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005088:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800508c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800508e:	fab3 f383 	clz	r3, r3
 8005092:	b2db      	uxtb	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	4b68      	ldr	r3, [pc, #416]	; (8005238 <HAL_RCC_OscConfig+0x938>)
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050a2:	f7fc fd8b 	bl	8001bbc <HAL_GetTick>
 80050a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ac:	f7fc fd86 	bl	8001bbc <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d902      	bls.n	80050c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	f000 bc55 	b.w	800596c <HAL_RCC_OscConfig+0x106c>
 80050c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050ca:	2202      	movs	r2, #2
 80050cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	fa93 f2a3 	rbit	r2, r3
 80050dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050ee:	2202      	movs	r2, #2
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	fa93 f2a3 	rbit	r2, r3
 8005100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005104:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005112:	2202      	movs	r2, #2
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	fa93 f2a3 	rbit	r2, r3
 8005124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005128:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800512c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800512e:	4b41      	ldr	r3, [pc, #260]	; (8005234 <HAL_RCC_OscConfig+0x934>)
 8005130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005136:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800513a:	2102      	movs	r1, #2
 800513c:	6019      	str	r1, [r3, #0]
 800513e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005142:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	fa93 f1a3 	rbit	r1, r3
 800514c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005150:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005154:	6019      	str	r1, [r3, #0]
  return result;
 8005156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	fab3 f383 	clz	r3, r3
 8005164:	b2db      	uxtb	r3, r3
 8005166:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	2101      	movs	r1, #1
 8005172:	fa01 f303 	lsl.w	r3, r1, r3
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d197      	bne.n	80050ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800517c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005180:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 81a1 	beq.w	80054d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005192:	2300      	movs	r3, #0
 8005194:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005198:	4b26      	ldr	r3, [pc, #152]	; (8005234 <HAL_RCC_OscConfig+0x934>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d116      	bne.n	80051d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a4:	4b23      	ldr	r3, [pc, #140]	; (8005234 <HAL_RCC_OscConfig+0x934>)
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	4a22      	ldr	r2, [pc, #136]	; (8005234 <HAL_RCC_OscConfig+0x934>)
 80051aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ae:	61d3      	str	r3, [r2, #28]
 80051b0:	4b20      	ldr	r3, [pc, #128]	; (8005234 <HAL_RCC_OscConfig+0x934>)
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80051b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d2:	4b1a      	ldr	r3, [pc, #104]	; (800523c <HAL_RCC_OscConfig+0x93c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d11a      	bne.n	8005214 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <HAL_RCC_OscConfig+0x93c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a16      	ldr	r2, [pc, #88]	; (800523c <HAL_RCC_OscConfig+0x93c>)
 80051e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ea:	f7fc fce7 	bl	8001bbc <HAL_GetTick>
 80051ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f2:	e009      	b.n	8005208 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f4:	f7fc fce2 	bl	8001bbc <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b64      	cmp	r3, #100	; 0x64
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e3b1      	b.n	800596c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <HAL_RCC_OscConfig+0x93c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0ef      	beq.n	80051f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005218:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d10d      	bne.n	8005240 <HAL_RCC_OscConfig+0x940>
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <HAL_RCC_OscConfig+0x934>)
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	4a02      	ldr	r2, [pc, #8]	; (8005234 <HAL_RCC_OscConfig+0x934>)
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	6213      	str	r3, [r2, #32]
 8005230:	e03c      	b.n	80052ac <HAL_RCC_OscConfig+0x9ac>
 8005232:	bf00      	nop
 8005234:	40021000 	.word	0x40021000
 8005238:	10908120 	.word	0x10908120
 800523c:	40007000 	.word	0x40007000
 8005240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005244:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10c      	bne.n	800526a <HAL_RCC_OscConfig+0x96a>
 8005250:	4bc1      	ldr	r3, [pc, #772]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	4ac0      	ldr	r2, [pc, #768]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	6213      	str	r3, [r2, #32]
 800525c:	4bbe      	ldr	r3, [pc, #760]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	4abd      	ldr	r2, [pc, #756]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 8005262:	f023 0304 	bic.w	r3, r3, #4
 8005266:	6213      	str	r3, [r2, #32]
 8005268:	e020      	b.n	80052ac <HAL_RCC_OscConfig+0x9ac>
 800526a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b05      	cmp	r3, #5
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x994>
 800527a:	4bb7      	ldr	r3, [pc, #732]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	4ab6      	ldr	r2, [pc, #728]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 8005280:	f043 0304 	orr.w	r3, r3, #4
 8005284:	6213      	str	r3, [r2, #32]
 8005286:	4bb4      	ldr	r3, [pc, #720]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	4ab3      	ldr	r2, [pc, #716]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6213      	str	r3, [r2, #32]
 8005292:	e00b      	b.n	80052ac <HAL_RCC_OscConfig+0x9ac>
 8005294:	4bb0      	ldr	r3, [pc, #704]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	4aaf      	ldr	r2, [pc, #700]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 800529a:	f023 0301 	bic.w	r3, r3, #1
 800529e:	6213      	str	r3, [r2, #32]
 80052a0:	4bad      	ldr	r3, [pc, #692]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	4aac      	ldr	r2, [pc, #688]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 80052a6:	f023 0304 	bic.w	r3, r3, #4
 80052aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8081 	beq.w	80053c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052be:	f7fc fc7d 	bl	8001bbc <HAL_GetTick>
 80052c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c6:	e00b      	b.n	80052e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fc fc78 	bl	8001bbc <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d8:	4293      	cmp	r3, r2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e345      	b.n	800596c <HAL_RCC_OscConfig+0x106c>
 80052e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80052e8:	2202      	movs	r2, #2
 80052ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	fa93 f2a3 	rbit	r2, r3
 80052fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005308:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800530c:	2202      	movs	r2, #2
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005314:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	fa93 f2a3 	rbit	r2, r3
 800531e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005322:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005326:	601a      	str	r2, [r3, #0]
  return result;
 8005328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005330:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005332:	fab3 f383 	clz	r3, r3
 8005336:	b2db      	uxtb	r3, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d102      	bne.n	800534c <HAL_RCC_OscConfig+0xa4c>
 8005346:	4b84      	ldr	r3, [pc, #528]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	e013      	b.n	8005374 <HAL_RCC_OscConfig+0xa74>
 800534c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005350:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005354:	2202      	movs	r2, #2
 8005356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	fa93 f2a3 	rbit	r2, r3
 8005366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800536a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	4b79      	ldr	r3, [pc, #484]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005378:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800537c:	2102      	movs	r1, #2
 800537e:	6011      	str	r1, [r2, #0]
 8005380:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005384:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	fa92 f1a2 	rbit	r1, r2
 800538e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005392:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005396:	6011      	str	r1, [r2, #0]
  return result;
 8005398:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800539c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	fab2 f282 	clz	r2, r2
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	f002 021f 	and.w	r2, r2, #31
 80053b2:	2101      	movs	r1, #1
 80053b4:	fa01 f202 	lsl.w	r2, r1, r2
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d084      	beq.n	80052c8 <HAL_RCC_OscConfig+0x9c8>
 80053be:	e07f      	b.n	80054c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c0:	f7fc fbfc 	bl	8001bbc <HAL_GetTick>
 80053c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c8:	e00b      	b.n	80053e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ca:	f7fc fbf7 	bl	8001bbc <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e2c4      	b.n	800596c <HAL_RCC_OscConfig+0x106c>
 80053e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80053ea:	2202      	movs	r2, #2
 80053ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	fa93 f2a3 	rbit	r2, r3
 80053fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005400:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800540e:	2202      	movs	r2, #2
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005416:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	fa93 f2a3 	rbit	r2, r3
 8005420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005424:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005428:	601a      	str	r2, [r3, #0]
  return result;
 800542a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005432:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005434:	fab3 f383 	clz	r3, r3
 8005438:	b2db      	uxtb	r3, r3
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f043 0302 	orr.w	r3, r3, #2
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d102      	bne.n	800544e <HAL_RCC_OscConfig+0xb4e>
 8005448:	4b43      	ldr	r3, [pc, #268]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	e013      	b.n	8005476 <HAL_RCC_OscConfig+0xb76>
 800544e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005452:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005456:	2202      	movs	r2, #2
 8005458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	fa93 f2a3 	rbit	r2, r3
 8005468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800546c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	4b39      	ldr	r3, [pc, #228]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800547a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800547e:	2102      	movs	r1, #2
 8005480:	6011      	str	r1, [r2, #0]
 8005482:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005486:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	fa92 f1a2 	rbit	r1, r2
 8005490:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005494:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005498:	6011      	str	r1, [r2, #0]
  return result;
 800549a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800549e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	fab2 f282 	clz	r2, r2
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	f002 021f 	and.w	r2, r2, #31
 80054b4:	2101      	movs	r1, #1
 80054b6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d184      	bne.n	80053ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d105      	bne.n	80054d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c8:	4b23      	ldr	r3, [pc, #140]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 80054ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8242 	beq.w	800596a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054e6:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <HAL_RCC_OscConfig+0xc58>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 030c 	and.w	r3, r3, #12
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	f000 8213 	beq.w	800591a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	2b02      	cmp	r3, #2
 8005502:	f040 8162 	bne.w	80057ca <HAL_RCC_OscConfig+0xeca>
 8005506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800550e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005518:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	fa93 f2a3 	rbit	r2, r3
 8005522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005526:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800552a:	601a      	str	r2, [r3, #0]
  return result;
 800552c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005530:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005534:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005536:	fab3 f383 	clz	r3, r3
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005540:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	461a      	mov	r2, r3
 8005548:	2300      	movs	r3, #0
 800554a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7fc fb36 	bl	8001bbc <HAL_GetTick>
 8005550:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005554:	e00c      	b.n	8005570 <HAL_RCC_OscConfig+0xc70>
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555c:	f7fc fb2e 	bl	8001bbc <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e1fd      	b.n	800596c <HAL_RCC_OscConfig+0x106c>
 8005570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005574:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800557c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005582:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	fa93 f2a3 	rbit	r2, r3
 800558c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005590:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005594:	601a      	str	r2, [r3, #0]
  return result;
 8005596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800559e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055a0:	fab3 f383 	clz	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <HAL_RCC_OscConfig+0xcba>
 80055b4:	4bb0      	ldr	r3, [pc, #704]	; (8005878 <HAL_RCC_OscConfig+0xf78>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	e027      	b.n	800560a <HAL_RCC_OscConfig+0xd0a>
 80055ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	fa93 f2a3 	rbit	r2, r3
 80055d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80055e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	fa93 f2a3 	rbit	r2, r3
 80055fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005600:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	4b9c      	ldr	r3, [pc, #624]	; (8005878 <HAL_RCC_OscConfig+0xf78>)
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800560e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005612:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005616:	6011      	str	r1, [r2, #0]
 8005618:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800561c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	fa92 f1a2 	rbit	r1, r2
 8005626:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800562a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800562e:	6011      	str	r1, [r2, #0]
  return result;
 8005630:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005634:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	fab2 f282 	clz	r2, r2
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	f042 0220 	orr.w	r2, r2, #32
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	f002 021f 	and.w	r2, r2, #31
 800564a:	2101      	movs	r1, #1
 800564c:	fa01 f202 	lsl.w	r2, r1, r2
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d182      	bne.n	800555c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005656:	4b88      	ldr	r3, [pc, #544]	; (8005878 <HAL_RCC_OscConfig+0xf78>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800565e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800566a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800566e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	430b      	orrs	r3, r1
 8005678:	497f      	ldr	r1, [pc, #508]	; (8005878 <HAL_RCC_OscConfig+0xf78>)
 800567a:	4313      	orrs	r3, r2
 800567c:	604b      	str	r3, [r1, #4]
 800567e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005682:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005686:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800568a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005690:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	fa93 f2a3 	rbit	r2, r3
 800569a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056a2:	601a      	str	r2, [r3, #0]
  return result;
 80056a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ae:	fab3 f383 	clz	r3, r3
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	461a      	mov	r2, r3
 80056c0:	2301      	movs	r3, #1
 80056c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c4:	f7fc fa7a 	bl	8001bbc <HAL_GetTick>
 80056c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056cc:	e009      	b.n	80056e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ce:	f7fc fa75 	bl	8001bbc <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e144      	b.n	800596c <HAL_RCC_OscConfig+0x106c>
 80056e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	fa93 f2a3 	rbit	r2, r3
 80056fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005702:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005706:	601a      	str	r2, [r3, #0]
  return result;
 8005708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005710:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005712:	fab3 f383 	clz	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b01      	cmp	r3, #1
 8005724:	d102      	bne.n	800572c <HAL_RCC_OscConfig+0xe2c>
 8005726:	4b54      	ldr	r3, [pc, #336]	; (8005878 <HAL_RCC_OscConfig+0xf78>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	e027      	b.n	800577c <HAL_RCC_OscConfig+0xe7c>
 800572c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005730:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005734:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800573e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	fa93 f2a3 	rbit	r2, r3
 8005748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005756:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800575a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005764:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	fa93 f2a3 	rbit	r2, r3
 800576e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005772:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <HAL_RCC_OscConfig+0xf78>)
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005780:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005784:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005788:	6011      	str	r1, [r2, #0]
 800578a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800578e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	fa92 f1a2 	rbit	r1, r2
 8005798:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800579c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057a0:	6011      	str	r1, [r2, #0]
  return result;
 80057a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	fab2 f282 	clz	r2, r2
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	f042 0220 	orr.w	r2, r2, #32
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	f002 021f 	and.w	r2, r2, #31
 80057bc:	2101      	movs	r1, #1
 80057be:	fa01 f202 	lsl.w	r2, r1, r2
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d082      	beq.n	80056ce <HAL_RCC_OscConfig+0xdce>
 80057c8:	e0cf      	b.n	800596a <HAL_RCC_OscConfig+0x106a>
 80057ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	fa93 f2a3 	rbit	r2, r3
 80057e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80057ee:	601a      	str	r2, [r3, #0]
  return result;
 80057f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80057f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fa:	fab3 f383 	clz	r3, r3
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005804:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	461a      	mov	r2, r3
 800580c:	2300      	movs	r3, #0
 800580e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fc f9d4 	bl	8001bbc <HAL_GetTick>
 8005814:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005818:	e009      	b.n	800582e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581a:	f7fc f9cf 	bl	8001bbc <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e09e      	b.n	800596c <HAL_RCC_OscConfig+0x106c>
 800582e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005832:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005836:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800583a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005840:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	fa93 f2a3 	rbit	r2, r3
 800584a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800584e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005852:	601a      	str	r2, [r3, #0]
  return result;
 8005854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005858:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800585c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d104      	bne.n	800587c <HAL_RCC_OscConfig+0xf7c>
 8005872:	4b01      	ldr	r3, [pc, #4]	; (8005878 <HAL_RCC_OscConfig+0xf78>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	e029      	b.n	80058cc <HAL_RCC_OscConfig+0xfcc>
 8005878:	40021000 	.word	0x40021000
 800587c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005880:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	fa93 f2a3 	rbit	r2, r3
 8005898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800589c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80058aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	fa93 f2a3 	rbit	r2, r3
 80058be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	4b2b      	ldr	r3, [pc, #172]	; (8005978 <HAL_RCC_OscConfig+0x1078>)
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058d0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058d8:	6011      	str	r1, [r2, #0]
 80058da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058de:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	fa92 f1a2 	rbit	r1, r2
 80058e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80058f0:	6011      	str	r1, [r2, #0]
  return result;
 80058f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	fab2 f282 	clz	r2, r2
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	f042 0220 	orr.w	r2, r2, #32
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	f002 021f 	and.w	r2, r2, #31
 800590c:	2101      	movs	r1, #1
 800590e:	fa01 f202 	lsl.w	r2, r1, r2
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d180      	bne.n	800581a <HAL_RCC_OscConfig+0xf1a>
 8005918:	e027      	b.n	800596a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800591a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800591e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e01e      	b.n	800596c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800592e:	4b12      	ldr	r3, [pc, #72]	; (8005978 <HAL_RCC_OscConfig+0x1078>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005936:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800593a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800593e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005942:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	429a      	cmp	r2, r3
 800594c:	d10b      	bne.n	8005966 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800594e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005952:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800595a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005962:	429a      	cmp	r2, r3
 8005964:	d001      	beq.n	800596a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000

0800597c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b09e      	sub	sp, #120	; 0x78
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e162      	b.n	8005c5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005994:	4b90      	ldr	r3, [pc, #576]	; (8005bd8 <HAL_RCC_ClockConfig+0x25c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d910      	bls.n	80059c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b8d      	ldr	r3, [pc, #564]	; (8005bd8 <HAL_RCC_ClockConfig+0x25c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 0207 	bic.w	r2, r3, #7
 80059aa:	498b      	ldr	r1, [pc, #556]	; (8005bd8 <HAL_RCC_ClockConfig+0x25c>)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b89      	ldr	r3, [pc, #548]	; (8005bd8 <HAL_RCC_ClockConfig+0x25c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e14a      	b.n	8005c5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d0:	4b82      	ldr	r3, [pc, #520]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	497f      	ldr	r1, [pc, #508]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80dc 	beq.w	8005ba8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d13c      	bne.n	8005a72 <HAL_RCC_ClockConfig+0xf6>
 80059f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a00:	fa93 f3a3 	rbit	r3, r3
 8005a04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a08:	fab3 f383 	clz	r3, r3
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d102      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xa6>
 8005a1c:	4b6f      	ldr	r3, [pc, #444]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	e00f      	b.n	8005a42 <HAL_RCC_ClockConfig+0xc6>
 8005a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a2a:	fa93 f3a3 	rbit	r3, r3
 8005a2e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a34:	663b      	str	r3, [r7, #96]	; 0x60
 8005a36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a38:	fa93 f3a3 	rbit	r3, r3
 8005a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a3e:	4b67      	ldr	r3, [pc, #412]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a46:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a4a:	fa92 f2a2 	rbit	r2, r2
 8005a4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a52:	fab2 f282 	clz	r2, r2
 8005a56:	b2d2      	uxtb	r2, r2
 8005a58:	f042 0220 	orr.w	r2, r2, #32
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	f002 021f 	and.w	r2, r2, #31
 8005a62:	2101      	movs	r1, #1
 8005a64:	fa01 f202 	lsl.w	r2, r1, r2
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d17b      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e0f3      	b.n	8005c5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d13c      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x178>
 8005a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a82:	fa93 f3a3 	rbit	r3, r3
 8005a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a8a:	fab3 f383 	clz	r3, r3
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f043 0301 	orr.w	r3, r3, #1
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d102      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0x128>
 8005a9e:	4b4f      	ldr	r3, [pc, #316]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	e00f      	b.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
 8005aa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aa8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aac:	fa93 f3a3 	rbit	r3, r3
 8005ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aba:	fa93 f3a3 	rbit	r3, r3
 8005abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac0:	4b46      	ldr	r3, [pc, #280]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ac8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005acc:	fa92 f2a2 	rbit	r2, r2
 8005ad0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ad4:	fab2 f282 	clz	r2, r2
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	f042 0220 	orr.w	r2, r2, #32
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	f002 021f 	and.w	r2, r2, #31
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d13a      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0b2      	b.n	8005c5a <HAL_RCC_ClockConfig+0x2de>
 8005af4:	2302      	movs	r3, #2
 8005af6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	fa93 f3a3 	rbit	r3, r3
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b02:	fab3 f383 	clz	r3, r3
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f043 0301 	orr.w	r3, r3, #1
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d102      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x1a0>
 8005b16:	4b31      	ldr	r3, [pc, #196]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	e00d      	b.n	8005b38 <HAL_RCC_ClockConfig+0x1bc>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	fa93 f3a3 	rbit	r3, r3
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
 8005b28:	2302      	movs	r3, #2
 8005b2a:	623b      	str	r3, [r7, #32]
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	fa93 f3a3 	rbit	r3, r3
 8005b32:	61fb      	str	r3, [r7, #28]
 8005b34:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	2202      	movs	r2, #2
 8005b3a:	61ba      	str	r2, [r7, #24]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	fa92 f2a2 	rbit	r2, r2
 8005b42:	617a      	str	r2, [r7, #20]
  return result;
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	fab2 f282 	clz	r2, r2
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	f042 0220 	orr.w	r2, r2, #32
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	f002 021f 	and.w	r2, r2, #31
 8005b56:	2101      	movs	r1, #1
 8005b58:	fa01 f202 	lsl.w	r2, r1, r2
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e079      	b.n	8005c5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	491a      	ldr	r1, [pc, #104]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b78:	f7fc f820 	bl	8001bbc <HAL_GetTick>
 8005b7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fc f81c 	bl	8001bbc <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e061      	b.n	8005c5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <HAL_RCC_ClockConfig+0x260>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 020c 	and.w	r2, r3, #12
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1eb      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <HAL_RCC_ClockConfig+0x25c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d214      	bcs.n	8005be0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb6:	4b08      	ldr	r3, [pc, #32]	; (8005bd8 <HAL_RCC_ClockConfig+0x25c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f023 0207 	bic.w	r2, r3, #7
 8005bbe:	4906      	ldr	r1, [pc, #24]	; (8005bd8 <HAL_RCC_ClockConfig+0x25c>)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc6:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <HAL_RCC_ClockConfig+0x25c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d005      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e040      	b.n	8005c5a <HAL_RCC_ClockConfig+0x2de>
 8005bd8:	40022000 	.word	0x40022000
 8005bdc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bec:	4b1d      	ldr	r3, [pc, #116]	; (8005c64 <HAL_RCC_ClockConfig+0x2e8>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	491a      	ldr	r1, [pc, #104]	; (8005c64 <HAL_RCC_ClockConfig+0x2e8>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c0a:	4b16      	ldr	r3, [pc, #88]	; (8005c64 <HAL_RCC_ClockConfig+0x2e8>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4912      	ldr	r1, [pc, #72]	; (8005c64 <HAL_RCC_ClockConfig+0x2e8>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c1e:	f000 f829 	bl	8005c74 <HAL_RCC_GetSysClockFreq>
 8005c22:	4601      	mov	r1, r0
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <HAL_RCC_ClockConfig+0x2e8>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c2c:	22f0      	movs	r2, #240	; 0xf0
 8005c2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	fa92 f2a2 	rbit	r2, r2
 8005c36:	60fa      	str	r2, [r7, #12]
  return result;
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	fab2 f282 	clz	r2, r2
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	40d3      	lsrs	r3, r2
 8005c42:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <HAL_RCC_ClockConfig+0x2ec>)
 8005c44:	5cd3      	ldrb	r3, [r2, r3]
 8005c46:	fa21 f303 	lsr.w	r3, r1, r3
 8005c4a:	4a08      	ldr	r2, [pc, #32]	; (8005c6c <HAL_RCC_ClockConfig+0x2f0>)
 8005c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c4e:	4b08      	ldr	r3, [pc, #32]	; (8005c70 <HAL_RCC_ClockConfig+0x2f4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fb ff6e 	bl	8001b34 <HAL_InitTick>
  
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3778      	adds	r7, #120	; 0x78
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40021000 	.word	0x40021000
 8005c68:	0800670c 	.word	0x0800670c
 8005c6c:	20000000 	.word	0x20000000
 8005c70:	20000004 	.word	0x20000004

08005c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b08b      	sub	sp, #44	; 0x2c
 8005c78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	2300      	movs	r3, #0
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
 8005c86:	2300      	movs	r3, #0
 8005c88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005c8e:	4b29      	ldr	r3, [pc, #164]	; (8005d34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d002      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x30>
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d003      	beq.n	8005caa <HAL_RCC_GetSysClockFreq+0x36>
 8005ca2:	e03c      	b.n	8005d1e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ca4:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ca6:	623b      	str	r3, [r7, #32]
      break;
 8005ca8:	e03c      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005cb0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005cb4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	fa92 f2a2 	rbit	r2, r2
 8005cbc:	607a      	str	r2, [r7, #4]
  return result;
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	fab2 f282 	clz	r2, r2
 8005cc4:	b2d2      	uxtb	r2, r2
 8005cc6:	40d3      	lsrs	r3, r2
 8005cc8:	4a1c      	ldr	r2, [pc, #112]	; (8005d3c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cca:	5cd3      	ldrb	r3, [r2, r3]
 8005ccc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005cce:	4b19      	ldr	r3, [pc, #100]	; (8005d34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	220f      	movs	r2, #15
 8005cd8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	fa92 f2a2 	rbit	r2, r2
 8005ce0:	60fa      	str	r2, [r7, #12]
  return result;
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	fab2 f282 	clz	r2, r2
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	40d3      	lsrs	r3, r2
 8005cec:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cee:	5cd3      	ldrb	r3, [r2, r3]
 8005cf0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005cfc:	4a0e      	ldr	r2, [pc, #56]	; (8005d38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0c:	e004      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	623b      	str	r3, [r7, #32]
      break;
 8005d1c:	e002      	b.n	8005d24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d20:	623b      	str	r3, [r7, #32]
      break;
 8005d22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d24:	6a3b      	ldr	r3, [r7, #32]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	372c      	adds	r7, #44	; 0x2c
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40021000 	.word	0x40021000
 8005d38:	00f42400 	.word	0x00f42400
 8005d3c:	0800671c 	.word	0x0800671c
 8005d40:	0800672c 	.word	0x0800672c
 8005d44:	003d0900 	.word	0x003d0900
 8005d48:	007a1200 	.word	0x007a1200

08005d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e049      	b.n	8005df2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fb fbf4 	bl	8001560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f000 fab0 	bl	80062f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d001      	beq.n	8005e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e04a      	b.n	8005eaa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a21      	ldr	r2, [pc, #132]	; (8005eb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d018      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3e:	d013      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1d      	ldr	r2, [pc, #116]	; (8005ebc <HAL_TIM_Base_Start_IT+0xc0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00e      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d009      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1a      	ldr	r2, [pc, #104]	; (8005ec4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_TIM_Base_Start_IT+0x6c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a19      	ldr	r2, [pc, #100]	; (8005ec8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d115      	bne.n	8005e94 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	4b17      	ldr	r3, [pc, #92]	; (8005ecc <HAL_TIM_Base_Start_IT+0xd0>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d015      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0xaa>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e80:	d011      	beq.n	8005ea6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e92:	e008      	b.n	8005ea6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e000      	b.n	8005ea8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40000800 	.word	0x40000800
 8005ec4:	40013400 	.word	0x40013400
 8005ec8:	40014000 	.word	0x40014000
 8005ecc:	00010007 	.word	0x00010007

08005ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d122      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d11b      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0202 	mvn.w	r2, #2
 8005efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f9ce 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f9c0 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f9d1 	bl	80062c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d122      	bne.n	8005f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d11b      	bne.n	8005f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0204 	mvn.w	r2, #4
 8005f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f9a4 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8005f6c:	e005      	b.n	8005f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f996 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f9a7 	bl	80062c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d122      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0208 	mvn.w	r2, #8
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f97a 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f96c 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f97d 	bl	80062c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d122      	bne.n	8006028 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b10      	cmp	r3, #16
 8005fee:	d11b      	bne.n	8006028 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0210 	mvn.w	r2, #16
 8005ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f950 	bl	80062b4 <HAL_TIM_IC_CaptureCallback>
 8006014:	e005      	b.n	8006022 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f942 	bl	80062a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f953 	bl	80062c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b01      	cmp	r3, #1
 8006034:	d10e      	bne.n	8006054 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b01      	cmp	r3, #1
 8006042:	d107      	bne.n	8006054 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0201 	mvn.w	r2, #1
 800604c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fb f928 	bl	80012a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d10e      	bne.n	8006080 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	d107      	bne.n	8006080 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 faec 	bl	8006658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608e:	d10e      	bne.n	80060ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b80      	cmp	r3, #128	; 0x80
 800609c:	d107      	bne.n	80060ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fadf 	bl	800666c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d10e      	bne.n	80060da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d107      	bne.n	80060da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f901 	bl	80062dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d10e      	bne.n	8006106 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d107      	bne.n	8006106 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f06f 0220 	mvn.w	r2, #32
 80060fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fa9f 	bl	8006644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_TIM_ConfigClockSource+0x1c>
 8006126:	2302      	movs	r3, #2
 8006128:	e0b6      	b.n	8006298 <HAL_TIM_ConfigClockSource+0x18a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006148:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800614c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006154:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006166:	d03e      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0xd8>
 8006168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800616c:	f200 8087 	bhi.w	800627e <HAL_TIM_ConfigClockSource+0x170>
 8006170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006174:	f000 8086 	beq.w	8006284 <HAL_TIM_ConfigClockSource+0x176>
 8006178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800617c:	d87f      	bhi.n	800627e <HAL_TIM_ConfigClockSource+0x170>
 800617e:	2b70      	cmp	r3, #112	; 0x70
 8006180:	d01a      	beq.n	80061b8 <HAL_TIM_ConfigClockSource+0xaa>
 8006182:	2b70      	cmp	r3, #112	; 0x70
 8006184:	d87b      	bhi.n	800627e <HAL_TIM_ConfigClockSource+0x170>
 8006186:	2b60      	cmp	r3, #96	; 0x60
 8006188:	d050      	beq.n	800622c <HAL_TIM_ConfigClockSource+0x11e>
 800618a:	2b60      	cmp	r3, #96	; 0x60
 800618c:	d877      	bhi.n	800627e <HAL_TIM_ConfigClockSource+0x170>
 800618e:	2b50      	cmp	r3, #80	; 0x50
 8006190:	d03c      	beq.n	800620c <HAL_TIM_ConfigClockSource+0xfe>
 8006192:	2b50      	cmp	r3, #80	; 0x50
 8006194:	d873      	bhi.n	800627e <HAL_TIM_ConfigClockSource+0x170>
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d058      	beq.n	800624c <HAL_TIM_ConfigClockSource+0x13e>
 800619a:	2b40      	cmp	r3, #64	; 0x40
 800619c:	d86f      	bhi.n	800627e <HAL_TIM_ConfigClockSource+0x170>
 800619e:	2b30      	cmp	r3, #48	; 0x30
 80061a0:	d064      	beq.n	800626c <HAL_TIM_ConfigClockSource+0x15e>
 80061a2:	2b30      	cmp	r3, #48	; 0x30
 80061a4:	d86b      	bhi.n	800627e <HAL_TIM_ConfigClockSource+0x170>
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d060      	beq.n	800626c <HAL_TIM_ConfigClockSource+0x15e>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d867      	bhi.n	800627e <HAL_TIM_ConfigClockSource+0x170>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d05c      	beq.n	800626c <HAL_TIM_ConfigClockSource+0x15e>
 80061b2:	2b10      	cmp	r3, #16
 80061b4:	d05a      	beq.n	800626c <HAL_TIM_ConfigClockSource+0x15e>
 80061b6:	e062      	b.n	800627e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061c8:	f000 f99c 	bl	8006504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	609a      	str	r2, [r3, #8]
      break;
 80061e4:	e04f      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061f6:	f000 f985 	bl	8006504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006208:	609a      	str	r2, [r3, #8]
      break;
 800620a:	e03c      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006218:	461a      	mov	r2, r3
 800621a:	f000 f8f9 	bl	8006410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2150      	movs	r1, #80	; 0x50
 8006224:	4618      	mov	r0, r3
 8006226:	f000 f952 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 800622a:	e02c      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006238:	461a      	mov	r2, r3
 800623a:	f000 f918 	bl	800646e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2160      	movs	r1, #96	; 0x60
 8006244:	4618      	mov	r0, r3
 8006246:	f000 f942 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 800624a:	e01c      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006258:	461a      	mov	r2, r3
 800625a:	f000 f8d9 	bl	8006410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2140      	movs	r1, #64	; 0x40
 8006264:	4618      	mov	r0, r3
 8006266:	f000 f932 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 800626a:	e00c      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f000 f929 	bl	80064ce <TIM_ITRx_SetConfig>
      break;
 800627c:	e003      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	73fb      	strb	r3, [r7, #15]
      break;
 8006282:	e000      	b.n	8006286 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006284:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006296:	7bfb      	ldrb	r3, [r7, #15]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a3c      	ldr	r2, [pc, #240]	; (80063f4 <TIM_Base_SetConfig+0x104>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00f      	beq.n	8006328 <TIM_Base_SetConfig+0x38>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630e:	d00b      	beq.n	8006328 <TIM_Base_SetConfig+0x38>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a39      	ldr	r2, [pc, #228]	; (80063f8 <TIM_Base_SetConfig+0x108>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <TIM_Base_SetConfig+0x38>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a38      	ldr	r2, [pc, #224]	; (80063fc <TIM_Base_SetConfig+0x10c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <TIM_Base_SetConfig+0x38>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a37      	ldr	r2, [pc, #220]	; (8006400 <TIM_Base_SetConfig+0x110>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <TIM_Base_SetConfig+0x104>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01b      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006348:	d017      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a2a      	ldr	r2, [pc, #168]	; (80063f8 <TIM_Base_SetConfig+0x108>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a29      	ldr	r2, [pc, #164]	; (80063fc <TIM_Base_SetConfig+0x10c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00f      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a28      	ldr	r2, [pc, #160]	; (8006400 <TIM_Base_SetConfig+0x110>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00b      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a27      	ldr	r2, [pc, #156]	; (8006404 <TIM_Base_SetConfig+0x114>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d007      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a26      	ldr	r2, [pc, #152]	; (8006408 <TIM_Base_SetConfig+0x118>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d003      	beq.n	800637a <TIM_Base_SetConfig+0x8a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a25      	ldr	r2, [pc, #148]	; (800640c <TIM_Base_SetConfig+0x11c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d108      	bne.n	800638c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	4313      	orrs	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a10      	ldr	r2, [pc, #64]	; (80063f4 <TIM_Base_SetConfig+0x104>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00f      	beq.n	80063d8 <TIM_Base_SetConfig+0xe8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a11      	ldr	r2, [pc, #68]	; (8006400 <TIM_Base_SetConfig+0x110>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00b      	beq.n	80063d8 <TIM_Base_SetConfig+0xe8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a10      	ldr	r2, [pc, #64]	; (8006404 <TIM_Base_SetConfig+0x114>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d007      	beq.n	80063d8 <TIM_Base_SetConfig+0xe8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a0f      	ldr	r2, [pc, #60]	; (8006408 <TIM_Base_SetConfig+0x118>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d003      	beq.n	80063d8 <TIM_Base_SetConfig+0xe8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a0e      	ldr	r2, [pc, #56]	; (800640c <TIM_Base_SetConfig+0x11c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d103      	bne.n	80063e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	615a      	str	r2, [r3, #20]
}
 80063e6:	bf00      	nop
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40012c00 	.word	0x40012c00
 80063f8:	40000400 	.word	0x40000400
 80063fc:	40000800 	.word	0x40000800
 8006400:	40013400 	.word	0x40013400
 8006404:	40014000 	.word	0x40014000
 8006408:	40014400 	.word	0x40014400
 800640c:	40014800 	.word	0x40014800

08006410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f023 0201 	bic.w	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800643a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f023 030a 	bic.w	r3, r3, #10
 800644c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800646e:	b480      	push	{r7}
 8006470:	b087      	sub	sp, #28
 8006472:	af00      	add	r7, sp, #0
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0210 	bic.w	r2, r3, #16
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	031b      	lsls	r3, r3, #12
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b085      	sub	sp, #20
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f043 0307 	orr.w	r3, r3, #7
 80064f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	609a      	str	r2, [r3, #8]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800651e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	021a      	lsls	r2, r3, #8
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	431a      	orrs	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4313      	orrs	r3, r2
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	609a      	str	r2, [r3, #8]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006558:	2302      	movs	r3, #2
 800655a:	e063      	b.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a2b      	ldr	r2, [pc, #172]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d004      	beq.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a2a      	ldr	r2, [pc, #168]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d108      	bne.n	80065a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006596:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d018      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ce:	d013      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a18      	ldr	r2, [pc, #96]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d009      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a12      	ldr	r2, [pc, #72]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a13      	ldr	r2, [pc, #76]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d10c      	bne.n	8006612 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40013400 	.word	0x40013400
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800
 8006640:	40014000 	.word	0x40014000

08006644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <memset>:
 8006680:	4402      	add	r2, r0
 8006682:	4603      	mov	r3, r0
 8006684:	4293      	cmp	r3, r2
 8006686:	d100      	bne.n	800668a <memset+0xa>
 8006688:	4770      	bx	lr
 800668a:	f803 1b01 	strb.w	r1, [r3], #1
 800668e:	e7f9      	b.n	8006684 <memset+0x4>

08006690 <__libc_init_array>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	4d0d      	ldr	r5, [pc, #52]	; (80066c8 <__libc_init_array+0x38>)
 8006694:	4c0d      	ldr	r4, [pc, #52]	; (80066cc <__libc_init_array+0x3c>)
 8006696:	1b64      	subs	r4, r4, r5
 8006698:	10a4      	asrs	r4, r4, #2
 800669a:	2600      	movs	r6, #0
 800669c:	42a6      	cmp	r6, r4
 800669e:	d109      	bne.n	80066b4 <__libc_init_array+0x24>
 80066a0:	4d0b      	ldr	r5, [pc, #44]	; (80066d0 <__libc_init_array+0x40>)
 80066a2:	4c0c      	ldr	r4, [pc, #48]	; (80066d4 <__libc_init_array+0x44>)
 80066a4:	f000 f826 	bl	80066f4 <_init>
 80066a8:	1b64      	subs	r4, r4, r5
 80066aa:	10a4      	asrs	r4, r4, #2
 80066ac:	2600      	movs	r6, #0
 80066ae:	42a6      	cmp	r6, r4
 80066b0:	d105      	bne.n	80066be <__libc_init_array+0x2e>
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b8:	4798      	blx	r3
 80066ba:	3601      	adds	r6, #1
 80066bc:	e7ee      	b.n	800669c <__libc_init_array+0xc>
 80066be:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c2:	4798      	blx	r3
 80066c4:	3601      	adds	r6, #1
 80066c6:	e7f2      	b.n	80066ae <__libc_init_array+0x1e>
 80066c8:	0800673c 	.word	0x0800673c
 80066cc:	0800673c 	.word	0x0800673c
 80066d0:	0800673c 	.word	0x0800673c
 80066d4:	08006740 	.word	0x08006740

080066d8 <memcpy>:
 80066d8:	440a      	add	r2, r1
 80066da:	4291      	cmp	r1, r2
 80066dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80066e0:	d100      	bne.n	80066e4 <memcpy+0xc>
 80066e2:	4770      	bx	lr
 80066e4:	b510      	push	{r4, lr}
 80066e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ee:	4291      	cmp	r1, r2
 80066f0:	d1f9      	bne.n	80066e6 <memcpy+0xe>
 80066f2:	bd10      	pop	{r4, pc}

080066f4 <_init>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

08006700 <_fini>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr
