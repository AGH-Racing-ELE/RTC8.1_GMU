
GMU_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080060bc  080060bc  000160bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060ec  080060ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080060ec  080060ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060ec  080060ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080060f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000470  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000047c  2000047c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011113  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000352b  00000000  00000000  00031192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001120  00000000  00000000  000346c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cf7  00000000  00000000  000357e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fbfc  00000000  00000000  000364d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000179f1  00000000  00000000  000560d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bebb0  00000000  00000000  0006dac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004578  00000000  00000000  0012c674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00130bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080060a4 	.word	0x080060a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080060a4 	.word	0x080060a4

080001c8 <ADC_Init>:
#include "ADC_Handler.h"

uint16_t adcValue;

void ADC_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_OPAMP_Start(&hopamp1);
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <ADC_Init+0x1c>)
 80001ce:	f004 f85d 	bl	800428c <HAL_OPAMP_Start>
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 80001d2:	2100      	movs	r1, #0
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <ADC_Init+0x20>)
 80001d6:	f002 fa2f 	bl	8002638 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80001da:	4803      	ldr	r0, [pc, #12]	; (80001e8 <ADC_Init+0x20>)
 80001dc:	f001 fdf8 	bl	8001dd0 <HAL_ADC_Start_IT>
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}
 80001e4:	200001a4 	.word	0x200001a4
 80001e8:	2000012c 	.word	0x2000012c

080001ec <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80001fc:	d106      	bne.n	800020c <HAL_ADC_ConvCpltCallback+0x20>
	{
		adcValue = HAL_ADC_GetValue(hadc);
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f001 ff26 	bl	8002050 <HAL_ADC_GetValue>
 8000204:	4603      	mov	r3, r0
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b02      	ldr	r3, [pc, #8]	; (8000214 <HAL_ADC_ConvCpltCallback+0x28>)
 800020a:	801a      	strh	r2, [r3, #0]
	}
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000028 	.word	0x20000028

08000218 <getADCValue>:

uint16_t getADCValue(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	return adcValue;
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <getADCValue+0x14>)
 800021e:	881b      	ldrh	r3, [r3, #0]
}
 8000220:	4618      	mov	r0, r3
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000028 	.word	0x20000028

08000230 <AppInit>:

Gearbox_t gearbox;
static uint8_t clutch_data;

void AppInit(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	gearboxInit(&gearbox);
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <AppInit+0x18>)
 8000236:	f000 f9d7 	bl	80005e8 <gearboxInit>
	ADC_Init();
 800023a:	f7ff ffc5 	bl	80001c8 <ADC_Init>
	CAN_Handler_Init();
 800023e:	f000 f8b5 	bl	80003ac <CAN_Handler_Init>
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	2000002c 	.word	0x2000002c

0800024c <canRxProcess>:

void canRxProcess()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	if(CAN_Handler_IsGearUpCommanded())
 8000250:	f000 f8e2 	bl	8000418 <CAN_Handler_IsGearUpCommanded>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d006      	beq.n	8000268 <canRxProcess+0x1c>
	{
		disableAutoshift(&gearbox);
 800025a:	481a      	ldr	r0, [pc, #104]	; (80002c4 <canRxProcess+0x78>)
 800025c:	f000 fd1b 	bl	8000c96 <disableAutoshift>
		startUpshift(&gearbox);
 8000260:	4818      	ldr	r0, [pc, #96]	; (80002c4 <canRxProcess+0x78>)
 8000262:	f000 fcc3 	bl	8000bec <startUpshift>
		return;
 8000266:	e02b      	b.n	80002c0 <canRxProcess+0x74>
	}
	if(CAN_Handler_IsGearDownCommanded())
 8000268:	f000 f8f2 	bl	8000450 <CAN_Handler_IsGearDownCommanded>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d006      	beq.n	8000280 <canRxProcess+0x34>
	{
		disableAutoshift(&gearbox);
 8000272:	4814      	ldr	r0, [pc, #80]	; (80002c4 <canRxProcess+0x78>)
 8000274:	f000 fd0f 	bl	8000c96 <disableAutoshift>
		startDownshift(&gearbox);
 8000278:	4812      	ldr	r0, [pc, #72]	; (80002c4 <canRxProcess+0x78>)
 800027a:	f000 fcc8 	bl	8000c0e <startDownshift>
		return;
 800027e:	e01f      	b.n	80002c0 <canRxProcess+0x74>
	}
	if(CAN_Handler_IsClutchCommanded(&clutch_data))
 8000280:	4811      	ldr	r0, [pc, #68]	; (80002c8 <canRxProcess+0x7c>)
 8000282:	f000 f903 	bl	800048c <CAN_Handler_IsClutchCommanded>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d00f      	beq.n	80002ac <canRxProcess+0x60>
	{
		if(clutch_data == 255)
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <canRxProcess+0x7c>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2bff      	cmp	r3, #255	; 0xff
 8000292:	d103      	bne.n	800029c <canRxProcess+0x50>
		{
			clutch(true);
 8000294:	2001      	movs	r0, #1
 8000296:	f000 fccb 	bl	8000c30 <clutch>
		}
		else if(clutch_data == 0)
		{
			clutch(false);
		}
		return;
 800029a:	e010      	b.n	80002be <canRxProcess+0x72>
		else if(clutch_data == 0)
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <canRxProcess+0x7c>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d10c      	bne.n	80002be <canRxProcess+0x72>
			clutch(false);
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fcc3 	bl	8000c30 <clutch>
		return;
 80002aa:	e008      	b.n	80002be <canRxProcess+0x72>
	}
	if(CAN_Handler_IsAutoshiftCommanded())
 80002ac:	f000 f90e 	bl	80004cc <CAN_Handler_IsAutoshiftCommanded>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d004      	beq.n	80002c0 <canRxProcess+0x74>
	{
		enableAutoshift(&gearbox);
 80002b6:	4803      	ldr	r0, [pc, #12]	; (80002c4 <canRxProcess+0x78>)
 80002b8:	f000 fce0 	bl	8000c7c <enableAutoshift>
		return;
 80002bc:	e000      	b.n	80002c0 <canRxProcess+0x74>
		return;
 80002be:	bf00      	nop
	}

}
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	2000002c 	.word	0x2000002c
 80002c8:	20000058 	.word	0x20000058

080002cc <sendCANFrame>:

void sendCANFrame(void)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af04      	add	r7, sp, #16

	CAN_Handler_SendGmu1Frame(gearbox.actual_gear, clutch_data, gearbox.gearPosADC, gearbox._state, 0, 0, gearbox.gear_cut);
 80002d2:	4b0e      	ldr	r3, [pc, #56]	; (800030c <sendCANFrame+0x40>)
 80002d4:	7e98      	ldrb	r0, [r3, #26]
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <sendCANFrame+0x44>)
 80002d8:	7819      	ldrb	r1, [r3, #0]
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <sendCANFrame+0x40>)
 80002dc:	881a      	ldrh	r2, [r3, #0]
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <sendCANFrame+0x40>)
 80002e0:	7e1c      	ldrb	r4, [r3, #24]
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <sendCANFrame+0x40>)
 80002e4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80002e8:	9302      	str	r3, [sp, #8]
 80002ea:	2300      	movs	r3, #0
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2300      	movs	r3, #0
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	4623      	mov	r3, r4
 80002f4:	f000 f902 	bl	80004fc <CAN_Handler_SendGmu1Frame>
	CAN_Handler_SendGmu2Frame(1, 2, 3, 4);
 80002f8:	2304      	movs	r3, #4
 80002fa:	2203      	movs	r2, #3
 80002fc:	2102      	movs	r1, #2
 80002fe:	2001      	movs	r0, #1
 8000300:	f000 f932 	bl	8000568 <CAN_Handler_SendGmu2Frame>
}
 8000304:	bf00      	nop
 8000306:	3704      	adds	r7, #4
 8000308:	46bd      	mov	sp, r7
 800030a:	bd90      	pop	{r4, r7, pc}
 800030c:	2000002c 	.word	0x2000002c
 8000310:	20000058 	.word	0x20000058

08000314 <statusLED>:

void statusLED(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	4802      	ldr	r0, [pc, #8]	; (8000324 <statusLED+0x10>)
 800031c:	f003 fef8 	bl	8004110 <HAL_GPIO_TogglePin>
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	48000400 	.word	0x48000400

08000328 <AppProcess>:
void AppProcess(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
	uint32_t CANRXtick = HAL_GetTick();
 800032e:	f001 fb4f 	bl	80019d0 <HAL_GetTick>
 8000332:	60f8      	str	r0, [r7, #12]
	uint32_t CANSendFrameTick = HAL_GetTick();
 8000334:	f001 fb4c 	bl	80019d0 <HAL_GetTick>
 8000338:	60b8      	str	r0, [r7, #8]
	uint32_t StatusLEDTick = HAL_GetTick();
 800033a:	f001 fb49 	bl	80019d0 <HAL_GetTick>
 800033e:	6078      	str	r0, [r7, #4]

	while(1)
	{

		updateGear(&gearbox);
 8000340:	4819      	ldr	r0, [pc, #100]	; (80003a8 <AppProcess+0x80>)
 8000342:	f000 f982 	bl	800064a <updateGear>
		processCallback(&gearbox);
 8000346:	4818      	ldr	r0, [pc, #96]	; (80003a8 <AppProcess+0x80>)
 8000348:	f000 f9ec 	bl	8000724 <processCallback>
		if(gearbox._autoshiftState == AutoshiftEnable)
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <AppProcess+0x80>)
 800034e:	7e5b      	ldrb	r3, [r3, #25]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d102      	bne.n	800035a <AppProcess+0x32>
		{
			autoshiftProcess(&gearbox);
 8000354:	4814      	ldr	r0, [pc, #80]	; (80003a8 <AppProcess+0x80>)
 8000356:	f000 fcab 	bl	8000cb0 <autoshiftProcess>
		}
		if((HAL_GetTick() - CANRXtick) > 1)
 800035a:	f001 fb39 	bl	80019d0 <HAL_GetTick>
 800035e:	4602      	mov	r2, r0
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	1ad3      	subs	r3, r2, r3
 8000364:	2b01      	cmp	r3, #1
 8000366:	d904      	bls.n	8000372 <AppProcess+0x4a>
		{
			canRxProcess();
 8000368:	f7ff ff70 	bl	800024c <canRxProcess>
			CANRXtick = HAL_GetTick();
 800036c:	f001 fb30 	bl	80019d0 <HAL_GetTick>
 8000370:	60f8      	str	r0, [r7, #12]
		}
		if((HAL_GetTick() - CANSendFrameTick) > 2)
 8000372:	f001 fb2d 	bl	80019d0 <HAL_GetTick>
 8000376:	4602      	mov	r2, r0
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	1ad3      	subs	r3, r2, r3
 800037c:	2b02      	cmp	r3, #2
 800037e:	d904      	bls.n	800038a <AppProcess+0x62>
		{
			sendCANFrame();
 8000380:	f7ff ffa4 	bl	80002cc <sendCANFrame>
			CANSendFrameTick = HAL_GetTick();
 8000384:	f001 fb24 	bl	80019d0 <HAL_GetTick>
 8000388:	60b8      	str	r0, [r7, #8]
		}
		if((HAL_GetTick() - StatusLEDTick) > 1000)
 800038a:	f001 fb21 	bl	80019d0 <HAL_GetTick>
 800038e:	4602      	mov	r2, r0
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	1ad3      	subs	r3, r2, r3
 8000394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000398:	d9d2      	bls.n	8000340 <AppProcess+0x18>
		{
			statusLED();
 800039a:	f7ff ffbb 	bl	8000314 <statusLED>
			StatusLEDTick = HAL_GetTick();
 800039e:	f001 fb17 	bl	80019d0 <HAL_GetTick>
 80003a2:	6078      	str	r0, [r7, #4]
		updateGear(&gearbox);
 80003a4:	e7cc      	b.n	8000340 <AppProcess+0x18>
 80003a6:	bf00      	nop
 80003a8:	2000002c 	.word	0x2000002c

080003ac <CAN_Handler_Init>:

struct can_frame cf_gear_up, cf_gear_down,cf_clutch, cf_autoshift;
struct can_frame cf_gmu1, cf_gmu2;


void CAN_Handler_Init(){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

	CAN_Init();
 80003b0:	f001 f8c4 	bl	800153c <CAN_Init>

	CAN_InitFrame(&cf_gear_up, 0x000, 0, 1);
 80003b4:	2301      	movs	r3, #1
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	4811      	ldr	r0, [pc, #68]	; (8000400 <CAN_Handler_Init+0x54>)
 80003bc:	f001 f8ca 	bl	8001554 <CAN_InitFrame>
	CAN_InitFrame(&cf_gear_down, 0x001, 0, 1);
 80003c0:	2301      	movs	r3, #1
 80003c2:	2200      	movs	r2, #0
 80003c4:	2101      	movs	r1, #1
 80003c6:	480f      	ldr	r0, [pc, #60]	; (8000404 <CAN_Handler_Init+0x58>)
 80003c8:	f001 f8c4 	bl	8001554 <CAN_InitFrame>
	CAN_InitFrame(&cf_clutch, 0x002, 0, 1);
 80003cc:	2301      	movs	r3, #1
 80003ce:	2200      	movs	r2, #0
 80003d0:	2102      	movs	r1, #2
 80003d2:	480d      	ldr	r0, [pc, #52]	; (8000408 <CAN_Handler_Init+0x5c>)
 80003d4:	f001 f8be 	bl	8001554 <CAN_InitFrame>
	CAN_InitFrame(&cf_autoshift, 0x003, 0, 1);
 80003d8:	2301      	movs	r3, #1
 80003da:	2200      	movs	r2, #0
 80003dc:	2103      	movs	r1, #3
 80003de:	480b      	ldr	r0, [pc, #44]	; (800040c <CAN_Handler_Init+0x60>)
 80003e0:	f001 f8b8 	bl	8001554 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu1, 0x080, 10, 8);
 80003e4:	2308      	movs	r3, #8
 80003e6:	220a      	movs	r2, #10
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	4809      	ldr	r0, [pc, #36]	; (8000410 <CAN_Handler_Init+0x64>)
 80003ec:	f001 f8b2 	bl	8001554 <CAN_InitFrame>
	CAN_InitFrame(&cf_gmu2, 0x081, 100, 8);
 80003f0:	2308      	movs	r3, #8
 80003f2:	2264      	movs	r2, #100	; 0x64
 80003f4:	2181      	movs	r1, #129	; 0x81
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <CAN_Handler_Init+0x68>)
 80003f8:	f001 f8ac 	bl	8001554 <CAN_InitFrame>

}
 80003fc:	bf00      	nop
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000005c 	.word	0x2000005c
 8000404:	2000007c 	.word	0x2000007c
 8000408:	2000009c 	.word	0x2000009c
 800040c:	200000bc 	.word	0x200000bc
 8000410:	200000dc 	.word	0x200000dc
 8000414:	200000fc 	.word	0x200000fc

08000418 <CAN_Handler_IsGearUpCommanded>:

uint8_t CAN_Handler_IsGearUpCommanded(){
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

	static uint32_t last_tick = 0;

	if(cf_gear_up.tick_ms != last_tick && cf_gear_up.core.data[0] == 255){
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <CAN_Handler_IsGearUpCommanded+0x30>)
 800041e:	699a      	ldr	r2, [r3, #24]
 8000420:	4b0a      	ldr	r3, [pc, #40]	; (800044c <CAN_Handler_IsGearUpCommanded+0x34>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	429a      	cmp	r2, r3
 8000426:	d009      	beq.n	800043c <CAN_Handler_IsGearUpCommanded+0x24>
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <CAN_Handler_IsGearUpCommanded+0x30>)
 800042a:	7b1b      	ldrb	r3, [r3, #12]
 800042c:	2bff      	cmp	r3, #255	; 0xff
 800042e:	d105      	bne.n	800043c <CAN_Handler_IsGearUpCommanded+0x24>
		last_tick = cf_gear_up.tick_ms;
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <CAN_Handler_IsGearUpCommanded+0x30>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a05      	ldr	r2, [pc, #20]	; (800044c <CAN_Handler_IsGearUpCommanded+0x34>)
 8000436:	6013      	str	r3, [r2, #0]
		return 1;
 8000438:	2301      	movs	r3, #1
 800043a:	e000      	b.n	800043e <CAN_Handler_IsGearUpCommanded+0x26>
	}
	else{
		return 0;
 800043c:	2300      	movs	r3, #0
	}


}
 800043e:	4618      	mov	r0, r3
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	2000005c 	.word	0x2000005c
 800044c:	2000011c 	.word	0x2000011c

08000450 <CAN_Handler_IsGearDownCommanded>:

uint8_t CAN_Handler_IsGearDownCommanded(){
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

	static uint32_t last_tick = 0;

	if(cf_gear_up.tick_ms != last_tick && cf_gear_down.core.data[0] == 255){
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <CAN_Handler_IsGearDownCommanded+0x30>)
 8000456:	699a      	ldr	r2, [r3, #24]
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <CAN_Handler_IsGearDownCommanded+0x34>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	429a      	cmp	r2, r3
 800045e:	d009      	beq.n	8000474 <CAN_Handler_IsGearDownCommanded+0x24>
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <CAN_Handler_IsGearDownCommanded+0x38>)
 8000462:	7b1b      	ldrb	r3, [r3, #12]
 8000464:	2bff      	cmp	r3, #255	; 0xff
 8000466:	d105      	bne.n	8000474 <CAN_Handler_IsGearDownCommanded+0x24>
		last_tick = cf_gear_down.tick_ms;
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <CAN_Handler_IsGearDownCommanded+0x38>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a05      	ldr	r2, [pc, #20]	; (8000484 <CAN_Handler_IsGearDownCommanded+0x34>)
 800046e:	6013      	str	r3, [r2, #0]
		return 1;
 8000470:	2301      	movs	r3, #1
 8000472:	e000      	b.n	8000476 <CAN_Handler_IsGearDownCommanded+0x26>
	}
	else{
		return 0;
 8000474:	2300      	movs	r3, #0
	}


}
 8000476:	4618      	mov	r0, r3
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	2000005c 	.word	0x2000005c
 8000484:	20000120 	.word	0x20000120
 8000488:	2000007c 	.word	0x2000007c

0800048c <CAN_Handler_IsClutchCommanded>:

uint8_t CAN_Handler_IsClutchCommanded(uint8_t* data){
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

	static uint32_t last_tick = 0;

	if(cf_clutch.tick_ms != last_tick){
 8000494:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <CAN_Handler_IsClutchCommanded+0x38>)
 8000496:	699a      	ldr	r2, [r3, #24]
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <CAN_Handler_IsClutchCommanded+0x3c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	429a      	cmp	r2, r3
 800049e:	d009      	beq.n	80004b4 <CAN_Handler_IsClutchCommanded+0x28>
		last_tick = cf_clutch.tick_ms;
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <CAN_Handler_IsClutchCommanded+0x38>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <CAN_Handler_IsClutchCommanded+0x3c>)
 80004a6:	6013      	str	r3, [r2, #0]
		*data = cf_clutch.core.data[0];
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <CAN_Handler_IsClutchCommanded+0x38>)
 80004aa:	7b1a      	ldrb	r2, [r3, #12]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	701a      	strb	r2, [r3, #0]
		return 1;
 80004b0:	2301      	movs	r3, #1
 80004b2:	e000      	b.n	80004b6 <CAN_Handler_IsClutchCommanded+0x2a>
	}
	else{
		return 0;
 80004b4:	2300      	movs	r3, #0
	}


}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	2000009c 	.word	0x2000009c
 80004c8:	20000124 	.word	0x20000124

080004cc <CAN_Handler_IsAutoshiftCommanded>:

uint8_t CAN_Handler_IsAutoshiftCommanded()
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	static uint32_t last_tick = 0;

	if(cf_autoshift.tick_ms != last_tick)
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <CAN_Handler_IsAutoshiftCommanded+0x28>)
 80004d2:	699a      	ldr	r2, [r3, #24]
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <CAN_Handler_IsAutoshiftCommanded+0x2c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d005      	beq.n	80004e8 <CAN_Handler_IsAutoshiftCommanded+0x1c>
	{
		last_tick = cf_autoshift.tick_ms;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <CAN_Handler_IsAutoshiftCommanded+0x28>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <CAN_Handler_IsAutoshiftCommanded+0x2c>)
 80004e2:	6013      	str	r3, [r2, #0]
		return 1;
 80004e4:	2301      	movs	r3, #1
 80004e6:	e000      	b.n	80004ea <CAN_Handler_IsAutoshiftCommanded+0x1e>
	}
	else
		return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	200000bc 	.word	0x200000bc
 80004f8:	20000128 	.word	0x20000128

080004fc <CAN_Handler_SendGmu1Frame>:

void CAN_Handler_SendGmu1Frame(uint8_t gear, uint8_t clutch, uint16_t gear_pos_adc, uint8_t state, uint8_t air_preas, uint8_t reset_det, uint8_t gear_cut){
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4604      	mov	r4, r0
 8000504:	4608      	mov	r0, r1
 8000506:	4611      	mov	r1, r2
 8000508:	461a      	mov	r2, r3
 800050a:	4623      	mov	r3, r4
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	4603      	mov	r3, r0
 8000510:	71bb      	strb	r3, [r7, #6]
 8000512:	460b      	mov	r3, r1
 8000514:	80bb      	strh	r3, [r7, #4]
 8000516:	4613      	mov	r3, r2
 8000518:	70fb      	strb	r3, [r7, #3]

	cf_gmu1.core.data[0] = gear;
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <CAN_Handler_SendGmu1Frame+0x68>)
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	7313      	strb	r3, [r2, #12]
	cf_gmu1.core.data[1] = clutch;
 8000520:	4a10      	ldr	r2, [pc, #64]	; (8000564 <CAN_Handler_SendGmu1Frame+0x68>)
 8000522:	79bb      	ldrb	r3, [r7, #6]
 8000524:	7353      	strb	r3, [r2, #13]
	cf_gmu1.core.data[2] = (uint8_t)((gear_pos_adc >> 8) & 0xFF);
 8000526:	88bb      	ldrh	r3, [r7, #4]
 8000528:	0a1b      	lsrs	r3, r3, #8
 800052a:	b29b      	uxth	r3, r3
 800052c:	b2da      	uxtb	r2, r3
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <CAN_Handler_SendGmu1Frame+0x68>)
 8000530:	739a      	strb	r2, [r3, #14]
	cf_gmu1.core.data[3] = (uint8_t)(gear_pos_adc & 0xFF);
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <CAN_Handler_SendGmu1Frame+0x68>)
 8000538:	73da      	strb	r2, [r3, #15]
	cf_gmu1.core.data[4] = state;
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <CAN_Handler_SendGmu1Frame+0x68>)
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	7413      	strb	r3, [r2, #16]
	cf_gmu1.core.data[5] = air_preas;
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <CAN_Handler_SendGmu1Frame+0x68>)
 8000542:	7e3b      	ldrb	r3, [r7, #24]
 8000544:	7453      	strb	r3, [r2, #17]
	cf_gmu1.core.data[6] = (uint8_t)((gear_cut)&0xFF);
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <CAN_Handler_SendGmu1Frame+0x68>)
 8000548:	f897 3020 	ldrb.w	r3, [r7, #32]
 800054c:	7493      	strb	r3, [r2, #18]
	cf_gmu1.core.data[7] = reset_det;
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <CAN_Handler_SendGmu1Frame+0x68>)
 8000550:	7f3b      	ldrb	r3, [r7, #28]
 8000552:	74d3      	strb	r3, [r2, #19]

	CAN_SendFrame(&cf_gmu1);
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <CAN_Handler_SendGmu1Frame+0x68>)
 8000556:	f001 f855 	bl	8001604 <CAN_SendFrame>
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bd90      	pop	{r4, r7, pc}
 8000562:	bf00      	nop
 8000564:	200000dc 	.word	0x200000dc

08000568 <CAN_Handler_SendGmu2Frame>:

void CAN_Handler_SendGmu2Frame(uint16_t partial_upshift_t, uint16_t partial_downshift_t, uint16_t upshift_t, uint16_t downshift_t){
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4604      	mov	r4, r0
 8000570:	4608      	mov	r0, r1
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	4623      	mov	r3, r4
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4603      	mov	r3, r0
 800057c:	80bb      	strh	r3, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
 8000582:	4613      	mov	r3, r2
 8000584:	803b      	strh	r3, [r7, #0]

	cf_gmu2.core.data[0] = (uint8_t)((partial_upshift_t >> 8) & 0xFF);
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	0a1b      	lsrs	r3, r3, #8
 800058a:	b29b      	uxth	r3, r3
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000590:	731a      	strb	r2, [r3, #12]
	cf_gmu2.core.data[1] = (uint8_t)(partial_upshift_t & 0xFF);
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <CAN_Handler_SendGmu2Frame+0x7c>)
 8000598:	735a      	strb	r2, [r3, #13]
	cf_gmu2.core.data[2] = (uint8_t)((partial_downshift_t >> 8) & 0xFF);
 800059a:	88bb      	ldrh	r3, [r7, #4]
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <CAN_Handler_SendGmu2Frame+0x7c>)
 80005a4:	739a      	strb	r2, [r3, #14]
	cf_gmu2.core.data[3] = (uint8_t)(partial_downshift_t & 0xFF);
 80005a6:	88bb      	ldrh	r3, [r7, #4]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <CAN_Handler_SendGmu2Frame+0x7c>)
 80005ac:	73da      	strb	r2, [r3, #15]
	cf_gmu2.core.data[4] = (uint8_t)((upshift_t >> 8) & 0xFF);
 80005ae:	887b      	ldrh	r3, [r7, #2]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <CAN_Handler_SendGmu2Frame+0x7c>)
 80005b8:	741a      	strb	r2, [r3, #16]
	cf_gmu2.core.data[5] = (uint8_t)(upshift_t & 0xFF);
 80005ba:	887b      	ldrh	r3, [r7, #2]
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <CAN_Handler_SendGmu2Frame+0x7c>)
 80005c0:	745a      	strb	r2, [r3, #17]
	cf_gmu2.core.data[6] = (uint8_t)((downshift_t >> 8) & 0xFF);
 80005c2:	883b      	ldrh	r3, [r7, #0]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <CAN_Handler_SendGmu2Frame+0x7c>)
 80005cc:	749a      	strb	r2, [r3, #18]
	cf_gmu2.core.data[7] = (uint8_t)(downshift_t & 0xFF);
 80005ce:	883b      	ldrh	r3, [r7, #0]
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <CAN_Handler_SendGmu2Frame+0x7c>)
 80005d4:	74da      	strb	r2, [r3, #19]

	CAN_SendFrame(&cf_gmu2);
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <CAN_Handler_SendGmu2Frame+0x7c>)
 80005d8:	f001 f814 	bl	8001604 <CAN_SendFrame>
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	200000fc 	.word	0x200000fc

080005e8 <gearboxInit>:
#include "main.h"

static bool getTimeout(uint32_t dupa, uint32_t anus);

void gearboxInit(Gearbox_t* gearbox)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	gearbox->gearPosADC =
	gearbox->neutral_adc = 100;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2264      	movs	r2, #100	; 0x64
 80005f4:	805a      	strh	r2, [r3, #2]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	885a      	ldrh	r2, [r3, #2]
	gearbox->gearPosADC =
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	801a      	strh	r2, [r3, #0]
	gearbox->gear1_adc = 1500;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000604:	809a      	strh	r2, [r3, #4]
	gearbox->gear2_adc = 1800;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800060c:	80da      	strh	r2, [r3, #6]
	gearbox->gear3_adc = 2200;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f640 0298 	movw	r2, #2200	; 0x898
 8000614:	811a      	strh	r2, [r3, #8]
	gearbox->gear4_adc = 2800;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800061c:	815a      	strh	r2, [r3, #10]

	gearbox->_state = Idle;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	761a      	strb	r2, [r3, #24]

	gearbox->shift_start_tick = 0;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
	gearbox->timestamp_tick = 0;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	621a      	str	r2, [r3, #32]
	gearbox->start_gear_sens = 0;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	849a      	strh	r2, [r3, #36]	; 0x24
	gearbox->start_gear = 0;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <updateGear>:

void updateGear(Gearbox_t* gearbox)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
	gearbox->gearPosADC = getADCValue();
 8000652:	f7ff fde1 	bl	8000218 <getADCValue>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	801a      	strh	r2, [r3, #0]

	if((gearbox->gearPosADC>=(gearbox->neutral_adc-150))&&(gearbox->gearPosADC<=(gearbox->neutral_adc+150)))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	885b      	ldrh	r3, [r3, #2]
 8000668:	3b96      	subs	r3, #150	; 0x96
 800066a:	429a      	cmp	r2, r3
 800066c:	db0a      	blt.n	8000684 <updateGear+0x3a>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	885b      	ldrh	r3, [r3, #2]
 8000678:	3396      	adds	r3, #150	; 0x96
 800067a:	429a      	cmp	r2, r3
 800067c:	dc02      	bgt.n	8000684 <updateGear+0x3a>
	{
		gearbox->actual_gear = 0;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2200      	movs	r2, #0
 8000682:	769a      	strb	r2, [r3, #26]
	}
	if((gearbox->gearPosADC>=(gearbox->gear1_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear1_adc+150)))
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	3b96      	subs	r3, #150	; 0x96
 8000690:	429a      	cmp	r2, r3
 8000692:	db0a      	blt.n	80006aa <updateGear+0x60>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	889b      	ldrh	r3, [r3, #4]
 800069e:	3396      	adds	r3, #150	; 0x96
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dc02      	bgt.n	80006aa <updateGear+0x60>
	{
		gearbox->actual_gear = 1;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2201      	movs	r2, #1
 80006a8:	769a      	strb	r2, [r3, #26]
	}
	if((gearbox->gearPosADC>=(gearbox->gear2_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear2_adc+150)))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	88db      	ldrh	r3, [r3, #6]
 80006b4:	3b96      	subs	r3, #150	; 0x96
 80006b6:	429a      	cmp	r2, r3
 80006b8:	db0a      	blt.n	80006d0 <updateGear+0x86>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	461a      	mov	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	88db      	ldrh	r3, [r3, #6]
 80006c4:	3396      	adds	r3, #150	; 0x96
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dc02      	bgt.n	80006d0 <updateGear+0x86>
	{
		gearbox->actual_gear = 2;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2202      	movs	r2, #2
 80006ce:	769a      	strb	r2, [r3, #26]
	}
	if((gearbox->gearPosADC>=(gearbox->gear3_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear3_adc+150)))
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	891b      	ldrh	r3, [r3, #8]
 80006da:	3b96      	subs	r3, #150	; 0x96
 80006dc:	429a      	cmp	r2, r3
 80006de:	db0a      	blt.n	80006f6 <updateGear+0xac>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	891b      	ldrh	r3, [r3, #8]
 80006ea:	3396      	adds	r3, #150	; 0x96
 80006ec:	429a      	cmp	r2, r3
 80006ee:	dc02      	bgt.n	80006f6 <updateGear+0xac>
		{
			gearbox->actual_gear = 3;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2203      	movs	r2, #3
 80006f4:	769a      	strb	r2, [r3, #26]
		}
	if((gearbox->gearPosADC>=(gearbox->gear4_adc-150))&&(gearbox->gearPosADC<=(gearbox->gear4_adc+150)))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	895b      	ldrh	r3, [r3, #10]
 8000700:	3b96      	subs	r3, #150	; 0x96
 8000702:	429a      	cmp	r2, r3
 8000704:	db0a      	blt.n	800071c <updateGear+0xd2>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	895b      	ldrh	r3, [r3, #10]
 8000710:	3396      	adds	r3, #150	; 0x96
 8000712:	429a      	cmp	r2, r3
 8000714:	dc02      	bgt.n	800071c <updateGear+0xd2>
		{
			gearbox->actual_gear = 4;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2204      	movs	r2, #4
 800071a:	769a      	strb	r2, [r3, #26]
		}
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <processCallback>:
{
	return gearbox->gear_cut;
}

void processCallback(Gearbox_t* gearbox)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	switch(gearbox->_state)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7e1b      	ldrb	r3, [r3, #24]
 8000730:	2b0c      	cmp	r3, #12
 8000732:	d84d      	bhi.n	80007d0 <processCallback+0xac>
 8000734:	a201      	add	r2, pc, #4	; (adr r2, 800073c <processCallback+0x18>)
 8000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073a:	bf00      	nop
 800073c:	080007d9 	.word	0x080007d9
 8000740:	08000771 	.word	0x08000771
 8000744:	08000779 	.word	0x08000779
 8000748:	08000781 	.word	0x08000781
 800074c:	08000789 	.word	0x08000789
 8000750:	08000791 	.word	0x08000791
 8000754:	08000799 	.word	0x08000799
 8000758:	080007a1 	.word	0x080007a1
 800075c:	080007a9 	.word	0x080007a9
 8000760:	080007b1 	.word	0x080007b1
 8000764:	080007b9 	.word	0x080007b9
 8000768:	080007c1 	.word	0x080007c1
 800076c:	080007c9 	.word	0x080007c9
	{
		case Idle:
		break;

		case StartUpshift:
			startUpshiftCallback(gearbox);
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f837 	bl	80007e4 <startUpshiftCallback>
		break;
 8000776:	e030      	b.n	80007da <processCallback+0xb6>

		case UpshiftFromNeutral:
			upshiftFromNeutral(gearbox);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f87a 	bl	8000872 <upshiftFromNeutral>
		break;
 800077e:	e02c      	b.n	80007da <processCallback+0xb6>

		case UpshiftGearCut:
			upshiftGearCut(gearbox);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f88b 	bl	800089c <upshiftGearCut>
		break;
 8000786:	e028      	b.n	80007da <processCallback+0xb6>

		case UpshiftFinish:
			upshiftFinish(gearbox);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f8ac 	bl	80008e6 <upshiftFinish>
		break;
 800078e:	e024      	b.n	80007da <processCallback+0xb6>

		case StartDownshift:
			startDownshiftCallback(gearbox);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f8d7 	bl	8000944 <startDownshiftCallback>
		break;
 8000796:	e020      	b.n	80007da <processCallback+0xb6>

		case DownshiftToNeutral:
			downshiftToNeutral(gearbox);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f91b 	bl	80009d4 <downshiftToNeutral>
		break;
 800079e:	e01c      	b.n	80007da <processCallback+0xb6>

		case DownshiftRevMatch:
			downshiftRevMatch(gearbox);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f000 f939 	bl	8000a18 <downshiftRevMatch>
		break;
 80007a6:	e018      	b.n	80007da <processCallback+0xb6>

		case DownshiftFinish:
			downshiftFinish(gearbox);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f000 f95b 	bl	8000a64 <downshiftFinish>
		break;
 80007ae:	e014      	b.n	80007da <processCallback+0xb6>

		case OL_US_GearCut:
			openLoop_upshift_gearCut(gearbox);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 f987 	bl	8000ac4 <openLoop_upshift_gearCut>
		break;
 80007b6:	e010      	b.n	80007da <processCallback+0xb6>

		case OL_US_Finish:
			openLoop_upshift_finish(gearbox);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 f9a6 	bl	8000b0a <openLoop_upshift_finish>
		break;
 80007be:	e00c      	b.n	80007da <processCallback+0xb6>

		case OL_DS_Clutch:
			openLoop_downshift_clutch(gearbox);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f9c7 	bl	8000b54 <openLoop_downshift_clutch>
		break;
 80007c6:	e008      	b.n	80007da <processCallback+0xb6>

		case OL_DS_Finish:
			openLoop_downshift_finish(gearbox);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f9e9 	bl	8000ba0 <openLoop_downshift_finish>
		break;
 80007ce:	e004      	b.n	80007da <processCallback+0xb6>

		default:
			gearbox->_state = Idle;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	761a      	strb	r2, [r3, #24]
		break;
 80007d6:	e000      	b.n	80007da <processCallback+0xb6>
		break;
 80007d8:	bf00      	nop

	}
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop

080007e4 <startUpshiftCallback>:

void startUpshiftCallback(Gearbox_t* gearbox)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	gearbox->start_gear = gearbox->actual_gear;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7e9a      	ldrb	r2, [r3, #26]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	gearbox->shift_start_tick = HAL_GetTick();
 80007f6:	f001 f8eb 	bl	80019d0 <HAL_GetTick>
 80007fa:	4602      	mov	r2, r0
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	61da      	str	r2, [r3, #28]
	if(gearbox->start_gear > 5)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000806:	2b05      	cmp	r3, #5
 8000808:	d90f      	bls.n	800082a <startUpshiftCallback+0x46>
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f003 fc64 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000818:	f001 f8da 	bl	80019d0 <HAL_GetTick>
 800081c:	4602      	mov	r2, r0
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	621a      	str	r2, [r3, #32]
		gearbox->_state = OL_US_GearCut;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2209      	movs	r2, #9
 8000826:	761a      	strb	r2, [r3, #24]
		return;
 8000828:	e020      	b.n	800086c <startUpshiftCallback+0x88>
	}
	if(gearbox->start_gear == 4)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000830:	2b04      	cmp	r3, #4
 8000832:	d103      	bne.n	800083c <startUpshiftCallback+0x58>
	{
		gearbox->_state = Idle;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	761a      	strb	r2, [r3, #24]
		return;
 800083a:	e017      	b.n	800086c <startUpshiftCallback+0x88>
	}
	HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f003 fc4b 	bl	80040e0 <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 800084a:	f001 f8c1 	bl	80019d0 <HAL_GetTick>
 800084e:	4602      	mov	r2, r0
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	621a      	str	r2, [r3, #32]

	if(gearbox->start_gear == 0)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800085a:	2b00      	cmp	r3, #0
 800085c:	d103      	bne.n	8000866 <startUpshiftCallback+0x82>
	{
		gearbox->_state = UpshiftFromNeutral;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2202      	movs	r2, #2
 8000862:	761a      	strb	r2, [r3, #24]
 8000864:	e002      	b.n	800086c <startUpshiftCallback+0x88>
	}
	else
	{
		gearbox->_state = UpshiftGearCut;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2203      	movs	r2, #3
 800086a:	761a      	strb	r2, [r3, #24]
	}
}
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <upshiftFromNeutral>:
void upshiftFromNeutral(Gearbox_t* gearbox)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear = 1) || (getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT)))
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2201      	movs	r2, #1
 800087e:	769a      	strb	r2, [r3, #26]
	{
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f003 fc29 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->_state = Idle;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	761a      	strb	r2, [r3, #24]
	}
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <upshiftGearCut>:

void upshiftGearCut(Gearbox_t* gearbox)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, gearbox->_US_ACTUATOR_DELAY))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6a1a      	ldr	r2, [r3, #32]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	899b      	ldrh	r3, [r3, #12]
 80008ac:	4619      	mov	r1, r3
 80008ae:	4610      	mov	r0, r2
 80008b0:	f000 f9d0 	bl	8000c54 <getTimeout>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d011      	beq.n	80008de <upshiftGearCut+0x42>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2110      	movs	r1, #16
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f003 fc0d 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	22ff      	movs	r2, #255	; 0xff
 80008ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		gearbox->timestamp_tick = HAL_GetTick();
 80008ce:	f001 f87f 	bl	80019d0 <HAL_GetTick>
 80008d2:	4602      	mov	r2, r0
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	621a      	str	r2, [r3, #32]
		gearbox->_state = UpshiftFinish;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2204      	movs	r2, #4
 80008dc:	761a      	strb	r2, [r3, #24]
	}
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <upshiftFinish>:

void upshiftFinish(Gearbox_t* gearbox)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear+1)||(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT)))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7e9b      	ldrb	r3, [r3, #26]
 80008f2:	461a      	mov	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80008fa:	3301      	adds	r3, #1
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d008      	beq.n	8000912 <upshiftFinish+0x2c>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a1b      	ldr	r3, [r3, #32]
 8000904:	21c8      	movs	r1, #200	; 0xc8
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f9a4 	bl	8000c54 <getTimeout>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d013      	beq.n	800093a <upshiftFinish+0x54>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2110      	movs	r1, #16
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f003 fbe1 	bl	80040e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000928:	f003 fbda 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	227f      	movs	r2, #127	; 0x7f
 8000930:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		gearbox->_state = Idle;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	761a      	strb	r2, [r3, #24]
	}
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <startDownshiftCallback>:

void startDownshiftCallback(Gearbox_t* gearbox)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	gearbox->shift_start_tick = HAL_GetTick();
 800094c:	f001 f840 	bl	80019d0 <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	61da      	str	r2, [r3, #28]
	gearbox->start_gear = gearbox->actual_gear;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7e9a      	ldrb	r2, [r3, #26]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	//pobranie wartosci z adc

	if(gearbox->start_gear > 4)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000966:	2b04      	cmp	r3, #4
 8000968:	d90e      	bls.n	8000988 <startDownshiftCallback+0x44>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000970:	4817      	ldr	r0, [pc, #92]	; (80009d0 <startDownshiftCallback+0x8c>)
 8000972:	f003 fbb5 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000976:	f001 f82b 	bl	80019d0 <HAL_GetTick>
 800097a:	4602      	mov	r2, r0
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	621a      	str	r2, [r3, #32]
		gearbox->_state = OL_DS_Clutch;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	220b      	movs	r2, #11
 8000984:	761a      	strb	r2, [r3, #24]
		return;
 8000986:	e01f      	b.n	80009c8 <startDownshiftCallback+0x84>
	}
	else if(gearbox->start_gear == 0)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <startDownshiftCallback+0x56>
	{
		gearbox->_state = Idle;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	761a      	strb	r2, [r3, #24]
		return;
 8000998:	e016      	b.n	80009c8 <startDownshiftCallback+0x84>
	}

	HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <startDownshiftCallback+0x8c>)
 80009a2:	f003 fb9d 	bl	80040e0 <HAL_GPIO_WritePin>
	gearbox->timestamp_tick = HAL_GetTick();
 80009a6:	f001 f813 	bl	80019d0 <HAL_GetTick>
 80009aa:	4602      	mov	r2, r0
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	621a      	str	r2, [r3, #32]

	if(gearbox->start_gear == 1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d103      	bne.n	80009c2 <startDownshiftCallback+0x7e>
	{
		gearbox->_state = DownshiftToNeutral;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2206      	movs	r2, #6
 80009be:	761a      	strb	r2, [r3, #24]
 80009c0:	e002      	b.n	80009c8 <startDownshiftCallback+0x84>
	}
	else
	{
		gearbox->_state = DownshiftRevMatch;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2207      	movs	r2, #7
 80009c6:	761a      	strb	r2, [r3, #24]
	}
}
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	48000400 	.word	0x48000400

080009d4 <downshiftToNeutral>:

void downshiftToNeutral(Gearbox_t* gearbox)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a1b      	ldr	r3, [r3, #32]
 80009e0:	2128      	movs	r1, #40	; 0x28
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f936 	bl	8000c54 <getTimeout>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00d      	beq.n	8000a0a <downshiftToNeutral+0x36>
	{
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <downshiftToNeutral+0x40>)
 80009f6:	f003 fb73 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 80009fa:	f000 ffe9 	bl	80019d0 <HAL_GetTick>
 80009fe:	4602      	mov	r2, r0
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	621a      	str	r2, [r3, #32]
		gearbox->_state = DownshiftFinish;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2208      	movs	r2, #8
 8000a08:	761a      	strb	r2, [r3, #24]
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	48000400 	.word	0x48000400

08000a18 <downshiftRevMatch>:

void downshiftRevMatch(Gearbox_t* gearbox)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a1b      	ldr	r3, [r3, #32]
 8000a24:	2128      	movs	r1, #40	; 0x28
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f914 	bl	8000c54 <getTimeout>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d011      	beq.n	8000a56 <downshiftRevMatch+0x3e>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <downshiftRevMatch+0x48>)
 8000a3a:	f003 fb51 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000a3e:	f000 ffc7 	bl	80019d0 <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	621a      	str	r2, [r3, #32]
		gearbox->gear_cut = 0;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		gearbox->_state = DownshiftFinish;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2208      	movs	r2, #8
 8000a54:	761a      	strb	r2, [r3, #24]
	}
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	48000400 	.word	0x48000400

08000a64 <downshiftFinish>:

void downshiftFinish(Gearbox_t* gearbox)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if((gearbox->actual_gear == gearbox->start_gear -1 )|| (getTimeout(gearbox->timestamp_tick, DS_FINISH_TIMEOUT)))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7e9b      	ldrb	r3, [r3, #26]
 8000a70:	461a      	mov	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d008      	beq.n	8000a90 <downshiftFinish+0x2c>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	21fa      	movs	r1, #250	; 0xfa
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 f8e5 	bl	8000c54 <getTimeout>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d012      	beq.n	8000ab6 <downshiftFinish+0x52>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a96:	480a      	ldr	r0, [pc, #40]	; (8000ac0 <downshiftFinish+0x5c>)
 8000a98:	f003 fb22 	bl	80040e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <downshiftFinish+0x5c>)
 8000aa4:	f003 fb1c 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	227f      	movs	r2, #127	; 0x7f
 8000aac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		gearbox->_state = Idle;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	761a      	strb	r2, [r3, #24]
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	48000400 	.word	0x48000400

08000ac4 <openLoop_upshift_gearCut>:

void openLoop_upshift_gearCut(Gearbox_t* gearbox)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_US_GEARCUT_DELAY))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	2164      	movs	r1, #100	; 0x64
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f8be 	bl	8000c54 <getTimeout>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d011      	beq.n	8000b02 <openLoop_upshift_gearCut+0x3e>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f003 fafb 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 255;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		gearbox->timestamp_tick = HAL_GetTick();
 8000af2:	f000 ff6d 	bl	80019d0 <HAL_GetTick>
 8000af6:	4602      	mov	r2, r0
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	621a      	str	r2, [r3, #32]
		gearbox->_state = OL_US_Finish;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	220a      	movs	r2, #10
 8000b00:	761a      	strb	r2, [r3, #24]
	}
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <openLoop_upshift_finish>:

void openLoop_upshift_finish(Gearbox_t* gearbox)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, US_FINISH_TIMEOUT))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a1b      	ldr	r3, [r3, #32]
 8000b16:	21c8      	movs	r1, #200	; 0xc8
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f89b 	bl	8000c54 <getTimeout>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d013      	beq.n	8000b4c <openLoop_upshift_finish+0x42>
	{
		HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2110      	movs	r1, #16
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f003 fad8 	bl	80040e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f003 fad1 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	227f      	movs	r2, #127	; 0x7f
 8000b42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		gearbox->_state = Idle;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	761a      	strb	r2, [r3, #24]
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <openLoop_downshift_clutch>:

void openLoop_downshift_clutch(Gearbox_t* gearbox)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, DS_ACTUATOR_DELAY))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	2128      	movs	r1, #40	; 0x28
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f876 	bl	8000c54 <getTimeout>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d011      	beq.n	8000b92 <openLoop_downshift_clutch+0x3e>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b74:	4809      	ldr	r0, [pc, #36]	; (8000b9c <openLoop_downshift_clutch+0x48>)
 8000b76:	f003 fab3 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->timestamp_tick = HAL_GetTick();
 8000b7a:	f000 ff29 	bl	80019d0 <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	621a      	str	r2, [r3, #32]
		gearbox->gear_cut = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		gearbox->_state = OL_DS_Finish;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	220c      	movs	r2, #12
 8000b90:	761a      	strb	r2, [r3, #24]
	}
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <openLoop_downshift_finish>:

void openLoop_downshift_finish(Gearbox_t* gearbox)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if(getTimeout(gearbox->timestamp_tick, OL_DS_CLUTCH_DELAY))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a1b      	ldr	r3, [r3, #32]
 8000bac:	2164      	movs	r1, #100	; 0x64
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f850 	bl	8000c54 <getTimeout>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d012      	beq.n	8000be0 <openLoop_downshift_finish+0x40>
	{
		HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <openLoop_downshift_finish+0x48>)
 8000bc2:	f003 fa8d 	bl	80040e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bcc:	4806      	ldr	r0, [pc, #24]	; (8000be8 <openLoop_downshift_finish+0x48>)
 8000bce:	f003 fa87 	bl	80040e0 <HAL_GPIO_WritePin>
		gearbox->gear_cut = 127;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	227f      	movs	r2, #127	; 0x7f
 8000bd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		gearbox->_state = Idle;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	761a      	strb	r2, [r3, #24]
	}
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	48000400 	.word	0x48000400

08000bec <startUpshift>:

void startUpshift(Gearbox_t* gearbox)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7e1b      	ldrb	r3, [r3, #24]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <startUpshift+0x16>
		gearbox->_state = StartUpshift;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	761a      	strb	r2, [r3, #24]
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <startDownshift>:
void startDownshift(Gearbox_t* gearbox)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
	if(gearbox->_state == Idle)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7e1b      	ldrb	r3, [r3, #24]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <startDownshift+0x16>
		gearbox->_state = StartDownshift;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2205      	movs	r2, #5
 8000c22:	761a      	strb	r2, [r3, #24]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <clutch>:

void clutch(bool ON)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, ON ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <clutch+0x20>)
 8000c44:	f003 fa4c 	bl	80040e0 <HAL_GPIO_WritePin>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	48000400 	.word	0x48000400

08000c54 <getTimeout>:
{
	return gearbox->_state;
}

static bool getTimeout(uint32_t dupa, uint32_t anus)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	if((HAL_GetTick() - dupa) >= anus)
 8000c5e:	f000 feb7 	bl	80019d0 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d801      	bhi.n	8000c72 <getTimeout+0x1e>
	{
		return true;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e000      	b.n	8000c74 <getTimeout+0x20>
	}
	else
		return false;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <enableAutoshift>:
{
	return gearbox->_autoshiftState;
}

void enableAutoshift(Gearbox_t* gearbox)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	gearbox->_autoshiftState = AutoshiftEnable;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	765a      	strb	r2, [r3, #25]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <disableAutoshift>:

void disableAutoshift(Gearbox_t* gearbox)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
	gearbox->_autoshiftState = AutoshiftDisable;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	765a      	strb	r2, [r3, #25]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <autoshiftProcess>:

void autoshiftProcess(Gearbox_t* gearbox)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	if(gearbox->actualRPM == SHIFT_RPM)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d102      	bne.n	8000cca <autoshiftProcess+0x1a>
	{
		gearbox->_state = StartUpshift;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	761a      	strb	r2, [r3, #24]
	}
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000cfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d0e:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d44:	2204      	movs	r2, #4
 8000d46:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d54:	4817      	ldr	r0, [pc, #92]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d56:	f000 fe5b 	bl	8001a10 <HAL_ADC_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d60:	f000 f9d8 	bl	8001114 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4811      	ldr	r0, [pc, #68]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d70:	f001 ffe6 	bl	8002d40 <HAL_ADCEx_MultiModeConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d7a:	f000 f9cb 	bl	8001114 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	; (8000db4 <MX_ADC1_Init+0xdc>)
 8000d9c:	f001 fce6 	bl	800276c <HAL_ADC_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000da6:	f000 f9b5 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000012c 	.word	0x2000012c

08000db8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dc8:	d113      	bne.n	8000df2 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_ADC_MspInit+0x44>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <HAL_ADC_MspInit+0x44>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	6153      	str	r3, [r2, #20]
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_ADC_MspInit+0x44>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	2012      	movs	r0, #18
 8000de8:	f002 ffc9 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dec:	2012      	movs	r0, #18
 8000dee:	f002 ffe2 	bl	8003db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000

08000e00 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e06:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <MX_CAN_Init+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e1e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000e22:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e26:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8000e2a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e44:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_CAN_Init+0x64>)
 8000e52:	f002 f931 	bl	80030b8 <HAL_CAN_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e5c:	f000 f95a 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000017c 	.word	0x2000017c
 8000e68:	40006400 	.word	0x40006400

08000e6c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <HAL_CAN_MspInit+0xc0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d149      	bne.n	8000f22 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e8e:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <HAL_CAN_MspInit+0xc4>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <HAL_CAN_MspInit+0xc4>)
 8000e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <HAL_CAN_MspInit+0xc4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_CAN_MspInit+0xc4>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a21      	ldr	r2, [pc, #132]	; (8000f30 <HAL_CAN_MspInit+0xc4>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_CAN_MspInit+0xc4>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ebe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ed0:	2309      	movs	r3, #9
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f002 ff85 	bl	8003dec <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2013      	movs	r0, #19
 8000ee8:	f002 ff49 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8000eec:	2013      	movs	r0, #19
 8000eee:	f002 ff62 	bl	8003db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2014      	movs	r0, #20
 8000ef8:	f002 ff41 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000efc:	2014      	movs	r0, #20
 8000efe:	f002 ff5a 	bl	8003db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2015      	movs	r0, #21
 8000f08:	f002 ff39 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8000f0c:	2015      	movs	r0, #21
 8000f0e:	f002 ff52 	bl	8003db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2016      	movs	r0, #22
 8000f18:	f002 ff31 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8000f1c:	2016      	movs	r0, #22
 8000f1e:	f002 ff4a 	bl	8003db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	; 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40006400 	.word	0x40006400
 8000f30:	40021000 	.word	0x40021000

08000f34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <MX_GPIO_Init+0xf8>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a37      	ldr	r2, [pc, #220]	; (800102c <MX_GPIO_Init+0xf8>)
 8000f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b35      	ldr	r3, [pc, #212]	; (800102c <MX_GPIO_Init+0xf8>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <MX_GPIO_Init+0xf8>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a31      	ldr	r2, [pc, #196]	; (800102c <MX_GPIO_Init+0xf8>)
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <MX_GPIO_Init+0xf8>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <MX_GPIO_Init+0xf8>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a2b      	ldr	r2, [pc, #172]	; (800102c <MX_GPIO_Init+0xf8>)
 8000f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <MX_GPIO_Init+0xf8>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GEAR_CUT_Pin|GEAR_UP_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f003 f8a0 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLUTCH_Pin|GEAR_DOWN_Pin|STATUS_LED_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 41a1 	mov.w	r1, #20608	; 0x5080
 8000fa6:	4822      	ldr	r0, [pc, #136]	; (8001030 <MX_GPIO_Init+0xfc>)
 8000fa8:	f003 f89a 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_CUT_Pin;
 8000fac:	2310      	movs	r3, #16
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_CUT_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f002 ff11 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CLUTCH_Pin|GEAR_DOWN_Pin;
 8000fca:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000fce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <MX_GPIO_Init+0xfc>)
 8000fe4:	f002 ff02 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GEAR_UP_Pin;
 8000fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GEAR_UP_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f002 fef2 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_GPIO_Init+0xfc>)
 8001020:	f002 fee4 	bl	8003dec <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3720      	adds	r7, #32
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000
 8001030:	48000400 	.word	0x48000400

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fc70 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f80f 	bl	800105e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f7ff ff78 	bl	8000f34 <MX_GPIO_Init>
  MX_CAN_Init();
 8001044:	f7ff fedc 	bl	8000e00 <MX_CAN_Init>
  MX_OPAMP1_Init();
 8001048:	f000 f86a 	bl	8001120 <MX_OPAMP1_Init>
  MX_ADC1_Init();
 800104c:	f7ff fe44 	bl	8000cd8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001050:	f000 f948 	bl	80012e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  AppInit();
 8001054:	f7ff f8ec 	bl	8000230 <AppInit>
  AppProcess();
 8001058:	f7ff f966 	bl	8000328 <AppProcess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105c:	e7fe      	b.n	800105c <main+0x28>

0800105e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b09e      	sub	sp, #120	; 0x78
 8001062:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001064:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001068:	2228      	movs	r2, #40	; 0x28
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f004 ffdf 	bl	8006030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	223c      	movs	r2, #60	; 0x3c
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f004 ffd1 	bl	8006030 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108e:	2301      	movs	r3, #1
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001092:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001096:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001098:	2301      	movs	r3, #1
 800109a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109c:	2301      	movs	r3, #1
 800109e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ae:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 f91b 	bl	80042f0 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010c0:	f000 f828 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010de:	2102      	movs	r1, #2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 f943 	bl	800536c <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010ec:	f000 f812 	bl	8001114 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80010f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	4618      	mov	r0, r3
 80010fe:	f004 fb1d 	bl	800573c <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001108:	f000 f804 	bl	8001114 <Error_Handler>
  }
}
 800110c:	bf00      	nop
 800110e:	3778      	adds	r7, #120	; 0x78
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	e7fe      	b.n	800111c <Error_Handler+0x8>
	...

08001120 <MX_OPAMP1_Init>:

OPAMP_HandleTypeDef hopamp1;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_OPAMP1_Init+0x38>)
 8001126:	4a0d      	ldr	r2, [pc, #52]	; (800115c <MX_OPAMP1_Init+0x3c>)
 8001128:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_OPAMP1_Init+0x38>)
 800112c:	2260      	movs	r2, #96	; 0x60
 800112e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_OPAMP1_Init+0x38>)
 8001132:	220c      	movs	r2, #12
 8001134:	60da      	str	r2, [r3, #12]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_OPAMP1_Init+0x38>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_OPAMP1_Init+0x38>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_OPAMP1_Init+0x38>)
 8001144:	f002 fffe 	bl	8004144 <HAL_OPAMP_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_OPAMP1_Init+0x32>
  {
    Error_Handler();
 800114e:	f7ff ffe1 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200001a4 	.word	0x200001a4
 800115c:	40010038 	.word	0x40010038

08001160 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <HAL_OPAMP_MspInit+0x5c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d118      	bne.n	80011b4 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_OPAMP_MspInit+0x60>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_OPAMP_MspInit+0x60>)
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	6153      	str	r3, [r2, #20]
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_OPAMP_MspInit+0x60>)
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GEAR_POS_Pin|GPIO_PIN_2;
 800119a:	2306      	movs	r3, #6
 800119c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119e:	2303      	movs	r3, #3
 80011a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f002 fe1c 	bl	8003dec <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40010038 	.word	0x40010038
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_MspInit+0x44>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_MspInit+0x44>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_MspInit+0x44>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x44>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x44>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x44>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 fba6 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <ADC1_2_IRQHandler+0x10>)
 8001266:	f000 ff01 	bl	800206c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000012c 	.word	0x2000012c

08001274 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <USB_HP_CAN_TX_IRQHandler+0x10>)
 800127a:	f002 fa6e 	bl	800375a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000017c 	.word	0x2000017c

08001288 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800128e:	f002 fa64 	bl	800375a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000017c 	.word	0x2000017c

0800129c <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <CAN_RX1_IRQHandler+0x10>)
 80012a2:	f002 fa5a 	bl	800375a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000017c 	.word	0x2000017c

080012b0 <CAN_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN_SCE_IRQHandler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END CAN_SCE_IRQn 0 */
  /* USER CODE BEGIN CAN_SCE_IRQn 1 */

  /* USER CODE END CAN_SCE_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <MX_TIM2_Init+0x98>)
 8001304:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001308:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_TIM2_Init+0x98>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_TIM2_Init+0x98>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_TIM2_Init+0x98>)
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_TIM2_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_TIM2_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800132a:	4814      	ldr	r0, [pc, #80]	; (800137c <MX_TIM2_Init+0x98>)
 800132c:	f004 fbb6 	bl	8005a9c <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001336:	f7ff feed 	bl	8001114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_TIM2_Init+0x98>)
 8001348:	f004 fbff 	bl	8005b4a <HAL_TIM_ConfigClockSource>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001352:	f7ff fedf 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_TIM2_Init+0x98>)
 8001364:	f004 fde4 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800136e:	f7ff fed1 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3720      	adds	r7, #32
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001d8 	.word	0x200001d8

08001380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d10b      	bne.n	80013aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_TIM_Base_MspInit+0x38>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_TIM_Base_MspInit+0x38>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_TIM_Base_MspInit+0x38>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80013c0:	f7ff ff7e 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <LoopForever+0xe>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	; (8001408 <LoopForever+0x16>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ea:	f004 fe29 	bl	8006040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ee:	f7ff fe21 	bl	8001034 <main>

080013f2 <LoopForever>:

LoopForever:
    b LoopForever
 80013f2:	e7fe      	b.n	80013f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001400:	080060f4 	.word	0x080060f4
  ldr r2, =_sbss
 8001404:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001408:	2000047c 	.word	0x2000047c

0800140c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC3_IRQHandler>
	...

08001410 <CAN_FIFO_Add>:

#include "CAN_FIFO.h"



void CAN_FIFO_Add(struct CAN_FIFO *fifo, uint8_t *data_ptr){
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]

	if(fifo->empty){
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <CAN_FIFO_Add+0x2c>
		fifo->data_ptr[fifo->last_element]=data_ptr;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	785b      	ldrb	r3, [r3, #1]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	605a      	str	r2, [r3, #4]
		fifo->empty=0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return;
 800143a:	e02c      	b.n	8001496 <CAN_FIFO_Add+0x86>
	}
	fifo->last_element=(fifo->last_element+1)%CAN_FIFO_SIZE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	785b      	ldrb	r3, [r3, #1]
 8001440:	3301      	adds	r3, #1
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <CAN_FIFO_Add+0x90>)
 8001444:	fb82 1203 	smull	r1, r2, r2, r3
 8001448:	1151      	asrs	r1, r2, #5
 800144a:	17da      	asrs	r2, r3, #31
 800144c:	1a8a      	subs	r2, r1, r2
 800144e:	2164      	movs	r1, #100	; 0x64
 8001450:	fb01 f202 	mul.w	r2, r1, r2
 8001454:	1a9a      	subs	r2, r3, r2
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	705a      	strb	r2, [r3, #1]
	if(fifo->last_element==fifo->first_element){
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	785a      	ldrb	r2, [r3, #1]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d10f      	bne.n	8001488 <CAN_FIFO_Add+0x78>
		fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <CAN_FIFO_Add+0x90>)
 8001470:	fb82 1203 	smull	r1, r2, r2, r3
 8001474:	1151      	asrs	r1, r2, #5
 8001476:	17da      	asrs	r2, r3, #31
 8001478:	1a8a      	subs	r2, r1, r2
 800147a:	2164      	movs	r1, #100	; 0x64
 800147c:	fb01 f202 	mul.w	r2, r1, r2
 8001480:	1a9a      	subs	r2, r3, r2
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	701a      	strb	r2, [r3, #0]
	}
	fifo->data_ptr[fifo->last_element]=data_ptr;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	605a      	str	r2, [r3, #4]


}
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	51eb851f 	.word	0x51eb851f

080014a4 <CAN_FIFO_Get>:

/* return 0 if FIFO is empty */
uint8_t* CAN_FIFO_Get(struct CAN_FIFO *fifo){
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

	uint8_t *temp;
	if(fifo->empty){
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <CAN_FIFO_Get+0x16>
		return 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e023      	b.n	8001502 <CAN_FIFO_Get+0x5e>
	}
	temp=fifo->data_ptr[fifo->first_element];
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	60fb      	str	r3, [r7, #12]
	if(fifo->first_element==fifo->last_element){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d105      	bne.n	80014e0 <CAN_FIFO_Get+0x3c>
		fifo->empty=1;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
		return temp;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	e010      	b.n	8001502 <CAN_FIFO_Get+0x5e>
	}
	fifo->first_element=(fifo->first_element+1)%CAN_FIFO_SIZE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <CAN_FIFO_Get+0x6c>)
 80014e8:	fb82 1203 	smull	r1, r2, r2, r3
 80014ec:	1151      	asrs	r1, r2, #5
 80014ee:	17da      	asrs	r2, r3, #31
 80014f0:	1a8a      	subs	r2, r1, r2
 80014f2:	2164      	movs	r1, #100	; 0x64
 80014f4:	fb01 f202 	mul.w	r2, r1, r2
 80014f8:	1a9a      	subs	r2, r3, r2
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	701a      	strb	r2, [r3, #0]
	return temp;
 8001500:	68fb      	ldr	r3, [r7, #12]

}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	51eb851f 	.word	0x51eb851f

08001514 <CAN_FIFO_Flush>:
uint8_t CAN_FIFO_Empty(struct CAN_FIFO *fifo){

	return fifo->empty;
}

void CAN_FIFO_Flush(struct CAN_FIFO *fifo){
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

	fifo->first_element=0;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
	fifo->last_element=0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	705a      	strb	r2, [r3, #1]
	fifo->empty=1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <CAN_Init>:
	struct can_frame* pFrames[CAN_MAX_FRAME_NUM];
	uint8_t values_num;
}_can_info;


void CAN_Init(){
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	CAN_HW_Init();
 8001540:	f000 f8c6 	bl	80016d0 <CAN_HW_Init>
	CAN_FIFO_Flush(&FIFO_CAN_TX);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <CAN_Init+0x14>)
 8001546:	f7ff ffe5 	bl	8001514 <CAN_FIFO_Flush>
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000228 	.word	0x20000228

08001554 <CAN_InitFrame>:

void CAN_InitFrame(struct can_frame* pFrame, uint16_t id, uint16_t period, uint8_t dlc) {
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	4608      	mov	r0, r1
 800155e:	4611      	mov	r1, r2
 8001560:	461a      	mov	r2, r3
 8001562:	4603      	mov	r3, r0
 8001564:	817b      	strh	r3, [r7, #10]
 8001566:	460b      	mov	r3, r1
 8001568:	813b      	strh	r3, [r7, #8]
 800156a:	4613      	mov	r3, r2
 800156c:	71fb      	strb	r3, [r7, #7]
	
	pFrame->core.id = id;
 800156e:	897a      	ldrh	r2, [r7, #10]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	605a      	str	r2, [r3, #4]
	pFrame->period = period;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	893a      	ldrh	r2, [r7, #8]
 8001578:	829a      	strh	r2, [r3, #20]
	pFrame->core.dlc = dlc;
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	609a      	str	r2, [r3, #8]
	_can_info.pFrames[_can_info.frames_num] = pFrame;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <CAN_InitFrame+0x54>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <CAN_InitFrame+0x54>)
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	605a      	str	r2, [r3, #4]
	_can_info.frames_num++;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <CAN_InitFrame+0x54>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <CAN_InitFrame+0x54>)
 8001598:	701a      	strb	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200003c0 	.word	0x200003c0

080015ac <FilterFrame>:
	_can_info.values_num++;
}

/* returns index of frame in _can_info or
   returns 255 if didn't found matching frame*/
uint8_t FilterFrame(uint16_t id){
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
	
	uint8_t i;
	for(i = 0; i < _can_info.frames_num; i++){
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e00d      	b.n	80015d8 <FilterFrame+0x2c>
		if(_can_info.pFrames[i]->core.id == id){
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <FilterFrame+0x44>)
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d101      	bne.n	80015d2 <FilterFrame+0x26>
			return i;
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	e008      	b.n	80015e4 <FilterFrame+0x38>
	for(i = 0; i < _can_info.frames_num; i++){
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3301      	adds	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <FilterFrame+0x44>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3ec      	bcc.n	80015bc <FilterFrame+0x10>
		}
	}
	return 255;
 80015e2:	23ff      	movs	r3, #255	; 0xff
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	200003c0 	.word	0x200003c0

080015f4 <CAN_GetTickMs>:
	
	value = (value + pCan_value->ofs)*pCan_value->mult/pCan_value->div;
	return value;
}

inline uint32_t CAN_GetTickMs(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	return CAN_HW_GetTickMs();
 80015f8:	f000 f8ac 	bl	8001754 <CAN_HW_GetTickMs>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <CAN_SendFrame>:
	if(!pFrame->tick_ms) return 0;
	if(CAN_GetTickMs() - pFrame->tick_ms > pFrame->period*10) return 0;
	return 1;
}

inline uint8_t CAN_SendFrame(struct can_frame* pFrame) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	if(!CAN_HW_SendFrame(pFrame)){
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f8a9 	bl	8001764 <CAN_HW_SendFrame>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d103      	bne.n	8001620 <CAN_SendFrame+0x1c>
		CAN_FIFO_Add(&FIFO_CAN_TX, (uint8_t*)pFrame);
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4804      	ldr	r0, [pc, #16]	; (800162c <CAN_SendFrame+0x28>)
 800161c:	f7ff fef8 	bl	8001410 <CAN_FIFO_Add>
	}
	return 1;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000228 	.word	0x20000228

08001630 <CAN_ReceiveCallback>:
void CAN_SetRxCallback(void (*callback)(struct can_frame* frame))
{
	CAN_RxCallback = callback;
}

inline void CAN_ReceiveCallback(struct can_msg* msg){
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	uint8_t index;
	index = FilterFrame(msg->id);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	b29b      	uxth	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ffb4 	bl	80015ac <FilterFrame>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]
	if(index==255) return;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2bff      	cmp	r3, #255	; 0xff
 800164c:	d023      	beq.n	8001696 <CAN_ReceiveCallback+0x66>
	memcpy(_can_info.pFrames[index]->core.data, msg->data, 8);
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <CAN_ReceiveCallback+0x70>)
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f103 000c 	add.w	r0, r3, #12
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	330c      	adds	r3, #12
 8001660:	2208      	movs	r2, #8
 8001662:	4619      	mov	r1, r3
 8001664:	f004 fd10 	bl	8006088 <memcpy>
	_can_info.pFrames[index]->tick_ms = CAN_GetTickMs();
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <CAN_ReceiveCallback+0x70>)
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	685c      	ldr	r4, [r3, #4]
 8001672:	f7ff ffbf 	bl	80015f4 <CAN_GetTickMs>
 8001676:	4603      	mov	r3, r0
 8001678:	61a3      	str	r3, [r4, #24]
	if(CAN_RxCallback != NULL) CAN_RxCallback(_can_info.pFrames[index]);
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <CAN_ReceiveCallback+0x74>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00a      	beq.n	8001698 <CAN_ReceiveCallback+0x68>
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <CAN_ReceiveCallback+0x74>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	4905      	ldr	r1, [pc, #20]	; (80016a0 <CAN_ReceiveCallback+0x70>)
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	4790      	blx	r2
 8001694:	e000      	b.n	8001698 <CAN_ReceiveCallback+0x68>
	if(index==255) return;
 8001696:	bf00      	nop
}
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}
 800169e:	bf00      	nop
 80016a0:	200003c0 	.word	0x200003c0
 80016a4:	20000224 	.word	0x20000224

080016a8 <CAN_TxCompleteCallback>:

void CAN_TxCompleteCallback(){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0

	uint8_t* pFrame;


	pFrame = CAN_FIFO_Get(&FIFO_CAN_TX);
 80016ae:	4807      	ldr	r0, [pc, #28]	; (80016cc <CAN_TxCompleteCallback+0x24>)
 80016b0:	f7ff fef8 	bl	80014a4 <CAN_FIFO_Get>
 80016b4:	6078      	str	r0, [r7, #4]
	if(!pFrame) return;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <CAN_TxCompleteCallback+0x1c>
	CAN_SendFrame((struct can_frame*)pFrame);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ffa1 	bl	8001604 <CAN_SendFrame>
 80016c2:	e000      	b.n	80016c6 <CAN_TxCompleteCallback+0x1e>
	if(!pFrame) return;
 80016c4:	bf00      	nop
}
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000228 	.word	0x20000228

080016d0 <CAN_HW_Init>:
#include "CAN_LIB_HW.h"

uint8_t retransmision_counter;

void CAN_HW_Init(){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

	static CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <CAN_HW_Init+0x7c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <CAN_HW_Init+0x7c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <CAN_HW_Init+0x7c>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <CAN_HW_Init+0x7c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <CAN_HW_Init+0x7c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <CAN_HW_Init+0x7c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <CAN_HW_Init+0x7c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <CAN_HW_Init+0x7c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <CAN_HW_Init+0x7c>)
 8001706:	2201      	movs	r2, #1
 8001708:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <CAN_HW_Init+0x7c>)
 800170c:	220e      	movs	r2, #14
 800170e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&CAN_HANDLE, &sFilterConfig) != HAL_OK)
 8001710:	490e      	ldr	r1, [pc, #56]	; (800174c <CAN_HW_Init+0x7c>)
 8001712:	480f      	ldr	r0, [pc, #60]	; (8001750 <CAN_HW_Init+0x80>)
 8001714:	f001 fdcb 	bl	80032ae <HAL_CAN_ConfigFilter>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <CAN_HW_Init+0x52>
	{
		/* Filter configuration Error */
		Error_Handler();
 800171e:	f7ff fcf9 	bl	8001114 <Error_Handler>
	}

	if (HAL_CAN_Start(&CAN_HANDLE) != HAL_OK)
 8001722:	480b      	ldr	r0, [pc, #44]	; (8001750 <CAN_HW_Init+0x80>)
 8001724:	f001 fe8d 	bl	8003442 <HAL_CAN_Start>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <CAN_HW_Init+0x62>
	{
		/* Start Error */
		Error_Handler();
 800172e:	f7ff fcf1 	bl	8001114 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&CAN_HANDLE, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_OVERRUN
 8001732:	f248 010f 	movw	r1, #32783	; 0x800f
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <CAN_HW_Init+0x80>)
 8001738:	f001 ffe9 	bl	800370e <HAL_CAN_ActivateNotification>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <CAN_HW_Init+0x76>
			| CAN_IT_RX_FIFO0_FULL | CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_ERROR) != HAL_OK)
	{
		/* Notification Error */
		Error_Handler();
 8001742:	f7ff fce7 	bl	8001114 <Error_Handler>
	}

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	2000041c 	.word	0x2000041c
 8001750:	2000017c 	.word	0x2000017c

08001754 <CAN_HW_GetTickMs>:

inline uint32_t CAN_HW_GetTickMs(){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8001758:	f000 f93a 	bl	80019d0 <HAL_GetTick>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <CAN_HW_SendFrame>:

uint8_t CAN_HW_SendFrame(struct can_frame* pFrame){
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

	/* Check if mailbox is free */
    if ((CAN_HANDLE.Instance->TSR & CAN_TSR_TME0) == 0U) return 0;
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <CAN_HW_SendFrame+0xc0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <CAN_HW_SendFrame+0x1a>
 800177a:	2300      	movs	r3, #0
 800177c:	e04b      	b.n	8001816 <CAN_HW_SendFrame+0xb2>

    /* Set up the Id */
    if(pFrame->core.isExtId){
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <CAN_HW_SendFrame+0x36>
    	CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_EXID_Pos) | CAN_ID_EXT | CAN_RTR_DATA);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	00da      	lsls	r2, r3, #3
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <CAN_HW_SendFrame+0xc0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0204 	orr.w	r2, r2, #4
 8001794:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001798:	e006      	b.n	80017a8 <CAN_HW_SendFrame+0x44>
    }
    else{
        CAN_HANDLE.Instance->sTxMailBox[0].TIR = ((pFrame->core.id << CAN_TI0R_STID_Pos) | CAN_RTR_DATA);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <CAN_HW_SendFrame+0xc0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0552      	lsls	r2, r2, #21
 80017a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    }

    /* Set up the DLC */
    CAN_HANDLE.Instance->sTxMailBox[0].TDTR = pFrame->core.dlc;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <CAN_HW_SendFrame+0xc0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6892      	ldr	r2, [r2, #8]
 80017b0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    /* Set up the data field */
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDHR,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	7cdb      	ldrb	r3, [r3, #19]
 80017b8:	061a      	lsls	r2, r3, #24
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7c9b      	ldrb	r3, [r3, #18]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7c5b      	ldrb	r3, [r3, #17]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7c1b      	ldrb	r3, [r3, #16]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <CAN_HW_SendFrame+0xc0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
              ((uint32_t)pFrame->core.data[7] << CAN_TDH0R_DATA7_Pos) |
              ((uint32_t)pFrame->core.data[6] << CAN_TDH0R_DATA6_Pos) |
              ((uint32_t)pFrame->core.data[5] << CAN_TDH0R_DATA5_Pos) |
              ((uint32_t)pFrame->core.data[4] << CAN_TDH0R_DATA4_Pos));
    WRITE_REG(CAN_HANDLE.Instance->sTxMailBox[0].TDLR,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7bdb      	ldrb	r3, [r3, #15]
 80017de:	061a      	lsls	r2, r3, #24
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7b9b      	ldrb	r3, [r3, #14]
 80017e4:	041b      	lsls	r3, r3, #16
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7b5b      	ldrb	r3, [r3, #13]
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7b1b      	ldrb	r3, [r3, #12]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <CAN_HW_SendFrame+0xc0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
              ((uint32_t)pFrame->core.data[2] << CAN_TDL0R_DATA2_Pos) |
              ((uint32_t)pFrame->core.data[1] << CAN_TDL0R_DATA1_Pos) |
              ((uint32_t)pFrame->core.data[0] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(CAN_HANDLE.Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <CAN_HW_SendFrame+0xc0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <CAN_HW_SendFrame+0xc0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	2000017c 	.word	0x2000017c

08001828 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 8001830:	f7ff ff3a 	bl	80016a8 <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000418 	.word	0x20000418

08001848 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	CAN_TxCompleteCallback();
 8001850:	f7ff ff2a 	bl	80016a8 <CAN_TxCompleteCallback>
	retransmision_counter = 0;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_CAN_TxMailbox0AbortCallback+0x1c>)
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000418 	.word	0x20000418

08001868 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

	static struct can_msg msg;
	static CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data);
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001874:	2100      	movs	r1, #0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f001 fe27 	bl	80034ca <HAL_CAN_GetRxMessage>
	msg.dlc = RxHeader.DLC;
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001882:	6093      	str	r3, [r2, #8]
	msg.id = RxHeader.StdId;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800188a:	6053      	str	r3, [r2, #4]
	CAN_ReceiveCallback(&msg);
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800188e:	f7ff fecf 	bl	8001630 <CAN_ReceiveCallback>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000046c 	.word	0x2000046c
 80018a0:	20000444 	.word	0x20000444
 80018a4:	20000460 	.word	0x20000460

080018a8 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

	static uint32_t errorcode;
	errorcode = HAL_CAN_GetError(hcan);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f002 f94f 	bl	8003b68 <HAL_CAN_GetError>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_CAN_ErrorCallback+0x58>)
 80018ce:	6013      	str	r3, [r2, #0]
	HAL_CAN_ResetError(hcan);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f002 f955 	bl	8003b80 <HAL_CAN_ResetError>

	/* arbitration lost, retransmit */
	if(errorcode & HAL_CAN_ERROR_TX_ALST0){
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_CAN_ErrorCallback+0x58>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d013      	beq.n	800190a <HAL_CAN_ErrorCallback+0x4e>

		if(retransmision_counter < CAN_ARB_LOST_RETR){
 80018e2:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_CAN_ErrorCallback+0x5c>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b13      	cmp	r3, #19
 80018e8:	d80f      	bhi.n	800190a <HAL_CAN_ErrorCallback+0x4e>
		    SET_BIT(CAN_HANDLE->Instance->sTxMailBox[0].TIR, CAN_TI0R_TXRQ);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			retransmision_counter++;
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_CAN_ErrorCallback+0x5c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_CAN_ErrorCallback+0x5c>)
 8001908:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000474 	.word	0x20000474
 8001918:	20000418 	.word	0x20000418

0800191c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_Init+0x28>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_Init+0x28>)
 8001926:	f043 0310 	orr.w	r3, r3, #16
 800192a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f002 fa1b 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	200f      	movs	r0, #15
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fc44 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000

08001948 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fa33 	bl	8003dd2 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f002 f9fb 	bl	8003d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000478 	.word	0x20000478

080019d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000478 	.word	0x20000478

080019e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b09a      	sub	sp, #104	; 0x68
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e1c9      	b.n	8001dc4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 0310 	and.w	r3, r3, #16
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d176      	bne.n	8001b30 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d152      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff f9a7 	bl	8000db8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d13b      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f001 fab7 	bl	8002fec <ADC_Disable>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d12f      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
 8001a90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d12b      	bne.n	8001af0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aa0:	f023 0302 	bic.w	r3, r3, #2
 8001aa4:	f043 0202 	orr.w	r2, r3, #2
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001acc:	4b86      	ldr	r3, [pc, #536]	; (8001ce8 <HAL_ADC_Init+0x2d8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a86      	ldr	r2, [pc, #536]	; (8001cec <HAL_ADC_Init+0x2dc>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9a      	lsrs	r2, r3, #18
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ae2:	e002      	b.n	8001aea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0c:	d110      	bne.n	8001b30 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f023 0312 	bic.w	r3, r3, #18
 8001b16:	f043 0210 	orr.w	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f043 0201 	orr.w	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 8136 	bne.w	8001daa <HAL_ADC_Init+0x39a>
 8001b3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 8131 	bne.w	8001daa <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 8129 	bne.w	8001daa <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b60:	f043 0202 	orr.w	r2, r3, #2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b70:	d004      	beq.n	8001b7c <HAL_ADC_Init+0x16c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5e      	ldr	r2, [pc, #376]	; (8001cf0 <HAL_ADC_Init+0x2e0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d101      	bne.n	8001b80 <HAL_ADC_Init+0x170>
 8001b7c:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_ADC_Init+0x2e4>)
 8001b7e:	e000      	b.n	8001b82 <HAL_ADC_Init+0x172>
 8001b80:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <HAL_ADC_Init+0x2e8>)
 8001b82:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b8c:	d102      	bne.n	8001b94 <HAL_ADC_Init+0x184>
 8001b8e:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <HAL_ADC_Init+0x2e0>)
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e01a      	b.n	8001bca <HAL_ADC_Init+0x1ba>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a55      	ldr	r2, [pc, #340]	; (8001cf0 <HAL_ADC_Init+0x2e0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d103      	bne.n	8001ba6 <HAL_ADC_Init+0x196>
 8001b9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e011      	b.n	8001bca <HAL_ADC_Init+0x1ba>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a54      	ldr	r2, [pc, #336]	; (8001cfc <HAL_ADC_Init+0x2ec>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d102      	bne.n	8001bb6 <HAL_ADC_Init+0x1a6>
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_ADC_Init+0x2f0>)
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e009      	b.n	8001bca <HAL_ADC_Init+0x1ba>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a51      	ldr	r2, [pc, #324]	; (8001d00 <HAL_ADC_Init+0x2f0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d102      	bne.n	8001bc6 <HAL_ADC_Init+0x1b6>
 8001bc0:	4b4e      	ldr	r3, [pc, #312]	; (8001cfc <HAL_ADC_Init+0x2ec>)
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e001      	b.n	8001bca <HAL_ADC_Init+0x1ba>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d108      	bne.n	8001bea <HAL_ADC_Init+0x1da>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Init+0x1da>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_ADC_Init+0x1dc>
 8001bea:	2300      	movs	r3, #0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11c      	bne.n	8001c2a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d010      	beq.n	8001c18 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_ADC_Init+0x202>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_Init+0x202>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_ADC_Init+0x204>
 8001c12:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d108      	bne.n	8001c2a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	431a      	orrs	r2, r3
 8001c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c28:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7e5b      	ldrb	r3, [r3, #25]
 8001c2e:	035b      	lsls	r3, r3, #13
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c34:	2a01      	cmp	r2, #1
 8001c36:	d002      	beq.n	8001c3e <HAL_ADC_Init+0x22e>
 8001c38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c3c:	e000      	b.n	8001c40 <HAL_ADC_Init+0x230>
 8001c3e:	2200      	movs	r2, #0
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c50:	4313      	orrs	r3, r2
 8001c52:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d11b      	bne.n	8001c96 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7e5b      	ldrb	r3, [r3, #25]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	045a      	lsls	r2, r3, #17
 8001c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	663b      	str	r3, [r7, #96]	; 0x60
 8001c78:	e00d      	b.n	8001c96 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001c82:	f043 0220 	orr.w	r2, r3, #32
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d03a      	beq.n	8001d14 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <HAL_ADC_Init+0x2ec>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d004      	beq.n	8001cb2 <HAL_ADC_Init+0x2a2>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_ADC_Init+0x2f0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d128      	bne.n	8001d04 <HAL_ADC_Init+0x2f4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001cba:	d012      	beq.n	8001ce2 <HAL_ADC_Init+0x2d2>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc4:	d00a      	beq.n	8001cdc <HAL_ADC_Init+0x2cc>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001cce:	d002      	beq.n	8001cd6 <HAL_ADC_Init+0x2c6>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	e018      	b.n	8001d08 <HAL_ADC_Init+0x2f8>
 8001cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cda:	e015      	b.n	8001d08 <HAL_ADC_Init+0x2f8>
 8001cdc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001ce0:	e012      	b.n	8001d08 <HAL_ADC_Init+0x2f8>
 8001ce2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001ce6:	e00f      	b.n	8001d08 <HAL_ADC_Init+0x2f8>
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	431bde83 	.word	0x431bde83
 8001cf0:	50000100 	.word	0x50000100
 8001cf4:	50000300 	.word	0x50000300
 8001cf8:	50000700 	.word	0x50000700
 8001cfc:	50000400 	.word	0x50000400
 8001d00:	50000500 	.word	0x50000500
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d10:	4313      	orrs	r3, r2
 8001d12:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d114      	bne.n	8001d4c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d30:	f023 0302 	bic.w	r3, r3, #2
 8001d34:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7e1b      	ldrb	r3, [r3, #24]
 8001d3a:	039a      	lsls	r2, r3, #14
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4313      	orrs	r3, r2
 8001d46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_ADC_Init+0x3bc>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d10c      	bne.n	8001d82 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f023 010f 	bic.w	r1, r3, #15
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d80:	e007      	b.n	8001d92 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 020f 	bic.w	r2, r2, #15
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	f023 0303 	bic.w	r3, r3, #3
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40
 8001da8:	e00a      	b.n	8001dc0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f023 0312 	bic.w	r3, r3, #18
 8001db2:	f043 0210 	orr.w	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001dc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3768      	adds	r7, #104	; 0x68
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	fff0c007 	.word	0xfff0c007

08001dd0 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 8123 	bne.w	8002032 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_Start_IT+0x2a>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e11e      	b.n	8002038 <HAL_ADC_Start_IT+0x268>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f001 f88e 	bl	8002f24 <ADC_Enable>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 810a 	bne.w	8002028 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e30:	d004      	beq.n	8001e3c <HAL_ADC_Start_IT+0x6c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a82      	ldr	r2, [pc, #520]	; (8002040 <HAL_ADC_Start_IT+0x270>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d106      	bne.n	8001e4a <HAL_ADC_Start_IT+0x7a>
 8001e3c:	4b81      	ldr	r3, [pc, #516]	; (8002044 <HAL_ADC_Start_IT+0x274>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_ADC_Start_IT+0x9a>
 8001e48:	e005      	b.n	8001e56 <HAL_ADC_Start_IT+0x86>
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	; (8002048 <HAL_ADC_Start_IT+0x278>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_ADC_Start_IT+0x9a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e5e:	d004      	beq.n	8001e6a <HAL_ADC_Start_IT+0x9a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a79      	ldr	r2, [pc, #484]	; (800204c <HAL_ADC_Start_IT+0x27c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d115      	bne.n	8001e96 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d036      	beq.n	8001ef2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e94:	e02d      	b.n	8001ef2 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eaa:	d004      	beq.n	8001eb6 <HAL_ADC_Start_IT+0xe6>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a63      	ldr	r2, [pc, #396]	; (8002040 <HAL_ADC_Start_IT+0x270>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10a      	bne.n	8001ecc <HAL_ADC_Start_IT+0xfc>
 8001eb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf14      	ite	ne
 8001ec4:	2301      	movne	r3, #1
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e008      	b.n	8001ede <HAL_ADC_Start_IT+0x10e>
 8001ecc:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_ADC_Start_IT+0x27c>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efe:	d106      	bne.n	8001f0e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	f023 0206 	bic.w	r2, r3, #6
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	221c      	movs	r2, #28
 8001f22:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d110      	bne.n	8001f4e <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0204 	bic.w	r2, r2, #4
 8001f3a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0208 	orr.w	r2, r2, #8
 8001f4a:	605a      	str	r2, [r3, #4]
          break;
 8001f4c:	e008      	b.n	8001f60 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 020c 	orr.w	r2, r2, #12
 8001f5c:	605a      	str	r2, [r3, #4]
          break;
 8001f5e:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d107      	bne.n	8001f78 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0210 	bic.w	r2, r2, #16
 8001f76:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f80:	d004      	beq.n	8001f8c <HAL_ADC_Start_IT+0x1bc>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <HAL_ADC_Start_IT+0x270>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d106      	bne.n	8001f9a <HAL_ADC_Start_IT+0x1ca>
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_ADC_Start_IT+0x274>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d03e      	beq.n	8002016 <HAL_ADC_Start_IT+0x246>
 8001f98:	e005      	b.n	8001fa6 <HAL_ADC_Start_IT+0x1d6>
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_ADC_Start_IT+0x278>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d037      	beq.n	8002016 <HAL_ADC_Start_IT+0x246>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fae:	d004      	beq.n	8001fba <HAL_ADC_Start_IT+0x1ea>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a22      	ldr	r2, [pc, #136]	; (8002040 <HAL_ADC_Start_IT+0x270>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d106      	bne.n	8001fc8 <HAL_ADC_Start_IT+0x1f8>
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_ADC_Start_IT+0x274>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d027      	beq.n	8002016 <HAL_ADC_Start_IT+0x246>
 8001fc6:	e005      	b.n	8001fd4 <HAL_ADC_Start_IT+0x204>
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <HAL_ADC_Start_IT+0x278>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d020      	beq.n	8002016 <HAL_ADC_Start_IT+0x246>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fdc:	d004      	beq.n	8001fe8 <HAL_ADC_Start_IT+0x218>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a17      	ldr	r2, [pc, #92]	; (8002040 <HAL_ADC_Start_IT+0x270>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d106      	bne.n	8001ff6 <HAL_ADC_Start_IT+0x226>
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_ADC_Start_IT+0x274>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2b09      	cmp	r3, #9
 8001ff2:	d010      	beq.n	8002016 <HAL_ADC_Start_IT+0x246>
 8001ff4:	e005      	b.n	8002002 <HAL_ADC_Start_IT+0x232>
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <HAL_ADC_Start_IT+0x278>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d009      	beq.n	8002016 <HAL_ADC_Start_IT+0x246>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800200a:	d004      	beq.n	8002016 <HAL_ADC_Start_IT+0x246>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_ADC_Start_IT+0x27c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10f      	bne.n	8002036 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0204 	orr.w	r2, r2, #4
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	e006      	b.n	8002036 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002030:	e001      	b.n	8002036 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	50000100 	.word	0x50000100
 8002044:	50000300 	.word	0x50000300
 8002048:	50000700 	.word	0x50000700
 800204c:	50000400 	.word	0x50000400

08002050 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <HAL_ADC_IRQHandler+0x38>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80bc 	beq.w	8002228 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80b6 	beq.w	8002228 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020dc:	d004      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x7c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a90      	ldr	r2, [pc, #576]	; (8002324 <HAL_ADC_IRQHandler+0x2b8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d106      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x8a>
 80020e8:	4b8f      	ldr	r3, [pc, #572]	; (8002328 <HAL_ADC_IRQHandler+0x2bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d03e      	beq.n	8002172 <HAL_ADC_IRQHandler+0x106>
 80020f4:	e005      	b.n	8002102 <HAL_ADC_IRQHandler+0x96>
 80020f6:	4b8d      	ldr	r3, [pc, #564]	; (800232c <HAL_ADC_IRQHandler+0x2c0>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d037      	beq.n	8002172 <HAL_ADC_IRQHandler+0x106>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800210a:	d004      	beq.n	8002116 <HAL_ADC_IRQHandler+0xaa>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a84      	ldr	r2, [pc, #528]	; (8002324 <HAL_ADC_IRQHandler+0x2b8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d106      	bne.n	8002124 <HAL_ADC_IRQHandler+0xb8>
 8002116:	4b84      	ldr	r3, [pc, #528]	; (8002328 <HAL_ADC_IRQHandler+0x2bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 031f 	and.w	r3, r3, #31
 800211e:	2b05      	cmp	r3, #5
 8002120:	d027      	beq.n	8002172 <HAL_ADC_IRQHandler+0x106>
 8002122:	e005      	b.n	8002130 <HAL_ADC_IRQHandler+0xc4>
 8002124:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_ADC_IRQHandler+0x2c0>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2b05      	cmp	r3, #5
 800212e:	d020      	beq.n	8002172 <HAL_ADC_IRQHandler+0x106>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002138:	d004      	beq.n	8002144 <HAL_ADC_IRQHandler+0xd8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a79      	ldr	r2, [pc, #484]	; (8002324 <HAL_ADC_IRQHandler+0x2b8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d106      	bne.n	8002152 <HAL_ADC_IRQHandler+0xe6>
 8002144:	4b78      	ldr	r3, [pc, #480]	; (8002328 <HAL_ADC_IRQHandler+0x2bc>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	2b09      	cmp	r3, #9
 800214e:	d010      	beq.n	8002172 <HAL_ADC_IRQHandler+0x106>
 8002150:	e005      	b.n	800215e <HAL_ADC_IRQHandler+0xf2>
 8002152:	4b76      	ldr	r3, [pc, #472]	; (800232c <HAL_ADC_IRQHandler+0x2c0>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2b09      	cmp	r3, #9
 800215c:	d009      	beq.n	8002172 <HAL_ADC_IRQHandler+0x106>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002166:	d004      	beq.n	8002172 <HAL_ADC_IRQHandler+0x106>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a70      	ldr	r2, [pc, #448]	; (8002330 <HAL_ADC_IRQHandler+0x2c4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d104      	bne.n	800217c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	e00f      	b.n	800219c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002184:	d004      	beq.n	8002190 <HAL_ADC_IRQHandler+0x124>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a66      	ldr	r2, [pc, #408]	; (8002324 <HAL_ADC_IRQHandler+0x2b8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d102      	bne.n	8002196 <HAL_ADC_IRQHandler+0x12a>
 8002190:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002194:	e000      	b.n	8002198 <HAL_ADC_IRQHandler+0x12c>
 8002196:	4b66      	ldr	r3, [pc, #408]	; (8002330 <HAL_ADC_IRQHandler+0x2c4>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d137      	bne.n	800221a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d132      	bne.n	800221a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d02d      	beq.n	800221a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11a      	bne.n	8002202 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 020c 	bic.w	r2, r2, #12
 80021da:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d112      	bne.n	800221a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002200:	e00b      	b.n	800221a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fd ffe6 	bl	80001ec <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	220c      	movs	r2, #12
 8002226:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <HAL_ADC_IRQHandler+0x1d0>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10b      	bne.n	8002254 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8138 	beq.w	80024b8 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8132 	beq.w	80024b8 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002268:	d004      	beq.n	8002274 <HAL_ADC_IRQHandler+0x208>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <HAL_ADC_IRQHandler+0x2b8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d106      	bne.n	8002282 <HAL_ADC_IRQHandler+0x216>
 8002274:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <HAL_ADC_IRQHandler+0x2bc>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2b00      	cmp	r3, #0
 800227e:	d03e      	beq.n	80022fe <HAL_ADC_IRQHandler+0x292>
 8002280:	e005      	b.n	800228e <HAL_ADC_IRQHandler+0x222>
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_ADC_IRQHandler+0x2c0>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2b00      	cmp	r3, #0
 800228c:	d037      	beq.n	80022fe <HAL_ADC_IRQHandler+0x292>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002296:	d004      	beq.n	80022a2 <HAL_ADC_IRQHandler+0x236>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_ADC_IRQHandler+0x2b8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d106      	bne.n	80022b0 <HAL_ADC_IRQHandler+0x244>
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_ADC_IRQHandler+0x2bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d027      	beq.n	80022fe <HAL_ADC_IRQHandler+0x292>
 80022ae:	e005      	b.n	80022bc <HAL_ADC_IRQHandler+0x250>
 80022b0:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_ADC_IRQHandler+0x2c0>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d020      	beq.n	80022fe <HAL_ADC_IRQHandler+0x292>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c4:	d004      	beq.n	80022d0 <HAL_ADC_IRQHandler+0x264>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_ADC_IRQHandler+0x2b8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d106      	bne.n	80022de <HAL_ADC_IRQHandler+0x272>
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_ADC_IRQHandler+0x2bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2b09      	cmp	r3, #9
 80022da:	d010      	beq.n	80022fe <HAL_ADC_IRQHandler+0x292>
 80022dc:	e005      	b.n	80022ea <HAL_ADC_IRQHandler+0x27e>
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_ADC_IRQHandler+0x2c0>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2b09      	cmp	r3, #9
 80022e8:	d009      	beq.n	80022fe <HAL_ADC_IRQHandler+0x292>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_IRQHandler+0x292>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_ADC_IRQHandler+0x2c4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d104      	bne.n	8002308 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	e018      	b.n	800233a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002310:	d004      	beq.n	800231c <HAL_ADC_IRQHandler+0x2b0>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a03      	ldr	r2, [pc, #12]	; (8002324 <HAL_ADC_IRQHandler+0x2b8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d10b      	bne.n	8002334 <HAL_ADC_IRQHandler+0x2c8>
 800231c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002320:	e009      	b.n	8002336 <HAL_ADC_IRQHandler+0x2ca>
 8002322:	bf00      	nop
 8002324:	50000100 	.word	0x50000100
 8002328:	50000300 	.word	0x50000300
 800232c:	50000700 	.word	0x50000700
 8002330:	50000400 	.word	0x50000400
 8002334:	4b92      	ldr	r3, [pc, #584]	; (8002580 <HAL_ADC_IRQHandler+0x514>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002340:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002344:	2b00      	cmp	r3, #0
 8002346:	f040 80b0 	bne.w	80024aa <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 80a3 	bne.w	80024aa <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 809d 	bne.w	80024aa <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8097 	beq.w	80024aa <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002384:	d004      	beq.n	8002390 <HAL_ADC_IRQHandler+0x324>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7e      	ldr	r2, [pc, #504]	; (8002584 <HAL_ADC_IRQHandler+0x518>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d106      	bne.n	800239e <HAL_ADC_IRQHandler+0x332>
 8002390:	4b7d      	ldr	r3, [pc, #500]	; (8002588 <HAL_ADC_IRQHandler+0x51c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	2b00      	cmp	r3, #0
 800239a:	d03e      	beq.n	800241a <HAL_ADC_IRQHandler+0x3ae>
 800239c:	e005      	b.n	80023aa <HAL_ADC_IRQHandler+0x33e>
 800239e:	4b7b      	ldr	r3, [pc, #492]	; (800258c <HAL_ADC_IRQHandler+0x520>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d037      	beq.n	800241a <HAL_ADC_IRQHandler+0x3ae>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023b2:	d004      	beq.n	80023be <HAL_ADC_IRQHandler+0x352>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a72      	ldr	r2, [pc, #456]	; (8002584 <HAL_ADC_IRQHandler+0x518>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d106      	bne.n	80023cc <HAL_ADC_IRQHandler+0x360>
 80023be:	4b72      	ldr	r3, [pc, #456]	; (8002588 <HAL_ADC_IRQHandler+0x51c>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d027      	beq.n	800241a <HAL_ADC_IRQHandler+0x3ae>
 80023ca:	e005      	b.n	80023d8 <HAL_ADC_IRQHandler+0x36c>
 80023cc:	4b6f      	ldr	r3, [pc, #444]	; (800258c <HAL_ADC_IRQHandler+0x520>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d020      	beq.n	800241a <HAL_ADC_IRQHandler+0x3ae>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e0:	d004      	beq.n	80023ec <HAL_ADC_IRQHandler+0x380>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a67      	ldr	r2, [pc, #412]	; (8002584 <HAL_ADC_IRQHandler+0x518>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d106      	bne.n	80023fa <HAL_ADC_IRQHandler+0x38e>
 80023ec:	4b66      	ldr	r3, [pc, #408]	; (8002588 <HAL_ADC_IRQHandler+0x51c>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	2b07      	cmp	r3, #7
 80023f6:	d010      	beq.n	800241a <HAL_ADC_IRQHandler+0x3ae>
 80023f8:	e005      	b.n	8002406 <HAL_ADC_IRQHandler+0x39a>
 80023fa:	4b64      	ldr	r3, [pc, #400]	; (800258c <HAL_ADC_IRQHandler+0x520>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2b07      	cmp	r3, #7
 8002404:	d009      	beq.n	800241a <HAL_ADC_IRQHandler+0x3ae>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240e:	d004      	beq.n	800241a <HAL_ADC_IRQHandler+0x3ae>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5a      	ldr	r2, [pc, #360]	; (8002580 <HAL_ADC_IRQHandler+0x514>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d104      	bne.n	8002424 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e00f      	b.n	8002444 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242c:	d004      	beq.n	8002438 <HAL_ADC_IRQHandler+0x3cc>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a54      	ldr	r2, [pc, #336]	; (8002584 <HAL_ADC_IRQHandler+0x518>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d102      	bne.n	800243e <HAL_ADC_IRQHandler+0x3d2>
 8002438:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800243c:	e000      	b.n	8002440 <HAL_ADC_IRQHandler+0x3d4>
 800243e:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_ADC_IRQHandler+0x514>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d12d      	bne.n	80024aa <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d11a      	bne.n	8002492 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800246a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d112      	bne.n	80024aa <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
 8002490:	e00b      	b.n	80024aa <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f936 	bl	800271c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2260      	movs	r2, #96	; 0x60
 80024b6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d011      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x47a>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fa85 	bl	80019e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d012      	beq.n	8002516 <HAL_ADC_IRQHandler+0x4aa>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f91c 	bl	8002744 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002514:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251c:	2b00      	cmp	r3, #0
 800251e:	d012      	beq.n	8002546 <HAL_ADC_IRQHandler+0x4da>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f90e 	bl	8002758 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002544:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	d04f      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x584>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d04a      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	2b01      	cmp	r3, #1
 8002560:	d102      	bne.n	8002568 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002562:	2301      	movs	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	e02d      	b.n	80025c4 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002570:	d004      	beq.n	800257c <HAL_ADC_IRQHandler+0x510>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_ADC_IRQHandler+0x518>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d109      	bne.n	8002590 <HAL_ADC_IRQHandler+0x524>
 800257c:	4b02      	ldr	r3, [pc, #8]	; (8002588 <HAL_ADC_IRQHandler+0x51c>)
 800257e:	e008      	b.n	8002592 <HAL_ADC_IRQHandler+0x526>
 8002580:	50000400 	.word	0x50000400
 8002584:	50000100 	.word	0x50000100
 8002588:	50000300 	.word	0x50000300
 800258c:	50000700 	.word	0x50000700
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_ADC_IRQHandler+0x5c8>)
 8002592:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10a      	bne.n	80025c4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80025ae:	2301      	movs	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	e007      	b.n	80025c4 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80025c0:	2301      	movs	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d10e      	bne.n	80025e8 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f043 0202 	orr.w	r2, r3, #2
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fa0a 	bl	80019fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2210      	movs	r2, #16
 80025ee:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d018      	beq.n	800262c <HAL_ADC_IRQHandler+0x5c0>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f043 0208 	orr.w	r2, r3, #8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002624:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f882 	bl	8002730 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800262c:	bf00      	nop
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	50000700 	.word	0x50000700

08002638 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_ADCEx_Calibration_Start+0x1c>
 8002650:	2302      	movs	r3, #2
 8002652:	e05f      	b.n	8002714 <HAL_ADCEx_Calibration_Start+0xdc>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fcc5 	bl	8002fec <ADC_Disable>
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d14e      	bne.n	800270a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002680:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002696:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026a6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80026a8:	f7ff f992 	bl	80019d0 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026ae:	e01c      	b.n	80026ea <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026b0:	f7ff f98e 	bl	80019d0 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b0a      	cmp	r3, #10
 80026bc:	d915      	bls.n	80026ea <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026cc:	d10d      	bne.n	80026ea <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f023 0312 	bic.w	r3, r3, #18
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e014      	b.n	8002714 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026f8:	d0da      	beq.n	80026b0 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800276c:	b480      	push	{r7}
 800276e:	b09b      	sub	sp, #108	; 0x6c
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x22>
 800278a:	2302      	movs	r3, #2
 800278c:	e2c8      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x5b4>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f040 82ac 	bne.w	8002cfe <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d81c      	bhi.n	80027e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	461a      	mov	r2, r3
 80027c2:	231f      	movs	r3, #31
 80027c4:	4093      	lsls	r3, r2
 80027c6:	43db      	mvns	r3, r3
 80027c8:	4019      	ands	r1, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa00 f203 	lsl.w	r2, r0, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
 80027e6:	e063      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b09      	cmp	r3, #9
 80027ee:	d81e      	bhi.n	800282e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	3b1e      	subs	r3, #30
 8002804:	221f      	movs	r2, #31
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	4019      	ands	r1, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	3b1e      	subs	r3, #30
 8002820:	fa00 f203 	lsl.w	r2, r0, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	635a      	str	r2, [r3, #52]	; 0x34
 800282c:	e040      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b0e      	cmp	r3, #14
 8002834:	d81e      	bhi.n	8002874 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	3b3c      	subs	r3, #60	; 0x3c
 800284a:	221f      	movs	r2, #31
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	4019      	ands	r1, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	3b3c      	subs	r3, #60	; 0x3c
 8002866:	fa00 f203 	lsl.w	r2, r0, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
 8002872:	e01d      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	3b5a      	subs	r3, #90	; 0x5a
 8002888:	221f      	movs	r2, #31
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	4019      	ands	r1, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	3b5a      	subs	r3, #90	; 0x5a
 80028a4:	fa00 f203 	lsl.w	r2, r0, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 80e5 	bne.w	8002a8a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b09      	cmp	r3, #9
 80028c6:	d91c      	bls.n	8002902 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6999      	ldr	r1, [r3, #24]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	3b1e      	subs	r3, #30
 80028da:	2207      	movs	r2, #7
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	4019      	ands	r1, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	6898      	ldr	r0, [r3, #8]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	3b1e      	subs	r3, #30
 80028f4:	fa00 f203 	lsl.w	r2, r0, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	619a      	str	r2, [r3, #24]
 8002900:	e019      	b.n	8002936 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6959      	ldr	r1, [r3, #20]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	2207      	movs	r2, #7
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	4019      	ands	r1, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6898      	ldr	r0, [r3, #8]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	fa00 f203 	lsl.w	r2, r0, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	3b01      	subs	r3, #1
 8002954:	2b03      	cmp	r3, #3
 8002956:	d84f      	bhi.n	80029f8 <HAL_ADC_ConfigChannel+0x28c>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <HAL_ADC_ConfigChannel+0x1f4>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002971 	.word	0x08002971
 8002964:	08002993 	.word	0x08002993
 8002968:	080029b5 	.word	0x080029b5
 800296c:	080029d7 	.word	0x080029d7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002976:	4b99      	ldr	r3, [pc, #612]	; (8002bdc <HAL_ADC_ConfigChannel+0x470>)
 8002978:	4013      	ands	r3, r2
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	0691      	lsls	r1, r2, #26
 8002980:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002982:	430a      	orrs	r2, r1
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800298e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002990:	e07b      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002998:	4b90      	ldr	r3, [pc, #576]	; (8002bdc <HAL_ADC_ConfigChannel+0x470>)
 800299a:	4013      	ands	r3, r2
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	0691      	lsls	r1, r2, #26
 80029a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029a4:	430a      	orrs	r2, r1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029b0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029b2:	e06a      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029ba:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_ADC_ConfigChannel+0x470>)
 80029bc:	4013      	ands	r3, r2
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	0691      	lsls	r1, r2, #26
 80029c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029c6:	430a      	orrs	r2, r1
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029d2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029d4:	e059      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029dc:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <HAL_ADC_ConfigChannel+0x470>)
 80029de:	4013      	ands	r3, r2
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	0691      	lsls	r1, r2, #26
 80029e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029e8:	430a      	orrs	r2, r1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029f4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029f6:	e048      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	069b      	lsls	r3, r3, #26
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d107      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a1a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	069b      	lsls	r3, r3, #26
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d107      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a3e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	069b      	lsls	r3, r3, #26
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d107      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a62:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d107      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a86:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002a88:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d108      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x33e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x33e>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_ADC_ConfigChannel+0x340>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 8131 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d00f      	beq.n	8002ada <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43da      	mvns	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002ad8:	e049      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	d91c      	bls.n	8002b36 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6999      	ldr	r1, [r3, #24]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b1b      	subs	r3, #27
 8002b0e:	2207      	movs	r2, #7
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4019      	ands	r1, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6898      	ldr	r0, [r3, #8]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	3b1b      	subs	r3, #27
 8002b28:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	e01b      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6959      	ldr	r1, [r3, #20]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	4613      	mov	r3, r2
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4413      	add	r3, r2
 8002b48:	2207      	movs	r2, #7
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	4019      	ands	r1, r3
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6898      	ldr	r0, [r3, #8]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	fa00 f203 	lsl.w	r2, r0, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b76:	d004      	beq.n	8002b82 <HAL_ADC_ConfigChannel+0x416>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_ADC_ConfigChannel+0x474>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x41a>
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <HAL_ADC_ConfigChannel+0x478>)
 8002b84:	e000      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x41c>
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_ADC_ConfigChannel+0x47c>)
 8002b88:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d105      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ba2:	2b11      	cmp	r3, #17
 8002ba4:	d105      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002bb6:	2b12      	cmp	r3, #18
 8002bb8:	f040 80ac 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 80a5 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd2:	d10b      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x480>
 8002bd4:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <HAL_ADC_ConfigChannel+0x474>)
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	e023      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4b6>
 8002bda:	bf00      	nop
 8002bdc:	83fff000 	.word	0x83fff000
 8002be0:	50000100 	.word	0x50000100
 8002be4:	50000300 	.word	0x50000300
 8002be8:	50000700 	.word	0x50000700
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a4e      	ldr	r2, [pc, #312]	; (8002d2c <HAL_ADC_ConfigChannel+0x5c0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d103      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x492>
 8002bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e011      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4b6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a4b      	ldr	r2, [pc, #300]	; (8002d30 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d102      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x4a2>
 8002c08:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	e009      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4b6>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a48      	ldr	r2, [pc, #288]	; (8002d34 <HAL_ADC_ConfigChannel+0x5c8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d102      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x4b2>
 8002c18:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e001      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x4b6>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d108      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x4d6>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x4d6>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x4d8>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d150      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c48:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x4fe>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x4fe>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x500>
 8002c6a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d13c      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d11d      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x548>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c80:	d118      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c8c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c8e:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <HAL_ADC_ConfigChannel+0x5d0>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	0c9a      	lsrs	r2, r3, #18
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ca4:	e002      	b.n	8002cac <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f9      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cb2:	e02e      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b11      	cmp	r3, #17
 8002cba:	d10b      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x568>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cd2:	e01e      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b12      	cmp	r3, #18
 8002cda:	d11a      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ce8:	e013      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002cfc:	e00a      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0220 	orr.w	r2, r3, #32
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d10:	e000      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d12:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	376c      	adds	r7, #108	; 0x6c
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	50000100 	.word	0x50000100
 8002d30:	50000400 	.word	0x50000400
 8002d34:	50000500 	.word	0x50000500
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	431bde83 	.word	0x431bde83

08002d40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b099      	sub	sp, #100	; 0x64
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d58:	d102      	bne.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	e01a      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a6a      	ldr	r2, [pc, #424]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d103      	bne.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002d6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	e011      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a67      	ldr	r2, [pc, #412]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d102      	bne.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d7c:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	e009      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a64      	ldr	r2, [pc, #400]	; (8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d102      	bne.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d8c:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	e001      	b.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b0      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e0a9      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 808d 	bne.w	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 8086 	bne.w	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4b      	ldr	r2, [pc, #300]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002de8:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002dea:	e000      	b.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002dee:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d040      	beq.n	8002e7a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6859      	ldr	r1, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e0a:	035b      	lsls	r3, r3, #13
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e12:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d108      	bne.n	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d15c      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d107      	bne.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002e56:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d14b      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e64:	f023 030f 	bic.w	r3, r3, #15
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	6811      	ldr	r1, [r2, #0]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	6892      	ldr	r2, [r2, #8]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e76:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e78:	e03c      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e84:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d108      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d123      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002ec8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d112      	bne.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ed6:	f023 030f 	bic.w	r3, r3, #15
 8002eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002edc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ede:	e009      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002f02:	4618      	mov	r0, r3
 8002f04:	3764      	adds	r7, #100	; 0x64
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	50000100 	.word	0x50000100
 8002f14:	50000400 	.word	0x50000400
 8002f18:	50000500 	.word	0x50000500
 8002f1c:	50000300 	.word	0x50000300
 8002f20:	50000700 	.word	0x50000700

08002f24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d108      	bne.n	8002f50 <ADC_Enable+0x2c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <ADC_Enable+0x2c>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <ADC_Enable+0x2e>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d143      	bne.n	8002fde <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <ADC_Enable+0xc4>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0210 	orr.w	r2, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e02f      	b.n	8002fe0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002f90:	f7fe fd1e 	bl	80019d0 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f96:	e01b      	b.n	8002fd0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f98:	f7fe fd1a 	bl	80019d0 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d914      	bls.n	8002fd0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d00d      	beq.n	8002fd0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0210 	orr.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e007      	b.n	8002fe0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d1dc      	bne.n	8002f98 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	8000003f 	.word	0x8000003f

08002fec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d108      	bne.n	8003018 <ADC_Disable+0x2c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <ADC_Disable+0x2c>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <ADC_Disable+0x2e>
 8003018:	2300      	movs	r3, #0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d047      	beq.n	80030ae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 030d 	and.w	r3, r3, #13
 8003028:	2b01      	cmp	r3, #1
 800302a:	d10f      	bne.n	800304c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0202 	orr.w	r2, r2, #2
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2203      	movs	r2, #3
 8003042:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003044:	f7fe fcc4 	bl	80019d0 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800304a:	e029      	b.n	80030a0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0210 	orr.w	r2, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e023      	b.n	80030b0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003068:	f7fe fcb2 	bl	80019d0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d914      	bls.n	80030a0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10d      	bne.n	80030a0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0210 	orr.w	r2, r3, #16
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e007      	b.n	80030b0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d0dc      	beq.n	8003068 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0ed      	b.n	80032a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fd fec8 	bl	8000e6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ec:	f7fe fc70 	bl	80019d0 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030f2:	e012      	b.n	800311a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030f4:	f7fe fc6c 	bl	80019d0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b0a      	cmp	r3, #10
 8003100:	d90b      	bls.n	800311a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2205      	movs	r2, #5
 8003112:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0c5      	b.n	80032a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0e5      	beq.n	80030f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0202 	bic.w	r2, r2, #2
 8003136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003138:	f7fe fc4a 	bl	80019d0 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800313e:	e012      	b.n	8003166 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003140:	f7fe fc46 	bl	80019d0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b0a      	cmp	r3, #10
 800314c:	d90b      	bls.n	8003166 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2205      	movs	r2, #5
 800315e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e09f      	b.n	80032a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e5      	bne.n	8003140 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7e1b      	ldrb	r3, [r3, #24]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d108      	bne.n	800318e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e007      	b.n	800319e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7e5b      	ldrb	r3, [r3, #25]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e007      	b.n	80031c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7e9b      	ldrb	r3, [r3, #26]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e007      	b.n	80031f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0220 	bic.w	r2, r2, #32
 80031f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7edb      	ldrb	r3, [r3, #27]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0210 	bic.w	r2, r2, #16
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e007      	b.n	800321c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0210 	orr.w	r2, r2, #16
 800321a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7f1b      	ldrb	r3, [r3, #28]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0208 	orr.w	r2, r2, #8
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e007      	b.n	8003246 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0208 	bic.w	r2, r2, #8
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7f5b      	ldrb	r3, [r3, #29]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0204 	orr.w	r2, r2, #4
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e007      	b.n	8003270 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0204 	bic.w	r2, r2, #4
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	ea42 0103 	orr.w	r1, r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	1e5a      	subs	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80032c6:	7cfb      	ldrb	r3, [r7, #19]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d003      	beq.n	80032d4 <HAL_CAN_ConfigFilter+0x26>
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	f040 80aa 	bne.w	8003428 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032da:	f043 0201 	orr.w	r2, r3, #1
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2201      	movs	r2, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d123      	bne.n	8003356 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43db      	mvns	r3, r3
 8003318:	401a      	ands	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003330:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3248      	adds	r2, #72	; 0x48
 8003336:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800334a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800334c:	6979      	ldr	r1, [r7, #20]
 800334e:	3348      	adds	r3, #72	; 0x48
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d122      	bne.n	80033a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	431a      	orrs	r2, r3
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800337e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3248      	adds	r2, #72	; 0x48
 8003384:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003398:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	3348      	adds	r3, #72	; 0x48
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	401a      	ands	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033be:	e007      	b.n	80033d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033ea:	e007      	b.n	80033fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	431a      	orrs	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e006      	b.n	8003436 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d12e      	bne.n	80034b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800346e:	f7fe faaf 	bl	80019d0 <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003474:	e012      	b.n	800349c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003476:	f7fe faab 	bl	80019d0 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b0a      	cmp	r3, #10
 8003482:	d90b      	bls.n	800349c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2205      	movs	r2, #5
 8003494:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e012      	b.n	80034c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e5      	bne.n	8003476 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e006      	b.n	80034c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034ca:	b480      	push	{r7}
 80034cc:	b087      	sub	sp, #28
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d003      	beq.n	80034ee <HAL_CAN_GetRxMessage+0x24>
 80034e6:	7dfb      	ldrb	r3, [r7, #23]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	f040 8103 	bne.w	80036f4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10e      	bne.n	8003512 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d116      	bne.n	8003530 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0f7      	b.n	8003702 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d107      	bne.n	8003530 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0e8      	b.n	8003702 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	331b      	adds	r3, #27
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4413      	add	r3, r2
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0204 	and.w	r2, r3, #4
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	331b      	adds	r3, #27
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	4413      	add	r3, r2
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0d5b      	lsrs	r3, r3, #21
 800355e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e00b      	b.n	8003580 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	331b      	adds	r3, #27
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4413      	add	r3, r2
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	08db      	lsrs	r3, r3, #3
 8003578:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	331b      	adds	r3, #27
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	4413      	add	r3, r2
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0202 	and.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	331b      	adds	r3, #27
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4413      	add	r3, r2
 80035a2:	3304      	adds	r3, #4
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2208      	movs	r2, #8
 80035b2:	611a      	str	r2, [r3, #16]
 80035b4:	e00b      	b.n	80035ce <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	331b      	adds	r3, #27
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 020f 	and.w	r2, r3, #15
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	331b      	adds	r3, #27
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	331b      	adds	r3, #27
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	0c1b      	lsrs	r3, r3, #16
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	4413      	add	r3, r2
 8003608:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	4413      	add	r3, r2
 800361e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0a1a      	lsrs	r2, r3, #8
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	4413      	add	r3, r2
 8003638:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	0c1a      	lsrs	r2, r3, #16
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	3302      	adds	r3, #2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0e1a      	lsrs	r2, r3, #24
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	3303      	adds	r3, #3
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	4413      	add	r3, r2
 800366c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	3304      	adds	r3, #4
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4413      	add	r3, r2
 8003684:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0a1a      	lsrs	r2, r3, #8
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	3305      	adds	r3, #5
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0c1a      	lsrs	r2, r3, #16
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	3306      	adds	r3, #6
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	0e1a      	lsrs	r2, r3, #24
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	3307      	adds	r3, #7
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d108      	bne.n	80036e0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0220 	orr.w	r2, r2, #32
 80036dc:	60da      	str	r2, [r3, #12]
 80036de:	e007      	b.n	80036f0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0220 	orr.w	r2, r2, #32
 80036ee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e006      	b.n	8003702 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d002      	beq.n	800372c <HAL_CAN_ActivateNotification+0x1e>
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d109      	bne.n	8003740 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6959      	ldr	r1, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e006      	b.n	800374e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
  }
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b08a      	sub	sp, #40	; 0x28
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d07c      	beq.n	800389a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d023      	beq.n	80037f2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2201      	movs	r2, #1
 80037b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fe f833 	bl	8001828 <HAL_CAN_TxMailbox0CompleteCallback>
 80037c2:	e016      	b.n	80037f2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
 80037d6:	e00c      	b.n	80037f2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d004      	beq.n	80037ec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	e002      	b.n	80037f2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fe f82b 	bl	8001848 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d024      	beq.n	8003846 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f959 	bl	8003ac8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003816:	e016      	b.n	8003846 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
 800382a:	e00c      	b.n	8003846 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	e002      	b.n	8003846 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f955 	bl	8003af0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d024      	beq.n	800389a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003858:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f939 	bl	8003adc <HAL_CAN_TxMailbox2CompleteCallback>
 800386a:	e016      	b.n	800389a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	e00c      	b.n	800389a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
 8003892:	e002      	b.n	800389a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f935 	bl	8003b04 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00c      	beq.n	80038be <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2210      	movs	r2, #16
 80038bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2208      	movs	r2, #8
 80038d8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd ffe4 	bl	80018a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d009      	beq.n	80038fe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7fd ffb5 	bl	8001868 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003918:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2210      	movs	r2, #16
 8003920:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00b      	beq.n	8003944 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d006      	beq.n	8003944 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2208      	movs	r2, #8
 800393c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8f4 	bl	8003b2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f8db 	bl	8003b18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00b      	beq.n	8003984 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	d006      	beq.n	8003984 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2210      	movs	r2, #16
 800397c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f8de 	bl	8003b40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d006      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2208      	movs	r2, #8
 800399e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f8d7 	bl	8003b54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d07b      	beq.n	8003aa8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d072      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	f043 0302 	orr.w	r3, r3, #2
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d043      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03e      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a28:	2b60      	cmp	r3, #96	; 0x60
 8003a2a:	d02b      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x32a>
 8003a2c:	2b60      	cmp	r3, #96	; 0x60
 8003a2e:	d82e      	bhi.n	8003a8e <HAL_CAN_IRQHandler+0x334>
 8003a30:	2b50      	cmp	r3, #80	; 0x50
 8003a32:	d022      	beq.n	8003a7a <HAL_CAN_IRQHandler+0x320>
 8003a34:	2b50      	cmp	r3, #80	; 0x50
 8003a36:	d82a      	bhi.n	8003a8e <HAL_CAN_IRQHandler+0x334>
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d019      	beq.n	8003a70 <HAL_CAN_IRQHandler+0x316>
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d826      	bhi.n	8003a8e <HAL_CAN_IRQHandler+0x334>
 8003a40:	2b30      	cmp	r3, #48	; 0x30
 8003a42:	d010      	beq.n	8003a66 <HAL_CAN_IRQHandler+0x30c>
 8003a44:	2b30      	cmp	r3, #48	; 0x30
 8003a46:	d822      	bhi.n	8003a8e <HAL_CAN_IRQHandler+0x334>
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d002      	beq.n	8003a52 <HAL_CAN_IRQHandler+0x2f8>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d005      	beq.n	8003a5c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a50:	e01d      	b.n	8003a8e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a5a:	e019      	b.n	8003a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f043 0310 	orr.w	r3, r3, #16
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a64:	e014      	b.n	8003a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	f043 0320 	orr.w	r3, r3, #32
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a6e:	e00f      	b.n	8003a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a78:	e00a      	b.n	8003a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a82:	e005      	b.n	8003a90 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a8c:	e000      	b.n	8003a90 <HAL_CAN_IRQHandler+0x336>
            break;
 8003a8e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a9e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fd fefe 	bl	80018bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b92:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b94:	7bbb      	ldrb	r3, [r7, #14]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d002      	beq.n	8003ba0 <HAL_CAN_ResetError+0x20>
 8003b9a:	7bbb      	ldrb	r3, [r7, #14]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d103      	bne.n	8003ba8 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8003ba6:	e007      	b.n	8003bb8 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <__NVIC_SetPriorityGrouping+0x44>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003be4:	4013      	ands	r3, r2
 8003be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bfa:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	60d3      	str	r3, [r2, #12]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <__NVIC_GetPriorityGrouping+0x18>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	f003 0307 	and.w	r3, r3, #7
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	db0b      	blt.n	8003c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	f003 021f 	and.w	r2, r3, #31
 8003c44:	4907      	ldr	r1, [pc, #28]	; (8003c64 <__NVIC_EnableIRQ+0x38>)
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	e000e100 	.word	0xe000e100

08003c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db0a      	blt.n	8003c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	490c      	ldr	r1, [pc, #48]	; (8003cb4 <__NVIC_SetPriority+0x4c>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	0112      	lsls	r2, r2, #4
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c90:	e00a      	b.n	8003ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4908      	ldr	r1, [pc, #32]	; (8003cb8 <__NVIC_SetPriority+0x50>)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	3b04      	subs	r3, #4
 8003ca0:	0112      	lsls	r2, r2, #4
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	761a      	strb	r2, [r3, #24]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000e100 	.word	0xe000e100
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f1c3 0307 	rsb	r3, r3, #7
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	bf28      	it	cs
 8003cda:	2304      	movcs	r3, #4
 8003cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d902      	bls.n	8003cec <NVIC_EncodePriority+0x30>
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3b03      	subs	r3, #3
 8003cea:	e000      	b.n	8003cee <NVIC_EncodePriority+0x32>
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	401a      	ands	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d04:	f04f 31ff 	mov.w	r1, #4294967295
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43d9      	mvns	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	4313      	orrs	r3, r2
         );
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d34:	d301      	bcc.n	8003d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00f      	b.n	8003d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <SysTick_Config+0x40>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d42:	210f      	movs	r1, #15
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	f7ff ff8e 	bl	8003c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <SysTick_Config+0x40>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <SysTick_Config+0x40>)
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000e010 	.word	0xe000e010

08003d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff29 	bl	8003bc8 <__NVIC_SetPriorityGrouping>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d90:	f7ff ff3e 	bl	8003c10 <__NVIC_GetPriorityGrouping>
 8003d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff ff8e 	bl	8003cbc <NVIC_EncodePriority>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff5d 	bl	8003c68 <__NVIC_SetPriority>
}
 8003dae:	bf00      	nop
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff31 	bl	8003c2c <__NVIC_EnableIRQ>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ffa2 	bl	8003d24 <SysTick_Config>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfa:	e154      	b.n	80040a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2101      	movs	r1, #1
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8146 	beq.w	80040a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d005      	beq.n	8003e2c <HAL_GPIO_Init+0x40>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d130      	bne.n	8003e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	2203      	movs	r2, #3
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e62:	2201      	movs	r2, #1
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	f003 0201 	and.w	r2, r3, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d017      	beq.n	8003eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d123      	bne.n	8003f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	08da      	lsrs	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3208      	adds	r2, #8
 8003ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	220f      	movs	r2, #15
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0203 	and.w	r2, r3, #3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80a0 	beq.w	80040a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f60:	4b58      	ldr	r3, [pc, #352]	; (80040c4 <HAL_GPIO_Init+0x2d8>)
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	4a57      	ldr	r2, [pc, #348]	; (80040c4 <HAL_GPIO_Init+0x2d8>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6193      	str	r3, [r2, #24]
 8003f6c:	4b55      	ldr	r3, [pc, #340]	; (80040c4 <HAL_GPIO_Init+0x2d8>)
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	60bb      	str	r3, [r7, #8]
 8003f76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f78:	4a53      	ldr	r2, [pc, #332]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	3302      	adds	r3, #2
 8003f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	220f      	movs	r2, #15
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fa2:	d019      	beq.n	8003fd8 <HAL_GPIO_Init+0x1ec>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a49      	ldr	r2, [pc, #292]	; (80040cc <HAL_GPIO_Init+0x2e0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <HAL_GPIO_Init+0x1e8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a48      	ldr	r2, [pc, #288]	; (80040d0 <HAL_GPIO_Init+0x2e4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_GPIO_Init+0x1e4>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a47      	ldr	r2, [pc, #284]	; (80040d4 <HAL_GPIO_Init+0x2e8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d007      	beq.n	8003fcc <HAL_GPIO_Init+0x1e0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a46      	ldr	r2, [pc, #280]	; (80040d8 <HAL_GPIO_Init+0x2ec>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d101      	bne.n	8003fc8 <HAL_GPIO_Init+0x1dc>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	e008      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fc8:	2305      	movs	r3, #5
 8003fca:	e006      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e004      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e002      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	f002 0203 	and.w	r2, r2, #3
 8003fe0:	0092      	lsls	r2, r2, #2
 8003fe2:	4093      	lsls	r3, r2
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fea:	4937      	ldr	r1, [pc, #220]	; (80040c8 <HAL_GPIO_Init+0x2dc>)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ff8:	4b38      	ldr	r3, [pc, #224]	; (80040dc <HAL_GPIO_Init+0x2f0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	43db      	mvns	r3, r3
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4013      	ands	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <HAL_GPIO_Init+0x2f0>)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004022:	4b2e      	ldr	r3, [pc, #184]	; (80040dc <HAL_GPIO_Init+0x2f0>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004046:	4a25      	ldr	r2, [pc, #148]	; (80040dc <HAL_GPIO_Init+0x2f0>)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800404c:	4b23      	ldr	r3, [pc, #140]	; (80040dc <HAL_GPIO_Init+0x2f0>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004070:	4a1a      	ldr	r2, [pc, #104]	; (80040dc <HAL_GPIO_Init+0x2f0>)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004076:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_GPIO_Init+0x2f0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43db      	mvns	r3, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800409a:	4a10      	ldr	r2, [pc, #64]	; (80040dc <HAL_GPIO_Init+0x2f0>)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3301      	adds	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f47f aea3 	bne.w	8003dfc <HAL_GPIO_Init+0x10>
  }
}
 80040b6:	bf00      	nop
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40010000 	.word	0x40010000
 80040cc:	48000400 	.word	0x48000400
 80040d0:	48000800 	.word	0x48000800
 80040d4:	48000c00 	.word	0x48000c00
 80040d8:	48001000 	.word	0x48001000
 80040dc:	40010400 	.word	0x40010400

080040e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
 80040ec:	4613      	mov	r3, r2
 80040ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f0:	787b      	ldrb	r3, [r7, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040fc:	e002      	b.n	8004104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4013      	ands	r3, r2
 8004128:	041a      	lsls	r2, r3, #16
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	43d9      	mvns	r1, r3
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	400b      	ands	r3, r1
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	619a      	str	r2, [r3, #24]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e08f      	b.n	800427a <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b05      	cmp	r3, #5
 8004164:	d101      	bne.n	800416a <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e087      	b.n	800427a <HAL_OPAMP_Init+0x136>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d101      	bne.n	800417a <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e07f      	b.n	800427a <HAL_OPAMP_Init+0x136>
      assert_param(IS_OPAMP_INVERTING_INPUT(hopamp->Init.InvertingInput));
    }

    assert_param(IS_OPAMP_TIMERCONTROLLED_MUXMODE(hopamp->Init.TimerControlledMuxmode));

    if ((hopamp->Init.TimerControlledMuxmode) == OPAMP_TIMERCONTROLLEDMUXMODE_ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b80      	cmp	r3, #128	; 0x80
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004180:	4b40      	ldr	r3, [pc, #256]	; (8004284 <HAL_OPAMP_Init+0x140>)
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	4a3f      	ldr	r2, [pc, #252]	; (8004284 <HAL_OPAMP_Init+0x140>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6193      	str	r3, [r2, #24]
 800418c:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_OPAMP_Init+0x140>)
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <HAL_OPAMP_Init+0x68>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7fc ffd7 	bl	8001160 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d003      	beq.n	80041c2 <HAL_OPAMP_Init+0x7e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b60      	cmp	r3, #96	; 0x60
 80041c0:	d125      	bne.n	800420e <HAL_OPAMP_Init+0xca>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b2f      	ldr	r3, [pc, #188]	; (8004288 <HAL_OPAMP_Init+0x144>)
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6851      	ldr	r1, [r2, #4]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68d2      	ldr	r2, [r2, #12]
 80041d4:	4311      	orrs	r1, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6912      	ldr	r2, [r2, #16]
 80041da:	4311      	orrs	r1, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6992      	ldr	r2, [r2, #24]
 80041e0:	4311      	orrs	r1, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	69d2      	ldr	r2, [r2, #28]
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6a12      	ldr	r2, [r2, #32]
 80041ec:	4311      	orrs	r1, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041f2:	4311      	orrs	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041f8:	04d2      	lsls	r2, r2, #19
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004200:	0612      	lsls	r2, r2, #24
 8004202:	4311      	orrs	r1, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	430b      	orrs	r3, r1
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	e02a      	b.n	8004264 <HAL_OPAMP_Init+0x120>
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));  

    }
    else /* OPAMP_STANDALONE_MODE */
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <HAL_OPAMP_Init+0x144>)
 8004216:	4013      	ands	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6851      	ldr	r1, [r2, #4]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6892      	ldr	r2, [r2, #8]
 8004220:	4311      	orrs	r1, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68d2      	ldr	r2, [r2, #12]
 8004226:	4311      	orrs	r1, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6912      	ldr	r2, [r2, #16]
 800422c:	4311      	orrs	r1, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6952      	ldr	r2, [r2, #20]
 8004232:	4311      	orrs	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6992      	ldr	r2, [r2, #24]
 8004238:	4311      	orrs	r1, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	69d2      	ldr	r2, [r2, #28]
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6a12      	ldr	r2, [r2, #32]
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004250:	04d2      	lsls	r2, r2, #19
 8004252:	4311      	orrs	r1, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004258:	0612      	lsls	r2, r2, #24
 800425a:	4311      	orrs	r1, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	430b      	orrs	r3, r1
 8004262:	6013      	str	r3, [r2, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d103      	bne.n	8004278 <HAL_OPAMP_Init+0x134>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40021000 	.word	0x40021000
 8004288:	e0003811 	.word	0xe0003811

0800428c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
 80042a2:	e01d      	b.n	80042e0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b05      	cmp	r3, #5
 80042ae:	d102      	bne.n	80042b6 <HAL_OPAMP_Start+0x2a>

  {
    status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e014      	b.n	80042e0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d10c      	bne.n	80042dc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2204      	movs	r2, #4
 80042d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80042da:	e001      	b.n	80042e0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004300:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f001 b823 	b.w	800535c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 817d 	beq.w	8004626 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800432c:	4bbc      	ldr	r3, [pc, #752]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b04      	cmp	r3, #4
 8004336:	d00c      	beq.n	8004352 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004338:	4bb9      	ldr	r3, [pc, #740]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d15c      	bne.n	80043fe <HAL_RCC_OscConfig+0x10e>
 8004344:	4bb6      	ldr	r3, [pc, #728]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	d155      	bne.n	80043fe <HAL_RCC_OscConfig+0x10e>
 8004352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004356:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800435e:	fa93 f3a3 	rbit	r3, r3
 8004362:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004366:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	d102      	bne.n	8004384 <HAL_RCC_OscConfig+0x94>
 800437e:	4ba8      	ldr	r3, [pc, #672]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	e015      	b.n	80043b0 <HAL_RCC_OscConfig+0xc0>
 8004384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004388:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800439c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80043a0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80043ac:	4b9c      	ldr	r3, [pc, #624]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043b4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80043b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80043bc:	fa92 f2a2 	rbit	r2, r2
 80043c0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80043c4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80043c8:	fab2 f282 	clz	r2, r2
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	f042 0220 	orr.w	r2, r2, #32
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	f002 021f 	and.w	r2, r2, #31
 80043d8:	2101      	movs	r1, #1
 80043da:	fa01 f202 	lsl.w	r2, r1, r2
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 811f 	beq.w	8004624 <HAL_RCC_OscConfig+0x334>
 80043e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f040 8116 	bne.w	8004624 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f000 bfaf 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004402:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440e:	d106      	bne.n	800441e <HAL_RCC_OscConfig+0x12e>
 8004410:	4b83      	ldr	r3, [pc, #524]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a82      	ldr	r2, [pc, #520]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	e036      	b.n	800448c <HAL_RCC_OscConfig+0x19c>
 800441e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x158>
 800442e:	4b7c      	ldr	r3, [pc, #496]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7b      	ldr	r2, [pc, #492]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b79      	ldr	r3, [pc, #484]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a78      	ldr	r2, [pc, #480]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e021      	b.n	800448c <HAL_RCC_OscConfig+0x19c>
 8004448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x184>
 800445a:	4b71      	ldr	r3, [pc, #452]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a70      	ldr	r2, [pc, #448]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b6e      	ldr	r3, [pc, #440]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a6d      	ldr	r2, [pc, #436]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0x19c>
 8004474:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a69      	ldr	r2, [pc, #420]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800447a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b67      	ldr	r3, [pc, #412]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a66      	ldr	r2, [pc, #408]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800448c:	4b64      	ldr	r3, [pc, #400]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f023 020f 	bic.w	r2, r3, #15
 8004494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	495f      	ldr	r1, [pc, #380]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d059      	beq.n	800456a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b6:	f7fd fa8b 	bl	80019d0 <HAL_GetTick>
 80044ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c0:	f7fd fa86 	bl	80019d0 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	; 0x64
 80044ce:	d902      	bls.n	80044d6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	f000 bf43 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 80044d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80044ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d102      	bne.n	8004508 <HAL_RCC_OscConfig+0x218>
 8004502:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	e015      	b.n	8004534 <HAL_RCC_OscConfig+0x244>
 8004508:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800450c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800451c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004520:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004524:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004538:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800453c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004540:	fa92 f2a2 	rbit	r2, r2
 8004544:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004548:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800454c:	fab2 f282 	clz	r2, r2
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	f042 0220 	orr.w	r2, r2, #32
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	f002 021f 	and.w	r2, r2, #31
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f202 	lsl.w	r2, r1, r2
 8004562:	4013      	ands	r3, r2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ab      	beq.n	80044c0 <HAL_RCC_OscConfig+0x1d0>
 8004568:	e05d      	b.n	8004626 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7fd fa31 	bl	80019d0 <HAL_GetTick>
 800456e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004572:	e00a      	b.n	800458a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004574:	f7fd fa2c 	bl	80019d0 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	; 0x64
 8004582:	d902      	bls.n	800458a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	f000 bee9 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 800458a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800458e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800459e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d102      	bne.n	80045bc <HAL_RCC_OscConfig+0x2cc>
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	e015      	b.n	80045e8 <HAL_RCC_OscConfig+0x2f8>
 80045bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80045d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045d4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80045d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80045dc:	fa93 f3a3 	rbit	r3, r3
 80045e0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_RCC_OscConfig+0x330>)
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045ec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80045f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80045f4:	fa92 f2a2 	rbit	r2, r2
 80045f8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80045fc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004600:	fab2 f282 	clz	r2, r2
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	f042 0220 	orr.w	r2, r2, #32
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	f002 021f 	and.w	r2, r2, #31
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f202 	lsl.w	r2, r1, r2
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ab      	bne.n	8004574 <HAL_RCC_OscConfig+0x284>
 800461c:	e003      	b.n	8004626 <HAL_RCC_OscConfig+0x336>
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 817d 	beq.w	8004936 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800463c:	4ba6      	ldr	r3, [pc, #664]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004648:	4ba3      	ldr	r3, [pc, #652]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b08      	cmp	r3, #8
 8004652:	d172      	bne.n	800473a <HAL_RCC_OscConfig+0x44a>
 8004654:	4ba0      	ldr	r3, [pc, #640]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d16c      	bne.n	800473a <HAL_RCC_OscConfig+0x44a>
 8004660:	2302      	movs	r3, #2
 8004662:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800466a:	fa93 f3a3 	rbit	r3, r3
 800466e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004672:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d102      	bne.n	8004690 <HAL_RCC_OscConfig+0x3a0>
 800468a:	4b93      	ldr	r3, [pc, #588]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	e013      	b.n	80046b8 <HAL_RCC_OscConfig+0x3c8>
 8004690:	2302      	movs	r3, #2
 8004692:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80046a2:	2302      	movs	r3, #2
 80046a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80046a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80046b4:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2202      	movs	r2, #2
 80046ba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80046be:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80046c2:	fa92 f2a2 	rbit	r2, r2
 80046c6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80046ca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80046ce:	fab2 f282 	clz	r2, r2
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	f042 0220 	orr.w	r2, r2, #32
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	f002 021f 	and.w	r2, r2, #31
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_RCC_OscConfig+0x410>
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f000 be2e 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b75      	ldr	r3, [pc, #468]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	21f8      	movs	r1, #248	; 0xf8
 8004716:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800471e:	fa91 f1a1 	rbit	r1, r1
 8004722:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004726:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800472a:	fab1 f181 	clz	r1, r1
 800472e:	b2c9      	uxtb	r1, r1
 8004730:	408b      	lsls	r3, r1
 8004732:	4969      	ldr	r1, [pc, #420]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004734:	4313      	orrs	r3, r2
 8004736:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004738:	e0fd      	b.n	8004936 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800473a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8088 	beq.w	800485c <HAL_RCC_OscConfig+0x56c>
 800474c:	2301      	movs	r3, #1
 800474e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800475e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800476c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	461a      	mov	r2, r3
 8004774:	2301      	movs	r3, #1
 8004776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004778:	f7fd f92a 	bl	80019d0 <HAL_GetTick>
 800477c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004782:	f7fd f925 	bl	80019d0 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d902      	bls.n	8004798 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	f000 bde2 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 8004798:	2302      	movs	r3, #2
 800479a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80047aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d102      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4d8>
 80047c2:	4b45      	ldr	r3, [pc, #276]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	e013      	b.n	80047f0 <HAL_RCC_OscConfig+0x500>
 80047c8:	2302      	movs	r3, #2
 80047ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80047d2:	fa93 f3a3 	rbit	r3, r3
 80047d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80047da:	2302      	movs	r3, #2
 80047dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80047e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80047e4:	fa93 f3a3 	rbit	r3, r3
 80047e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80047ec:	4b3a      	ldr	r3, [pc, #232]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	2202      	movs	r2, #2
 80047f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80047f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80047fa:	fa92 f2a2 	rbit	r2, r2
 80047fe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004802:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004806:	fab2 f282 	clz	r2, r2
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	f042 0220 	orr.w	r2, r2, #32
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	f002 021f 	and.w	r2, r2, #31
 8004816:	2101      	movs	r1, #1
 8004818:	fa01 f202 	lsl.w	r2, r1, r2
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0af      	beq.n	8004782 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004822:	4b2d      	ldr	r3, [pc, #180]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	21f8      	movs	r1, #248	; 0xf8
 8004838:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004840:	fa91 f1a1 	rbit	r1, r1
 8004844:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004848:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800484c:	fab1 f181 	clz	r1, r1
 8004850:	b2c9      	uxtb	r1, r1
 8004852:	408b      	lsls	r3, r1
 8004854:	4920      	ldr	r1, [pc, #128]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
 800485a:	e06c      	b.n	8004936 <HAL_RCC_OscConfig+0x646>
 800485c:	2301      	movs	r3, #1
 800485e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004866:	fa93 f3a3 	rbit	r3, r3
 800486a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800486e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004872:	fab3 f383 	clz	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800487c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	461a      	mov	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fd f8a2 	bl	80019d0 <HAL_GetTick>
 800488c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004892:	f7fd f89d 	bl	80019d0 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d902      	bls.n	80048a8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	f000 bd5a 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80048ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d104      	bne.n	80048dc <HAL_RCC_OscConfig+0x5ec>
 80048d2:	4b01      	ldr	r3, [pc, #4]	; (80048d8 <HAL_RCC_OscConfig+0x5e8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	e015      	b.n	8004904 <HAL_RCC_OscConfig+0x614>
 80048d8:	40021000 	.word	0x40021000
 80048dc:	2302      	movs	r3, #2
 80048de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048e6:	fa93 f3a3 	rbit	r3, r3
 80048ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048ee:	2302      	movs	r3, #2
 80048f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80048f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004900:	4bc8      	ldr	r3, [pc, #800]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	2202      	movs	r2, #2
 8004906:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800490a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800490e:	fa92 f2a2 	rbit	r2, r2
 8004912:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004916:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800491a:	fab2 f282 	clz	r2, r2
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	f042 0220 	orr.w	r2, r2, #32
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	f002 021f 	and.w	r2, r2, #31
 800492a:	2101      	movs	r1, #1
 800492c:	fa01 f202 	lsl.w	r2, r1, r2
 8004930:	4013      	ands	r3, r2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1ad      	bne.n	8004892 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8110 	beq.w	8004b6c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800494c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d079      	beq.n	8004a50 <HAL_RCC_OscConfig+0x760>
 800495c:	2301      	movs	r3, #1
 800495e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800496e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	4bab      	ldr	r3, [pc, #684]	; (8004c28 <HAL_RCC_OscConfig+0x938>)
 800497c:	4413      	add	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	461a      	mov	r2, r3
 8004982:	2301      	movs	r3, #1
 8004984:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004986:	f7fd f823 	bl	80019d0 <HAL_GetTick>
 800498a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004990:	f7fd f81e 	bl	80019d0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d902      	bls.n	80049a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	f000 bcdb 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 80049a6:	2302      	movs	r3, #2
 80049a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049c0:	2202      	movs	r2, #2
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	fa93 f2a3 	rbit	r2, r3
 80049d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049e4:	2202      	movs	r2, #2
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	fa93 f2a3 	rbit	r2, r3
 80049f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a00:	4b88      	ldr	r3, [pc, #544]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	6019      	str	r1, [r3, #0]
 8004a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	fa93 f1a3 	rbit	r1, r3
 8004a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a26:	6019      	str	r1, [r3, #0]
  return result;
 8004a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 031f 	and.w	r3, r3, #31
 8004a42:	2101      	movs	r1, #1
 8004a44:	fa01 f303 	lsl.w	r3, r1, r3
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0a0      	beq.n	8004990 <HAL_RCC_OscConfig+0x6a0>
 8004a4e:	e08d      	b.n	8004b6c <HAL_RCC_OscConfig+0x87c>
 8004a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a54:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a58:	2201      	movs	r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	fa93 f2a3 	rbit	r2, r3
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a72:	601a      	str	r2, [r3, #0]
  return result;
 8004a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a7c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b68      	ldr	r3, [pc, #416]	; (8004c28 <HAL_RCC_OscConfig+0x938>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a92:	f7fc ff9d 	bl	80019d0 <HAL_GetTick>
 8004a96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a9c:	f7fc ff98 	bl	80019d0 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d902      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	f000 bc55 	b.w	800535c <HAL_RCC_OscConfig+0x106c>
 8004ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004aba:	2202      	movs	r2, #2
 8004abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	fa93 f2a3 	rbit	r2, r3
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ada:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ade:	2202      	movs	r2, #2
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	fa93 f2a3 	rbit	r2, r3
 8004af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b02:	2202      	movs	r2, #2
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	fa93 f2a3 	rbit	r2, r3
 8004b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1e:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b26:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	6019      	str	r1, [r3, #0]
 8004b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	fa93 f1a3 	rbit	r1, r3
 8004b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b44:	6019      	str	r1, [r3, #0]
  return result;
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	fab3 f383 	clz	r3, r3
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 031f 	and.w	r3, r3, #31
 8004b60:	2101      	movs	r1, #1
 8004b62:	fa01 f303 	lsl.w	r3, r1, r3
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d197      	bne.n	8004a9c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 81a1 	beq.w	8004ec4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b82:	2300      	movs	r3, #0
 8004b84:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b88:	4b26      	ldr	r3, [pc, #152]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d116      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b94:	4b23      	ldr	r3, [pc, #140]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	61d3      	str	r3, [r2, #28]
 8004ba0:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004bba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <HAL_RCC_OscConfig+0x93c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11a      	bne.n	8004c04 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <HAL_RCC_OscConfig+0x93c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <HAL_RCC_OscConfig+0x93c>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bda:	f7fc fef9 	bl	80019d0 <HAL_GetTick>
 8004bde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be2:	e009      	b.n	8004bf8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be4:	f7fc fef4 	bl	80019d0 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b64      	cmp	r3, #100	; 0x64
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e3b1      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <HAL_RCC_OscConfig+0x93c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ef      	beq.n	8004be4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10d      	bne.n	8004c30 <HAL_RCC_OscConfig+0x940>
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	4a02      	ldr	r2, [pc, #8]	; (8004c24 <HAL_RCC_OscConfig+0x934>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6213      	str	r3, [r2, #32]
 8004c20:	e03c      	b.n	8004c9c <HAL_RCC_OscConfig+0x9ac>
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000
 8004c28:	10908120 	.word	0x10908120
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RCC_OscConfig+0x96a>
 8004c40:	4bc1      	ldr	r3, [pc, #772]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	4ac0      	ldr	r2, [pc, #768]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6213      	str	r3, [r2, #32]
 8004c4c:	4bbe      	ldr	r3, [pc, #760]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4abd      	ldr	r2, [pc, #756]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c52:	f023 0304 	bic.w	r3, r3, #4
 8004c56:	6213      	str	r3, [r2, #32]
 8004c58:	e020      	b.n	8004c9c <HAL_RCC_OscConfig+0x9ac>
 8004c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x994>
 8004c6a:	4bb7      	ldr	r3, [pc, #732]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	4ab6      	ldr	r2, [pc, #728]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c70:	f043 0304 	orr.w	r3, r3, #4
 8004c74:	6213      	str	r3, [r2, #32]
 8004c76:	4bb4      	ldr	r3, [pc, #720]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4ab3      	ldr	r2, [pc, #716]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	6213      	str	r3, [r2, #32]
 8004c82:	e00b      	b.n	8004c9c <HAL_RCC_OscConfig+0x9ac>
 8004c84:	4bb0      	ldr	r3, [pc, #704]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	4aaf      	ldr	r2, [pc, #700]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	6213      	str	r3, [r2, #32]
 8004c90:	4bad      	ldr	r3, [pc, #692]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4aac      	ldr	r2, [pc, #688]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004c96:	f023 0304 	bic.w	r3, r3, #4
 8004c9a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8081 	beq.w	8004db0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cae:	f7fc fe8f 	bl	80019d0 <HAL_GetTick>
 8004cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fc fe8a 	bl	80019d0 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e345      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 8004cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004cd8:	2202      	movs	r2, #2
 8004cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	fa93 f2a3 	rbit	r2, r3
 8004cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	fa93 f2a3 	rbit	r2, r3
 8004d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d12:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d16:	601a      	str	r2, [r3, #0]
  return result;
 8004d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f043 0302 	orr.w	r3, r3, #2
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_OscConfig+0xa4c>
 8004d36:	4b84      	ldr	r3, [pc, #528]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	e013      	b.n	8004d64 <HAL_RCC_OscConfig+0xa74>
 8004d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d44:	2202      	movs	r2, #2
 8004d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	fa93 f2a3 	rbit	r2, r3
 8004d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d5a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	4b79      	ldr	r3, [pc, #484]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d68:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	6011      	str	r1, [r2, #0]
 8004d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d74:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	fa92 f1a2 	rbit	r1, r2
 8004d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d82:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d86:	6011      	str	r1, [r2, #0]
  return result;
 8004d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d8c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	fab2 f282 	clz	r2, r2
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	f002 021f 	and.w	r2, r2, #31
 8004da2:	2101      	movs	r1, #1
 8004da4:	fa01 f202 	lsl.w	r2, r1, r2
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d084      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x9c8>
 8004dae:	e07f      	b.n	8004eb0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db0:	f7fc fe0e 	bl	80019d0 <HAL_GetTick>
 8004db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db8:	e00b      	b.n	8004dd2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fc fe09 	bl	80019d0 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e2c4      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 8004dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004dda:	2202      	movs	r2, #2
 8004ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	fa93 f2a3 	rbit	r2, r3
 8004dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004dfe:	2202      	movs	r2, #2
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	fa93 f2a3 	rbit	r2, r3
 8004e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e14:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e18:	601a      	str	r2, [r3, #0]
  return result;
 8004e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e24:	fab3 f383 	clz	r3, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f043 0302 	orr.w	r3, r3, #2
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d102      	bne.n	8004e3e <HAL_RCC_OscConfig+0xb4e>
 8004e38:	4b43      	ldr	r3, [pc, #268]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	e013      	b.n	8004e66 <HAL_RCC_OscConfig+0xb76>
 8004e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e46:	2202      	movs	r2, #2
 8004e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	fa93 f2a3 	rbit	r2, r3
 8004e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e6e:	2102      	movs	r1, #2
 8004e70:	6011      	str	r1, [r2, #0]
 8004e72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e76:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	fa92 f1a2 	rbit	r1, r2
 8004e80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e88:	6011      	str	r1, [r2, #0]
  return result;
 8004e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e8e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	fab2 f282 	clz	r2, r2
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	f002 021f 	and.w	r2, r2, #31
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d184      	bne.n	8004dba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004eb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb8:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8242 	beq.w	800535a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <HAL_RCC_OscConfig+0xc58>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 030c 	and.w	r3, r3, #12
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	f000 8213 	beq.w	800530a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	f040 8162 	bne.w	80051ba <HAL_RCC_OscConfig+0xeca>
 8004ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004efe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f08:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	fa93 f2a3 	rbit	r2, r3
 8004f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f16:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f1a:	601a      	str	r2, [r3, #0]
  return result;
 8004f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f26:	fab3 f383 	clz	r3, r3
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	461a      	mov	r2, r3
 8004f38:	2300      	movs	r3, #0
 8004f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fc fd48 	bl	80019d0 <HAL_GetTick>
 8004f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f44:	e00c      	b.n	8004f60 <HAL_RCC_OscConfig+0xc70>
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fc fd40 	bl	80019d0 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e1fd      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 8004f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f72:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	fa93 f2a3 	rbit	r2, r3
 8004f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f80:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f84:	601a      	str	r2, [r3, #0]
  return result;
 8004f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f90:	fab3 f383 	clz	r3, r3
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d102      	bne.n	8004faa <HAL_RCC_OscConfig+0xcba>
 8004fa4:	4bb0      	ldr	r3, [pc, #704]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	e027      	b.n	8004ffa <HAL_RCC_OscConfig+0xd0a>
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	fa93 f2a3 	rbit	r2, r3
 8004fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	fa93 f2a3 	rbit	r2, r3
 8004fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	4b9c      	ldr	r3, [pc, #624]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ffe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005002:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005006:	6011      	str	r1, [r2, #0]
 8005008:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800500c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	fa92 f1a2 	rbit	r1, r2
 8005016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800501a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800501e:	6011      	str	r1, [r2, #0]
  return result;
 8005020:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005024:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	fab2 f282 	clz	r2, r2
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	f042 0220 	orr.w	r2, r2, #32
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	f002 021f 	and.w	r2, r2, #31
 800503a:	2101      	movs	r1, #1
 800503c:	fa01 f202 	lsl.w	r2, r1, r2
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d182      	bne.n	8004f4c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005046:	4b88      	ldr	r3, [pc, #544]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800504e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800505a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800505e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	430b      	orrs	r3, r1
 8005068:	497f      	ldr	r1, [pc, #508]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 800506a:	4313      	orrs	r3, r2
 800506c:	604b      	str	r3, [r1, #4]
 800506e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005072:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005076:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800507a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005080:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	fa93 f2a3 	rbit	r2, r3
 800508a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005092:	601a      	str	r2, [r3, #0]
  return result;
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800509c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800509e:	fab3 f383 	clz	r3, r3
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	461a      	mov	r2, r3
 80050b0:	2301      	movs	r3, #1
 80050b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fc fc8c 	bl	80019d0 <HAL_GetTick>
 80050b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050bc:	e009      	b.n	80050d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050be:	f7fc fc87 	bl	80019d0 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e144      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 80050d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	fa93 f2a3 	rbit	r2, r3
 80050ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80050f6:	601a      	str	r2, [r3, #0]
  return result;
 80050f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005100:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	b2db      	uxtb	r3, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	d102      	bne.n	800511c <HAL_RCC_OscConfig+0xe2c>
 8005116:	4b54      	ldr	r3, [pc, #336]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	e027      	b.n	800516c <HAL_RCC_OscConfig+0xe7c>
 800511c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005120:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	fa93 f2a3 	rbit	r2, r3
 8005138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005146:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800514a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005154:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	fa93 f2a3 	rbit	r2, r3
 800515e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005162:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005170:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005178:	6011      	str	r1, [r2, #0]
 800517a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800517e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	fa92 f1a2 	rbit	r1, r2
 8005188:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800518c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005190:	6011      	str	r1, [r2, #0]
  return result;
 8005192:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005196:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800519a:	6812      	ldr	r2, [r2, #0]
 800519c:	fab2 f282 	clz	r2, r2
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	f042 0220 	orr.w	r2, r2, #32
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	f002 021f 	and.w	r2, r2, #31
 80051ac:	2101      	movs	r1, #1
 80051ae:	fa01 f202 	lsl.w	r2, r1, r2
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d082      	beq.n	80050be <HAL_RCC_OscConfig+0xdce>
 80051b8:	e0cf      	b.n	800535a <HAL_RCC_OscConfig+0x106a>
 80051ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80051c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	fa93 f2a3 	rbit	r2, r3
 80051d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80051de:	601a      	str	r2, [r3, #0]
  return result;
 80051e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80051e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ea:	fab3 f383 	clz	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	2300      	movs	r3, #0
 80051fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7fc fbe6 	bl	80019d0 <HAL_GetTick>
 8005204:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005208:	e009      	b.n	800521e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520a:	f7fc fbe1 	bl	80019d0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e09e      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
 800521e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005222:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005226:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800522a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005230:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	fa93 f2a3 	rbit	r2, r3
 800523a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005242:	601a      	str	r2, [r3, #0]
  return result;
 8005244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005248:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800524c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d104      	bne.n	800526c <HAL_RCC_OscConfig+0xf7c>
 8005262:	4b01      	ldr	r3, [pc, #4]	; (8005268 <HAL_RCC_OscConfig+0xf78>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	e029      	b.n	80052bc <HAL_RCC_OscConfig+0xfcc>
 8005268:	40021000 	.word	0x40021000
 800526c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005270:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	fa93 f2a3 	rbit	r2, r3
 8005288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005296:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800529a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	fa93 f2a3 	rbit	r2, r3
 80052ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <HAL_RCC_OscConfig+0x1078>)
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80052c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052c8:	6011      	str	r1, [r2, #0]
 80052ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	fa92 f1a2 	rbit	r1, r2
 80052d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80052e0:	6011      	str	r1, [r2, #0]
  return result;
 80052e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	fab2 f282 	clz	r2, r2
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	f042 0220 	orr.w	r2, r2, #32
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	f002 021f 	and.w	r2, r2, #31
 80052fc:	2101      	movs	r1, #1
 80052fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d180      	bne.n	800520a <HAL_RCC_OscConfig+0xf1a>
 8005308:	e027      	b.n	800535a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800530a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e01e      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <HAL_RCC_OscConfig+0x1078>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800532a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800532e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	429a      	cmp	r2, r3
 800533c:	d10b      	bne.n	8005356 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800533e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005342:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005352:	429a      	cmp	r2, r3
 8005354:	d001      	beq.n	800535a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000

0800536c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b09e      	sub	sp, #120	; 0x78
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e162      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005384:	4b90      	ldr	r3, [pc, #576]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d910      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005392:	4b8d      	ldr	r3, [pc, #564]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f023 0207 	bic.w	r2, r3, #7
 800539a:	498b      	ldr	r1, [pc, #556]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b89      	ldr	r3, [pc, #548]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e14a      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c0:	4b82      	ldr	r3, [pc, #520]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	497f      	ldr	r1, [pc, #508]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80dc 	beq.w	8005598 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d13c      	bne.n	8005462 <HAL_RCC_ClockConfig+0xf6>
 80053e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053f0:	fa93 f3a3 	rbit	r3, r3
 80053f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f8:	fab3 f383 	clz	r3, r3
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	b2db      	uxtb	r3, r3
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d102      	bne.n	8005412 <HAL_RCC_ClockConfig+0xa6>
 800540c:	4b6f      	ldr	r3, [pc, #444]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	e00f      	b.n	8005432 <HAL_RCC_ClockConfig+0xc6>
 8005412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005416:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800541a:	fa93 f3a3 	rbit	r3, r3
 800541e:	667b      	str	r3, [r7, #100]	; 0x64
 8005420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005424:	663b      	str	r3, [r7, #96]	; 0x60
 8005426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005428:	fa93 f3a3 	rbit	r3, r3
 800542c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542e:	4b67      	ldr	r3, [pc, #412]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005436:	65ba      	str	r2, [r7, #88]	; 0x58
 8005438:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800543a:	fa92 f2a2 	rbit	r2, r2
 800543e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005440:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005442:	fab2 f282 	clz	r2, r2
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	f042 0220 	orr.w	r2, r2, #32
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	f002 021f 	and.w	r2, r2, #31
 8005452:	2101      	movs	r1, #1
 8005454:	fa01 f202 	lsl.w	r2, r1, r2
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d17b      	bne.n	8005556 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e0f3      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d13c      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x178>
 800546a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800546e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005472:	fa93 f3a3 	rbit	r3, r3
 8005476:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547a:	fab3 f383 	clz	r3, r3
 800547e:	b2db      	uxtb	r3, r3
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	d102      	bne.n	8005494 <HAL_RCC_ClockConfig+0x128>
 800548e:	4b4f      	ldr	r3, [pc, #316]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	e00f      	b.n	80054b4 <HAL_RCC_ClockConfig+0x148>
 8005494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005498:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44
 80054a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054a6:	643b      	str	r3, [r7, #64]	; 0x40
 80054a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b0:	4b46      	ldr	r3, [pc, #280]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 80054b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80054ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054bc:	fa92 f2a2 	rbit	r2, r2
 80054c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80054c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c4:	fab2 f282 	clz	r2, r2
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	f042 0220 	orr.w	r2, r2, #32
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	f002 021f 	and.w	r2, r2, #31
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f202 	lsl.w	r2, r1, r2
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d13a      	bne.n	8005556 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0b2      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
 80054e4:	2302      	movs	r3, #2
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	fa93 f3a3 	rbit	r3, r3
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f2:	fab3 f383 	clz	r3, r3
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	d102      	bne.n	800550c <HAL_RCC_ClockConfig+0x1a0>
 8005506:	4b31      	ldr	r3, [pc, #196]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	e00d      	b.n	8005528 <HAL_RCC_ClockConfig+0x1bc>
 800550c:	2302      	movs	r3, #2
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005512:	fa93 f3a3 	rbit	r3, r3
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
 8005518:	2302      	movs	r3, #2
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	fa93 f3a3 	rbit	r3, r3
 8005522:	61fb      	str	r3, [r7, #28]
 8005524:	4b29      	ldr	r3, [pc, #164]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2202      	movs	r2, #2
 800552a:	61ba      	str	r2, [r7, #24]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	fa92 f2a2 	rbit	r2, r2
 8005532:	617a      	str	r2, [r7, #20]
  return result;
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	fab2 f282 	clz	r2, r2
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	f042 0220 	orr.w	r2, r2, #32
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	f002 021f 	and.w	r2, r2, #31
 8005546:	2101      	movs	r1, #1
 8005548:	fa01 f202 	lsl.w	r2, r1, r2
 800554c:	4013      	ands	r3, r2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e079      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005556:	4b1d      	ldr	r3, [pc, #116]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f023 0203 	bic.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	491a      	ldr	r1, [pc, #104]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005564:	4313      	orrs	r3, r2
 8005566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005568:	f7fc fa32 	bl	80019d0 <HAL_GetTick>
 800556c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	e00a      	b.n	8005586 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005570:	f7fc fa2e 	bl	80019d0 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	f241 3288 	movw	r2, #5000	; 0x1388
 800557e:	4293      	cmp	r3, r2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e061      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005586:	4b11      	ldr	r3, [pc, #68]	; (80055cc <HAL_RCC_ClockConfig+0x260>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f003 020c 	and.w	r2, r3, #12
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	429a      	cmp	r2, r3
 8005596:	d1eb      	bne.n	8005570 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d214      	bcs.n	80055d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055a6:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 0207 	bic.w	r2, r3, #7
 80055ae:	4906      	ldr	r1, [pc, #24]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b6:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <HAL_RCC_ClockConfig+0x25c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e040      	b.n	800564a <HAL_RCC_ClockConfig+0x2de>
 80055c8:	40022000 	.word	0x40022000
 80055cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055dc:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	491a      	ldr	r1, [pc, #104]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055fa:	4b16      	ldr	r3, [pc, #88]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4912      	ldr	r1, [pc, #72]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800560e:	f000 f829 	bl	8005664 <HAL_RCC_GetSysClockFreq>
 8005612:	4601      	mov	r1, r0
 8005614:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <HAL_RCC_ClockConfig+0x2e8>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561c:	22f0      	movs	r2, #240	; 0xf0
 800561e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	fa92 f2a2 	rbit	r2, r2
 8005626:	60fa      	str	r2, [r7, #12]
  return result;
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	fab2 f282 	clz	r2, r2
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	40d3      	lsrs	r3, r2
 8005632:	4a09      	ldr	r2, [pc, #36]	; (8005658 <HAL_RCC_ClockConfig+0x2ec>)
 8005634:	5cd3      	ldrb	r3, [r2, r3]
 8005636:	fa21 f303 	lsr.w	r3, r1, r3
 800563a:	4a08      	ldr	r2, [pc, #32]	; (800565c <HAL_RCC_ClockConfig+0x2f0>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <HAL_RCC_ClockConfig+0x2f4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fc f980 	bl	8001948 <HAL_InitTick>
  
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3778      	adds	r7, #120	; 0x78
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	080060bc 	.word	0x080060bc
 800565c:	20000000 	.word	0x20000000
 8005660:	20000004 	.word	0x20000004

08005664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005664:	b480      	push	{r7}
 8005666:	b08b      	sub	sp, #44	; 0x2c
 8005668:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	2300      	movs	r3, #0
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800567e:	4b29      	ldr	r3, [pc, #164]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f003 030c 	and.w	r3, r3, #12
 800568a:	2b04      	cmp	r3, #4
 800568c:	d002      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x30>
 800568e:	2b08      	cmp	r3, #8
 8005690:	d003      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0x36>
 8005692:	e03c      	b.n	800570e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005694:	4b24      	ldr	r3, [pc, #144]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005696:	623b      	str	r3, [r7, #32]
      break;
 8005698:	e03c      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80056a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80056a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	fa92 f2a2 	rbit	r2, r2
 80056ac:	607a      	str	r2, [r7, #4]
  return result;
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	fab2 f282 	clz	r2, r2
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	40d3      	lsrs	r3, r2
 80056b8:	4a1c      	ldr	r2, [pc, #112]	; (800572c <HAL_RCC_GetSysClockFreq+0xc8>)
 80056ba:	5cd3      	ldrb	r3, [r2, r3]
 80056bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80056be:	4b19      	ldr	r3, [pc, #100]	; (8005724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	f003 030f 	and.w	r3, r3, #15
 80056c6:	220f      	movs	r2, #15
 80056c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	fa92 f2a2 	rbit	r2, r2
 80056d0:	60fa      	str	r2, [r7, #12]
  return result;
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	fab2 f282 	clz	r2, r2
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	40d3      	lsrs	r3, r2
 80056dc:	4a14      	ldr	r2, [pc, #80]	; (8005730 <HAL_RCC_GetSysClockFreq+0xcc>)
 80056de:	5cd3      	ldrb	r3, [r2, r3]
 80056e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056ec:	4a0e      	ldr	r2, [pc, #56]	; (8005728 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	fb02 f303 	mul.w	r3, r2, r3
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
 80056fc:	e004      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4a0c      	ldr	r2, [pc, #48]	; (8005734 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	623b      	str	r3, [r7, #32]
      break;
 800570c:	e002      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800570e:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005710:	623b      	str	r3, [r7, #32]
      break;
 8005712:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005714:	6a3b      	ldr	r3, [r7, #32]
}
 8005716:	4618      	mov	r0, r3
 8005718:	372c      	adds	r7, #44	; 0x2c
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000
 8005728:	00f42400 	.word	0x00f42400
 800572c:	080060cc 	.word	0x080060cc
 8005730:	080060dc 	.word	0x080060dc
 8005734:	003d0900 	.word	0x003d0900
 8005738:	007a1200 	.word	0x007a1200

0800573c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b092      	sub	sp, #72	; 0x48
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800574c:	2300      	movs	r3, #0
 800574e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 80d4 	beq.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005760:	4b4e      	ldr	r3, [pc, #312]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10e      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800576c:	4b4b      	ldr	r3, [pc, #300]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	4a4a      	ldr	r2, [pc, #296]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005776:	61d3      	str	r3, [r2, #28]
 8005778:	4b48      	ldr	r3, [pc, #288]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578a:	4b45      	ldr	r3, [pc, #276]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d118      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005796:	4b42      	ldr	r3, [pc, #264]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a41      	ldr	r2, [pc, #260]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800579c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057a2:	f7fc f915 	bl	80019d0 <HAL_GetTick>
 80057a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a8:	e008      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057aa:	f7fc f911 	bl	80019d0 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b64      	cmp	r3, #100	; 0x64
 80057b6:	d901      	bls.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e169      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057bc:	4b38      	ldr	r3, [pc, #224]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057c8:	4b34      	ldr	r3, [pc, #208]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8084 	beq.w	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d07c      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057e8:	4b2c      	ldr	r3, [pc, #176]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	fa93 f3a3 	rbit	r3, r3
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	4b26      	ldr	r3, [pc, #152]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	461a      	mov	r2, r3
 8005812:	2301      	movs	r3, #1
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800581a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	fa93 f3a3 	rbit	r3, r3
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005826:	fab3 f383 	clz	r3, r3
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800583c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	d04b      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584a:	f7fc f8c1 	bl	80019d0 <HAL_GetTick>
 800584e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005850:	e00a      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005852:	f7fc f8bd 	bl	80019d0 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005860:	4293      	cmp	r3, r2
 8005862:	d901      	bls.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e113      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005868:	2302      	movs	r3, #2
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
 8005874:	2302      	movs	r3, #2
 8005876:	623b      	str	r3, [r7, #32]
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	fa93 f3a3 	rbit	r3, r3
 800587e:	61fb      	str	r3, [r7, #28]
  return result;
 8005880:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005882:	fab3 f383 	clz	r3, r3
 8005886:	b2db      	uxtb	r3, r3
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f043 0302 	orr.w	r3, r3, #2
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d108      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005896:	4b01      	ldr	r3, [pc, #4]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	e00d      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800589c:	40021000 	.word	0x40021000
 80058a0:	40007000 	.word	0x40007000
 80058a4:	10908100 	.word	0x10908100
 80058a8:	2302      	movs	r3, #2
 80058aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	fa93 f3a3 	rbit	r3, r3
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	4b78      	ldr	r3, [pc, #480]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2202      	movs	r2, #2
 80058ba:	613a      	str	r2, [r7, #16]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	fa92 f2a2 	rbit	r2, r2
 80058c2:	60fa      	str	r2, [r7, #12]
  return result;
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	fab2 f282 	clz	r2, r2
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	f002 021f 	and.w	r2, r2, #31
 80058d6:	2101      	movs	r1, #1
 80058d8:	fa01 f202 	lsl.w	r2, r1, r2
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0b7      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80058e2:	4b6d      	ldr	r3, [pc, #436]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	496a      	ldr	r1, [pc, #424]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d105      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058fc:	4b66      	ldr	r3, [pc, #408]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	4a65      	ldr	r2, [pc, #404]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005906:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005914:	4b60      	ldr	r3, [pc, #384]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	f023 0203 	bic.w	r2, r3, #3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	495d      	ldr	r1, [pc, #372]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005922:	4313      	orrs	r3, r2
 8005924:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005932:	4b59      	ldr	r3, [pc, #356]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	4956      	ldr	r1, [pc, #344]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005940:	4313      	orrs	r3, r2
 8005942:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005950:	4b51      	ldr	r3, [pc, #324]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	494e      	ldr	r1, [pc, #312]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800595e:	4313      	orrs	r3, r2
 8005960:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d008      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800596e:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	f023 0210 	bic.w	r2, r3, #16
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	4947      	ldr	r1, [pc, #284]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800597c:	4313      	orrs	r3, r2
 800597e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800598c:	4b42      	ldr	r3, [pc, #264]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	493f      	ldr	r1, [pc, #252]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599a:	4313      	orrs	r3, r2
 800599c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059aa:	4b3b      	ldr	r3, [pc, #236]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f023 0220 	bic.w	r2, r3, #32
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	4938      	ldr	r1, [pc, #224]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059c8:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	4930      	ldr	r1, [pc, #192]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d008      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059e6:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	4929      	ldr	r1, [pc, #164]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a04:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4921      	ldr	r1, [pc, #132]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	491a      	ldr	r1, [pc, #104]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005a40:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	4912      	ldr	r1, [pc, #72]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a5e:	4b0e      	ldr	r3, [pc, #56]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	490b      	ldr	r1, [pc, #44]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	4903      	ldr	r1, [pc, #12]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3748      	adds	r7, #72	; 0x48
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	40021000 	.word	0x40021000

08005a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e049      	b.n	8005b42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb fc5c 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f000 f8fe 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_TIM_ConfigClockSource+0x1c>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e0b6      	b.n	8005cd4 <HAL_TIM_ConfigClockSource+0x18a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2202      	movs	r2, #2
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b90:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba2:	d03e      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0xd8>
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba8:	f200 8087 	bhi.w	8005cba <HAL_TIM_ConfigClockSource+0x170>
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	f000 8086 	beq.w	8005cc0 <HAL_TIM_ConfigClockSource+0x176>
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb8:	d87f      	bhi.n	8005cba <HAL_TIM_ConfigClockSource+0x170>
 8005bba:	2b70      	cmp	r3, #112	; 0x70
 8005bbc:	d01a      	beq.n	8005bf4 <HAL_TIM_ConfigClockSource+0xaa>
 8005bbe:	2b70      	cmp	r3, #112	; 0x70
 8005bc0:	d87b      	bhi.n	8005cba <HAL_TIM_ConfigClockSource+0x170>
 8005bc2:	2b60      	cmp	r3, #96	; 0x60
 8005bc4:	d050      	beq.n	8005c68 <HAL_TIM_ConfigClockSource+0x11e>
 8005bc6:	2b60      	cmp	r3, #96	; 0x60
 8005bc8:	d877      	bhi.n	8005cba <HAL_TIM_ConfigClockSource+0x170>
 8005bca:	2b50      	cmp	r3, #80	; 0x50
 8005bcc:	d03c      	beq.n	8005c48 <HAL_TIM_ConfigClockSource+0xfe>
 8005bce:	2b50      	cmp	r3, #80	; 0x50
 8005bd0:	d873      	bhi.n	8005cba <HAL_TIM_ConfigClockSource+0x170>
 8005bd2:	2b40      	cmp	r3, #64	; 0x40
 8005bd4:	d058      	beq.n	8005c88 <HAL_TIM_ConfigClockSource+0x13e>
 8005bd6:	2b40      	cmp	r3, #64	; 0x40
 8005bd8:	d86f      	bhi.n	8005cba <HAL_TIM_ConfigClockSource+0x170>
 8005bda:	2b30      	cmp	r3, #48	; 0x30
 8005bdc:	d064      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0x15e>
 8005bde:	2b30      	cmp	r3, #48	; 0x30
 8005be0:	d86b      	bhi.n	8005cba <HAL_TIM_ConfigClockSource+0x170>
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d060      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0x15e>
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d867      	bhi.n	8005cba <HAL_TIM_ConfigClockSource+0x170>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d05c      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0x15e>
 8005bee:	2b10      	cmp	r3, #16
 8005bf0:	d05a      	beq.n	8005ca8 <HAL_TIM_ConfigClockSource+0x15e>
 8005bf2:	e062      	b.n	8005cba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c04:	f000 f974 	bl	8005ef0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c16:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]
      break;
 8005c20:	e04f      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c32:	f000 f95d 	bl	8005ef0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c44:	609a      	str	r2, [r3, #8]
      break;
 8005c46:	e03c      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c54:	461a      	mov	r2, r3
 8005c56:	f000 f8d1 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2150      	movs	r1, #80	; 0x50
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f92a 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005c66:	e02c      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c74:	461a      	mov	r2, r3
 8005c76:	f000 f8f0 	bl	8005e5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2160      	movs	r1, #96	; 0x60
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 f91a 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005c86:	e01c      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c94:	461a      	mov	r2, r3
 8005c96:	f000 f8b1 	bl	8005dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2140      	movs	r1, #64	; 0x40
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f90a 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005ca6:	e00c      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f000 f901 	bl	8005eba <TIM_ITRx_SetConfig>
      break;
 8005cb8:	e003      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbe:	e000      	b.n	8005cc2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005cc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a3c      	ldr	r2, [pc, #240]	; (8005de0 <TIM_Base_SetConfig+0x104>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00f      	beq.n	8005d14 <TIM_Base_SetConfig+0x38>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d00b      	beq.n	8005d14 <TIM_Base_SetConfig+0x38>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a39      	ldr	r2, [pc, #228]	; (8005de4 <TIM_Base_SetConfig+0x108>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_Base_SetConfig+0x38>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a38      	ldr	r2, [pc, #224]	; (8005de8 <TIM_Base_SetConfig+0x10c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_Base_SetConfig+0x38>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a37      	ldr	r2, [pc, #220]	; (8005dec <TIM_Base_SetConfig+0x110>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d108      	bne.n	8005d26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2d      	ldr	r2, [pc, #180]	; (8005de0 <TIM_Base_SetConfig+0x104>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01b      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d017      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2a      	ldr	r2, [pc, #168]	; (8005de4 <TIM_Base_SetConfig+0x108>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d013      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a29      	ldr	r2, [pc, #164]	; (8005de8 <TIM_Base_SetConfig+0x10c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d00f      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a28      	ldr	r2, [pc, #160]	; (8005dec <TIM_Base_SetConfig+0x110>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a27      	ldr	r2, [pc, #156]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a26      	ldr	r2, [pc, #152]	; (8005df4 <TIM_Base_SetConfig+0x118>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_Base_SetConfig+0x8a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a25      	ldr	r2, [pc, #148]	; (8005df8 <TIM_Base_SetConfig+0x11c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a10      	ldr	r2, [pc, #64]	; (8005de0 <TIM_Base_SetConfig+0x104>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00f      	beq.n	8005dc4 <TIM_Base_SetConfig+0xe8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a11      	ldr	r2, [pc, #68]	; (8005dec <TIM_Base_SetConfig+0x110>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00b      	beq.n	8005dc4 <TIM_Base_SetConfig+0xe8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a10      	ldr	r2, [pc, #64]	; (8005df0 <TIM_Base_SetConfig+0x114>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d007      	beq.n	8005dc4 <TIM_Base_SetConfig+0xe8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a0f      	ldr	r2, [pc, #60]	; (8005df4 <TIM_Base_SetConfig+0x118>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_Base_SetConfig+0xe8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a0e      	ldr	r2, [pc, #56]	; (8005df8 <TIM_Base_SetConfig+0x11c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d103      	bne.n	8005dcc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	615a      	str	r2, [r3, #20]
}
 8005dd2:	bf00      	nop
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	40013400 	.word	0x40013400
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40014400 	.word	0x40014400
 8005df8:	40014800 	.word	0x40014800

08005dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0201 	bic.w	r2, r3, #1
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 030a 	bic.w	r3, r3, #10
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f023 0210 	bic.w	r2, r3, #16
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	031b      	lsls	r3, r3, #12
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f043 0307 	orr.w	r3, r3, #7
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	609a      	str	r2, [r3, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	021a      	lsls	r2, r3, #8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e063      	b.n	8006010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2b      	ldr	r2, [pc, #172]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2a      	ldr	r2, [pc, #168]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d108      	bne.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1b      	ldr	r2, [pc, #108]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d013      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a18      	ldr	r2, [pc, #96]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a12      	ldr	r2, [pc, #72]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a13      	ldr	r2, [pc, #76]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d10c      	bne.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40012c00 	.word	0x40012c00
 8006020:	40013400 	.word	0x40013400
 8006024:	40000400 	.word	0x40000400
 8006028:	40000800 	.word	0x40000800
 800602c:	40014000 	.word	0x40014000

08006030 <memset>:
 8006030:	4402      	add	r2, r0
 8006032:	4603      	mov	r3, r0
 8006034:	4293      	cmp	r3, r2
 8006036:	d100      	bne.n	800603a <memset+0xa>
 8006038:	4770      	bx	lr
 800603a:	f803 1b01 	strb.w	r1, [r3], #1
 800603e:	e7f9      	b.n	8006034 <memset+0x4>

08006040 <__libc_init_array>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	4d0d      	ldr	r5, [pc, #52]	; (8006078 <__libc_init_array+0x38>)
 8006044:	4c0d      	ldr	r4, [pc, #52]	; (800607c <__libc_init_array+0x3c>)
 8006046:	1b64      	subs	r4, r4, r5
 8006048:	10a4      	asrs	r4, r4, #2
 800604a:	2600      	movs	r6, #0
 800604c:	42a6      	cmp	r6, r4
 800604e:	d109      	bne.n	8006064 <__libc_init_array+0x24>
 8006050:	4d0b      	ldr	r5, [pc, #44]	; (8006080 <__libc_init_array+0x40>)
 8006052:	4c0c      	ldr	r4, [pc, #48]	; (8006084 <__libc_init_array+0x44>)
 8006054:	f000 f826 	bl	80060a4 <_init>
 8006058:	1b64      	subs	r4, r4, r5
 800605a:	10a4      	asrs	r4, r4, #2
 800605c:	2600      	movs	r6, #0
 800605e:	42a6      	cmp	r6, r4
 8006060:	d105      	bne.n	800606e <__libc_init_array+0x2e>
 8006062:	bd70      	pop	{r4, r5, r6, pc}
 8006064:	f855 3b04 	ldr.w	r3, [r5], #4
 8006068:	4798      	blx	r3
 800606a:	3601      	adds	r6, #1
 800606c:	e7ee      	b.n	800604c <__libc_init_array+0xc>
 800606e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006072:	4798      	blx	r3
 8006074:	3601      	adds	r6, #1
 8006076:	e7f2      	b.n	800605e <__libc_init_array+0x1e>
 8006078:	080060ec 	.word	0x080060ec
 800607c:	080060ec 	.word	0x080060ec
 8006080:	080060ec 	.word	0x080060ec
 8006084:	080060f0 	.word	0x080060f0

08006088 <memcpy>:
 8006088:	440a      	add	r2, r1
 800608a:	4291      	cmp	r1, r2
 800608c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006090:	d100      	bne.n	8006094 <memcpy+0xc>
 8006092:	4770      	bx	lr
 8006094:	b510      	push	{r4, lr}
 8006096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800609a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800609e:	4291      	cmp	r1, r2
 80060a0:	d1f9      	bne.n	8006096 <memcpy+0xe>
 80060a2:	bd10      	pop	{r4, pc}

080060a4 <_init>:
 80060a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a6:	bf00      	nop
 80060a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060aa:	bc08      	pop	{r3}
 80060ac:	469e      	mov	lr, r3
 80060ae:	4770      	bx	lr

080060b0 <_fini>:
 80060b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b2:	bf00      	nop
 80060b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b6:	bc08      	pop	{r3}
 80060b8:	469e      	mov	lr, r3
 80060ba:	4770      	bx	lr
